package com.hasbrop2m.sanity;

//import java.text.SimpleDateFormat;
//import java.util.Date;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
//import java.util.concurrent.TimeUnit;
//import java.util.regex.Matcher;
//import java.util.regex.Pattern;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.NoSuchFrameException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.SkipException;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import com.hasbrop2m.ci2018.CI260;
//import com.hasbro.security.InternalBOMSoftG;
import com.hasbrop2m.security.Color;
import com.hasbrop2m.security.Colorway;
import com.hasbrop2m.security.CostsheetExternalProduct;
import com.hasbrop2m.security.CostsheetInternal;
import com.hasbrop2m.security.GlobalLinePlan;
import com.hasbrop2m.security.InternalBOMSoftG;
import com.hasbrop2m.security.Material;
import com.hasbrop2m.security.PlaceHolderDevPlan;
import com.hasbrop2m.security.Product;
import com.hasbrop2m.security.Sample;
import com.hasbrop2m.security.SourcingConfig;
import com.hasbrop2m.security.Specifications;
import com.hasbrop2m.security.Supplier;

import com.hasbrop2m.core.SeleniumDriver;
import com.hasbrop2m.mostCommonFunctions.CommonFunctions;
import com.hasbrop2m.mostCommonFunctions.CommonProjectFunctions;
import com.hasbrop2m.core.ErrorUtil;
import com.hasbrop2m.core.Utility;

/**
 * @author anjali.gupta
 *
 */

public class SanitySuite1 extends TestsuiteBase{
	
	
	String runmodes[]=null;
	static int count=-1;
	static boolean fail=false;
	static boolean skip=false;
	static boolean isTestPass=true;
	String loginVal;
	Boolean flaglogin=false;
	int y=0;
	static String Prodname;
	static String MyCostSheetName;
	public static ArrayList<String> newTab1;
	
	//WebElement Related to first 2 Test cases
	
	public static By mySeasonYear                                            = By.id("seasonSelectList");
	public static By ManualInputWaveForeCast                                 = By.xpath("//td[contains(text(),'Manually Input Wave Forecasts')]//following::input[2]");
	public static By Details                                                 = By.xpath("//a[text()='Details']");
	public static By labelWaveRequirements2                                  = By.xpath("//td[contains(text(),'Wave Requirements 2 - Quantity')]");
	public static By labelWaveRequirements2Edit                              = By.xpath("//td[contains(text(),'Wave Requirements 2 - Quantity')]//following::a[1]");
	public static By DoneButton                                              = By.xpath(".//*[@id='contentDiv']/table/tbody/tr[7]/td/table/tbody/tr/td[2]");
	public static By TotalForecastQuantity                                   = By.xpath("//td[contains(text(),'Forecast Qty')]//following::td[34]");
	public static By ActionsDropDown                                         = By.xpath("//select[@id='prodseasonActions']");
	public static By EnterValuesInWaveRequirement1;
	public static By ForeCastQuantityColumns;
	public static By PercentageWaveForecast2Columns;
	public static By enterValuesInWaveRequirement;
	public static By ForeCastQuantity;
	//variables
    public static String productName;
	public static String prodName;
	public static String prodNumber;
	public static String prodNumberForTC24;
	public static String pageTitle;
	public static String IncreaseColumnWaveQuantityForecast;
	public static String IncreaseColumnWaveQuantityForecast1;
	public static String ActualValue;
	public static String ExpectedValue;
    public static String IncreaseColumnPercentageWaveForecast; 
    public static String IncreaseColumnPercentageWaveForecast1;
    public static String foreCastQuantityString;
    private static int standardNoOfColumns=12;
	
	
	//WebElements To 3,4,5 and 6 test case Numbers
	public static By HeaderDropDown                                          = By.xpath("//select[@id='searchDropDownSelect']");
	public static By HeaderSearch                                            = By.xpath("//input[@id='searchField']");
	public static By HeaderSearchButton                                      = By.xpath("//img[@id='searchButton']");
	public static By PlaceHolderActionsDropDown                              = By.xpath("//td[contains(text(),'Actions:')]//following::select[1]");
	public static By LifeCycleStateDropDown                                  = By.xpath("//select[@id='lcstate']");
	public static By UpdateButton                                            = By.xpath("//a[text()='Update']");    
	public static By AssociatedProductsActionDropDown                        = By.xpath("//a[contains(text(),'Placeholder Status')]//following::tr[1]/td[1]/select[1]");
	public static By SourcingLeadDropDown                                    = By.xpath("//td[contains(text(),'Sourcing Lead')]//following::select[1]");
	public static By SourcingHeadDropDown                                    = By.xpath("//td[contains(text(),'Sourcing Head')]//following::select[1]");
	public static By ProductType;
	public static By RemoveProductDropDown;
	public static By RemoveProduct;
	
	public static String removeProductDropDown;
	public static String removeProduct;
	public static String CostSheetValue;
	public static String BOMname;
	public static String ColorwayDropdownValue;
	
	//WebElements Related To 7,8,9 and 10 test case Number
	public static By FiltersButton                                           = By.xpath("//a[@id='filterButton']");
	public static By ProductTextBox                                          = By.xpath(".//td[contains(text(),'Product Number')]//following::input[1]");
	public static By OptionsButton                                           = By.xpath("//a[text()='Options']");
	public static By LevelDropDown                                           = By.xpath("//select[@id='linePlanLevel']");
	public static By PlaceHolderDropDown                                     = By.xpath("//select[@id='placeholderMode']");
	public static By ViewsDropDown                                           = By.xpath("//select[@id='viewId']");
	public static By RunButton                                               = By.xpath("//a[text()='Run']");
	public static By FilterDropDown                                          = By.xpath("//select[@id='filterId']");
	public static By FirstActionButton                                       = By.xpath("//a[text()='Actions']");
	public static By ProductValueInActionHyperLink                           = By.xpath("//div[@id='actionOptions']/div[2]");
	public static By TableOfProductHyperLink                                 = By.xpath("//div[@id='secondaryActionOptions']");
	public static By PlaceHolderType                                         = By.xpath("//td[contains(text(),'Type')]//following::td[1]");
	
	public static By TotalOverheadMarkUP_USD                                 = By.xpath("//td[@id='hbTotalOverheadAndMarkupUSD']");
	public static By TotalOverheadMarkUP                                     =By.xpath("//td[contains(text(),'Vendor Cost - Quote Currency:')]//following::td[6]");
	
	
	public static By addNewbomTab                                            = By.xpath("//a[text()='Add New BOM']");
	public static By bomtypeid                                               = By.id("bomTypeId");
	public static By initializebom                                           = By.xpath("//a[contains(text(),'Initialize BOM')]");
	public static By AddRowsButton                                           = By.xpath("//img[@id='menuImage1']");
	public static By BOMFactoryValue                                         = By.xpath("//a[text()='Factory:']");
	public static By BOMid                                                   = By.xpath("//select[@id='bomId']");
	public static By SpecificationInCostSheet                                = By.xpath("//select[@id='specReference']");
	public static By BOMInCostSheet                                          = By.xpath("//td[contains(text(),'Vendor Cost Details:')]//following::select[1]");
	public static By BOMInInternalCostSheet                                  = By.xpath("//td[contains(text(),'BOM')]//following::select[1]");
	public static By FactoryCodeInUpdateCostSheet                            = By.xpath("//a[text()='Factory Code:']");
	public static By WaveDropDownInSpecificaton                              = By.xpath("//td[contains(text(),'*Wave')]//following::select[1]");
	public static By BOMVendorCostSheet                                      = By.xpath("//td[contains(text(),'Vendor Cost Details:')]/following::select[1]");
	
	
	
	public static By ProductIdentification;
	public static By CostSheetSelection1;
	public static By InsertAfter;
	public static String productIdentification;
	public static String costSheetIdentification;
	public static String BOMId; 
	
   //WebElements Related to Test case Numbers 11,12 and 13
	public static By ProductLink                                             = By.linkText("Product");
	public static By ProductNumberSearch                                     = By.xpath("//td[contains(text(),'Product Number')]//following::input[1]");
	public static By SearchProductButton                                     = By.xpath("//a[text()='Search']");
	public static By SourcingDropDown                                        = By.xpath("//td[contains(text(),'Source')]//following::select[1]");
	public static By SourcingHyperLink                                       = By.xpath("//a[text()='Sourcing']");
	public static By RFQHyperLink                                            = By.xpath("//a[text()='RFQ']");
	public static By RFQPageActionDropDown                                   = By.xpath("//select[@id='prodseasonActions']");
	public static By AllCheckBox                                             = By.xpath("//input[@id='source_selectAllCheckBox']");
	public static By SelectButton                                            = By.xpath("//a[text()='Select']");
	public static By RFQColorway                                             = By.xpath("//td[contains(text(),'*Colorway')]//following::select[1]");
	public static By RFQWave                                                 = By.xpath("//td[contains(text(),'*Wave')]//following::select[1]");
	public static By RFQRequestDate                                          = By.xpath("//td[contains(text(),'*Request Date')]//following::input[1]");
	public static By RFQCutOffDate                                           = By.xpath("//td[contains(text(),'*Requested Response Cut-Off Date')]//following::input[1]");
	public static By RFQCreateButton                                         = By.xpath("//a[text()='Create']");
	public static By CreateButtonOfSourcing                                  = By.xpath("//div[@id='contentDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/a[1]");
	public static By ProductExpandImage                                      = By.xpath("//img[@id='r0_expandItemImage']");
	public static By UpdateRFQActionDropDown                                 = By.xpath("//b[contains(text(),'Actions:')]//following::select[1][contains(@id,'costingActions')]");
	public static By CreateCostSheetTemplateWindow                           = By.xpath("//div[@id='divContent']");
	public static By CloseButtonOfCreateCostSheetWindow                      = By.xpath("//div[@id='divHeader']/div/div[2]/div/table/tbody/tr/td[2]/img");
	public static By CostSheetTypeDropDown                                   = By.xpath("//td[contains(text(),'Options')]//preceding::select[1]");
	public static By ColorWayFirstValue                                      = By.xpath("//td[contains(text(),'Options')]//following::option[1]");
	public static By AddButton                                               = By.xpath("//a[text()='Add']");
	public static By CostSheetName                                           = By.xpath("//td[contains(text(),'Representative Colorway')]//following::input[2]");
	public static By WaveDropDown                                            = By.xpath("//td[contains(text(),'Representative Colorway')]//following::select[2]");
	public static By DomesticDropDown                                        = By.xpath("//td[contains(text(),'Representative Colorway')]//following::select[3]");
	public static By Currency                                                = By.xpath("//td[contains(text(),'Representative Colorway')]//following::select[4]");
	public static By SaveButton                                              = By.xpath("//form[@id='AJAXFORM']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/a");
	public static By CostSheetDoneButton                                     = By.xpath("//a[text()='Done']");
	public static By CostSheetHyperLink                                      = By.xpath("//td[contains(text(),'Ex-Factory Cost (SAP Base Price)')]//following::tr[1]/td[1]/a[1]");
	public static By ContentstableEditButton                                 = By.xpath("//td[contains(text(),'Contents Table:')]//following::a[1][text()='Edit']");
	public static By ProductColorWay                                         = By.xpath("//td[@id='r1_hbProductColorway']");
	public static By productColorWayHyperLink                                = By.xpath("//a[@id='ptc_verRef_1Link']");
	public static By ProductColorWay2                                        = By.xpath("//td[@id='r2_hbProductColorway']");
	public static By ProductNumberTextBox                                    = By.xpath("//td[contains(text(),'Product Number')]//following::input[1]");
	public static By SearchButton                                            = By.xpath("//a[text()='Search']");
	public static By ChooseColorWay                                          = By.xpath("//a[contains(text(),'(choose)')]");  
	public static By ProductVendorName                                       = By.xpath("//a[contains(text(),'Factory Region')]//following::td[5]");
	public static By WaveTable                                               = By.xpath("//td[@id='r1_hbWaveContentsTable']");
	public static By DropDownOfWaveTable                                     = By.xpath("//td[@id='r1_hbWaveContentsTable']/div/select[1]");
	public static By UnitRatioTable                                          = By.xpath("//td[@id='r1_hbUnitRatioContentsTable']");
	public static By UnitRatioTableTextBox                                   = By.xpath("//td[@id='r1_hbUnitRatioContentsTable']/div/input[1]");
	public static By ProductSource                                           = By.xpath("//td[@id='r1_hbProductSourceCostingMOA']");
	public static By ProductSourceDropDown                                   = By.xpath("//td[@id='r1_hbProductSourceCostingMOA']/div/select[1]");
	public static By WaveTable1                                              = By.xpath("//td[@id='r2_hbWaveContentsTable']");
	public static By DropDownOfWaveTable1                                    = By.xpath("//td[@id='r2_hbWaveContentsTable']/div/select[1]");
	public static By UnitRatioTable1                                         = By.xpath("//td[@id='r2_hbUnitRatioContentsTable']");
	public static By UnitRatioTableTextBox1                                  = By.xpath("//td[@id='r2_hbUnitRatioContentsTable']/div/input[1]");
	public static By ProductSource1                                          = By.xpath("//td[@id='r2_hbProductSourceCostingMOA']");
	public static By ProductSourceDropDown1                                  = By.xpath("//td[@id='r2_hbProductSourceCostingMOA']/div/select[1]");
	public static By ContentTableValue                                       = By.xpath("//a[contains(text(),'Last Modified Date')]//following::a[1]");
	public static By ContentTableValue2                                      = By.xpath("//a[contains(text(),'Last Modified Date')]//following::a[2]");
	public static By CurrencyType                                            = By.xpath("//td[@id='hBCurrency']");
	public static By CurrencyConversionRate                                  = By.xpath("//td[@id='hbCurrencyConversionRate']");
	public static By CostSheetCreateConfirmationTable                        = By.xpath("//div[@id='divContent']/table/tbody/tr/td");
	public static By SortOption                                              = By.xpath("//a[contains(text(),'Hide/Show columns')]//following::a[1]");
	public static By SortTable                                               = By.xpath("//div[@id='null']");
	public static By FirstSortDropDown                                       = By.xpath("//td[contains(text(),'Sort By')]/select[1]");
	public static By SecondSortDropDown                                      = By.xpath("//td[contains(text(),'Sort By')]//following::select[contains(@id,'firstSortByOrder')]");
	public static By SortButton                                              = By.xpath("//a[@id='multiSortButton']");
	public static By CostSheetSelection                                      = By.xpath("//a[text()='Sort Options']//following::div[13]/table[1]/tbody/tr[2]/td[2]/a[1]");
	public static By CostSheetUpdateButton                                   = By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select");
	public static By FactoryCodeHyperLink                                    = By.xpath("//td[contains(text(),'BOM Roll Up Date')]//following::a[1]");
	public static By NameTextBox                                             = By.xpath("//td[contains(text(),'Name')]//following::input[1]");
	public static By UpdateCostSheetSaveButton                               = By.xpath("//td[contains(text(),'Update Product Cost Sheet')]//following::a[1]");
	public static By UpdateCostSheetCancelButton                             = By.xpath("//td[contains(text(),'Update Product Cost Sheet')]//following::a[2]");
	public static By TypeValue                                               = By.xpath("//div[@id='null']/div/div[2]/table/tbody/tr/td/table/tbody/tr[1]/td[4]");
	public static By ProductTypeValue                                        = By.xpath("//td[@id='hBProductType']");
	public static By WaveValue                                               = By.xpath("//td[@id='hbWave']");
	public static By DomesticOrDIValue                                       = By.xpath("//td[@id='hbDomesticDirectImport']");
	public static By CostSheetStatusValue                                    = By.xpath("//td[@id='hbStatus']");
	public static By ColorwayValue                                           = By.xpath("//div[@id='null']/div/div[2]/table/tbody/tr/td/table/tbody/tr/td[1]/table/tbody/tr[1]/td[2]");
	public static By RepresentativeColorWay                                  = By.xpath("//div[@id='null']/div/div[2]/table/tbody/tr/td/table/tbody/tr/td[1]/table/tbody/tr[2]/td[2]");
	public static By ForecastQtyValue                                        = By.xpath("//td[@id='hbForecastQtyK']");
	public static By HFEFOBValue                                             = By.xpath("//td[@id='hbHFEFOBCostFreightPC']");
	public static By FCLYTFreightPCvalue                                     = By.xpath("//td[@id='hbFCLYTFreightPC']");
	public static By LCLYTFreightPC                                          = By.xpath("//td[@id='hbLCLYTFreightPC']");
	public static By FCLHKFreightPC                                          = By.xpath("//td[@id='hbFCLHKFreightPC']"); 
	public static By LCLHKFreightPC                                          = By.xpath("//td[@id='hbLCLHKFreightPC']");
	public static By ApproximateVolume                                       = By.xpath("//td[@id='r0_approxVolume']");
	public static By ApproximateVolumeInputTextBox                           = By.xpath("//td[@id='r0_approxVolume']/div/input");
	public static By CostSheetTemplateListValue                              = By.xpath("//td[contains(text(),'Cost Sheet Template List')]//following::a[3]");
	public static By WhatIfCostSheetListTab                                  = By.xpath("//li[@id='firstTab']/a");
	public static By WhatIfCostSheetDetailsTab                               = By.xpath("//li[@id='firstTab']/a//following::li[1]");                               
	//Webelements realted to Test Case Numer 13
	
	public static By ClickAgainProduct                                       = By.xpath("//td[@id='contextBar']/table/tbody/tr/td[1]/a[2]");
	public static By CostingHyperLink                                        = By.xpath("//a[text()='Costing']");
	public static By CostingActionDropDown                                   = By.xpath("//select[@id='costingActions']");
	public static By CostSheetType                                           = By.xpath("//td[contains(text(),'Type')]//following::td[1]");
	public static By CostSheetWave                                           = By.xpath("//td[contains(text(),'Wave')]//following::select[1]");
	public static By CostSheetDomesticOrDIDropDown                           = By.xpath("//td[contains(text(),'*Domestic / DI')]//following::select[1]");
	public static By CostSheetCurrencyDropDown                               = By.xpath("//td[contains(text(),'*Quote Currency')]//following::select[1]");
	public static By CostSheetComments                                       = By.xpath("//td[contains(text(),'Comments')]//following::textarea[1]");
	public static By ColorWayFirstOption                                     = By.xpath("//select[@id='colorwayGroupOptions']/option[1]");
	public static By ColorwayAddButton                                       = By.xpath("//td[contains(text(),'Options')]//a[1]");
	public static By ProductDevelopmentCost                                  = By.xpath("//td[contains(text(),'Product Development Cost')]//following::input[1]");
	public static By MasterCartonPackagingMaterial                           = By.xpath("//td[contains(text(),'Master Carton Packaging Material')]//following::input[1]");
	public static By MasterCortonLaborCost                                   = By.xpath("//td[contains(text(),'Master Carton Labor Cost')]//following::input[1]");
	public static By MisCellaneousCost                                       = By.xpath("//td[contains(text(),'Miscellaneous Cost')]//following::input[1]");
	public static By ProductMarkUp                                           = By.xpath("//td[contains(text(),'Product Markup')]//following::input[1]");
	public static By Discount                                                = By.xpath("//td[contains(text(),'Discount')]//following::input[1]");
	public static By Length                                                  = By.xpath("//td[contains(text(),'Length')]//following::input[1]");
	public static By Width                                                   = By.xpath("//td[contains(text(),'Width')]//following::input[1]");
	public static By Height                                                  = By.xpath("//td[contains(text(),'Height')]//following::input[1]");
	public static By FOBHongKongByFCL                                        = By.xpath("//td[contains(text(),'FOB Hong Kong by FCL')]//following::input[1]");
	public static By FOBHongKongByLCL                                        = By.xpath("//td[contains(text(),'FOB Hong Kong by LCL')]//following::input[1]");
	public static By FOBChinaByFCL                                           = By.xpath("//td[contains(text(),'FOB China by FCL')]//following::input[1]");
	public static By FOBChinaByLCL                                           = By.xpath("//td[contains(text(),'FOB China by LCL')]//following::input[1]");
	public static By FOBOthersByFCL                                          = By.xpath("//td[contains(text(),'FOB Others by FCL')]//following::input[1]");
	public static By FOBOthersByLCL                                          = By.xpath("//td[contains(text(),'FOB Others by LCL')]//following::input[1]");
	public static By WhatIfCostSheetSaveButton                               = By.xpath("//div[@id='contentDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/a[1]");
	public static By CountryOfOriginValue                                    = By.xpath("//td[contains(text(),'Country of Origin')]//following::a[1]");
	public static By CostSheetSequenceNumberValue                            = By.xpath("//td[contains(text(),'Cost Sheet Sequence Number')]//following::td[1]");
	public static By MasterCartonPackagingMaterialUSDValue                   = By.xpath("//td[@id='hbMasterCartonPackagingMaterialUSD']");
	public static By MasterCartonLaborCostUSD                                = By.xpath("//td[@id='hbMasterCartonLaborCostUSD']");
	public static By MiscelleneousMaterialValue                              = By.xpath("//td[@id='hbMiscellaneousMaterialUSD']");
	public static By DiscountValue                                           = By.xpath("//td[@id='hbDiscountUSDConversion']");
	public static By ProductMarkUpValue                                      = By.xpath("//td[@id='hbProductMarkupUSD']");
	public static By VendorCostQuoteCurrencyxFacotoryCost                    = By.xpath("//td[contains(text(),'Vendor Cost - Quote Currency:')]//following::td[1][contains(text(),'Ex-Factory Cost (SAP Base Price)')]//following::td[1]");
	public static By VendorCostCurrencyxFacotoryCostUSD                      = By.xpath("//td[contains(text(),'Vendor Cost Summary - USD Conversion:')]//following::td[1][contains(text(),'Ex-Factory Cost (SAP Base Price)')]//following::td[1]");
	public static By ExFactoryCostUSDInCostingUser                           = By.xpath("//td[contains(text(),'Ex-Factory Cost (SAP Base Price) (USD)')]//following::td[1]");
	public static By ContentTableEditButton                                  = By.xpath("//td[contains(text(),'Contents Table:')]//following::a[1]");
	public static By ColorWayDropDown                                        = By.xpath("//td[contains(text(),'Colorway Name')]//following::select[1]");
	public static By CostSheetDropDown                                       = By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select");
	public static By ProductSelectionAgainForOtherUser                       = By.xpath("//td[@id='contextBar']/table/tbody/tr/td[1]/a[1]");
	public static By WhatIfCostSheetCheckBox                                 = By.xpath("//input[@id='includeWhatIfBoxbox']");
	public static By WhatIfRunButton                                         = By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[3]/a");
	public static By WhatIfCostSheetSelection                                = By.xpath("//td[contains(text(),'002 : FUNSKOOL')]//following::tr[1]/td[2]/a[1]");
	public static By WhatIfCostSheetSelectionCostingUser                     = By.xpath("//a[contains(text(),'Sourcing Configuration')]//following::td[4]/a[1]"); 
	public static By ImageIconOfCostSheet                                    = By.xpath("//a[contains(text(),'Sourcing Configuration')]//following::td[3]/img[1]");
	public static By TableOfImageIconCostSheet                               = By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table/tbody/tr/td");
	public static By WhatIfForecastQty                                       = By.xpath("//td[@id='hbForecastQtyK']");
	public static By WhatIfTotalCost                                         = By.xpath("//td[@id='hBTargetCost']");
	public static By RetailItemWave                                          = By.xpath("//td[contains(text(),'Representative Colorway')]//following::select[3]");    
	public static By RetailItemCurrecy                                       = By.xpath("//td[contains(text(),'Representative Colorway')]//following::select[2]");   
	public static By VendorRequestDropDown                                   = By.xpath("//select[@id='rfqRequestActionOptions']");
	public static By VendorRequestPopUp                                      = By.xpath("//div[@id='divContent']/p/font");
	public static By RequestTab                                              = By.xpath("//li[@id='firstTab']/a");
	public static By RequestStatus                                           = By.xpath("//a[text()='Sort Options']//following::div[13]/table[1]/tbody/tr[2]/td[9]");
	public static By RequestStatusInRFQSCreen                                = By.xpath("//td[contains(text(),'Request Status')]//following::td[1]");
	public static By CreateCostSheetsFromTemplate                            = By.xpath("//a[text()='Create Cost Sheets From Templates']");
	public static By WhatIfIdentification                                    = By.xpath("//td[contains(text(),'Cost Sheet List')]//following::a[2]");
	public static By WhatIfUdentificationOfAssortmentOrSolid                 = By.xpath("//td[contains(text(),'Cost Sheet List')]//following::a[3]");
	public static By WhaIfCostSheetTab                                       = By.xpath("//li[@id='firstTab']/a//following::li[1]");
	public static By WhatIfNameAttribute                                     = By.xpath("//div[@id='costSheetResults']/table/tbody/tr[2]/td/div/div[2]/div[1]/table/tbody/tr/td[2]//following::td[1]/table/tbody/tr[1]/td[2]");
	public static By WhatIfTypeAttribute                                     = By.xpath("//div[@id='costSheetResults']/table/tbody/tr[2]/td/div/div[2]/div[1]/table/tbody/tr/td[2]//following::td[1]/table/tbody/tr[1]/td[4]");
	public static By WhatIfProductNameAttribute                              = By.xpath("//td[contains(text(),'General Attributes:')]//following::td[2]");
	public static By WhatIfQuoteCurrency                                     = By.xpath("//td[contains(text(),'Vendor Cost Details')]//following::td[4]");
	public static By WhatIfCurrencyConversionRate                            = By.xpath("//td[contains(text(),'Vendor Cost Details')]//following::td[8]");
	public static By WhatIfCostSheetStatus                                   = By.xpath("//td[contains(text(),'Vendor Cost Sheet Status')]//following::td[2]");
	public static By WhatIfColorWay                                          = By.xpath("//td[contains(text(),'Cost Sheet Variations')]//following::td[4]");
	public static By WhatIfColorwayRepresentation                            = By.xpath("//td[contains(text(),'Cost Sheet Variations')]//following::td[6]");      
	public static By TableOfCostSheets                                       = By.xpath("//a[contains(text(),'Sort Options')]//following::table[4]");
	public static By CostSheetCreatedFromTemplate                            = By.xpath("//td[contains(text(),'Cost Sheet List')]//following::a[3]");
	public static By SubmitQuoteRequestDropDown                              = By.xpath("//td[contains(text(),'Quote Status')]//preceding::select[1]");
	public static By ViewReferenceNumber                                     = By.xpath("//td[contains(text(),'Vendor Reference Number')]");          
	public static By Ast_SolidWeightedAverage_USD                            = By.xpath("//td[@id='hbAstSolidWeightedAverageUSD']");
	public static By ApproveDropDownSource                                   = By.xpath("//td[contains(text(),'*Sourcing Status')]//following::select[1]");
	public static By SortButtonForRFQ                                        = By.xpath("//a[text()='Sort Options']");                                             
	public static By RFQinAdminServer                                        = By.xpath("//a[text()='Created On']//following::a[2]");
	
	
    public static By CostingType;
	public static By ColorWayType;
	public static By VendorCheckBox;
    static String vendorCheckBox;
    static int RowValue;
	
	
	//WebElements Related to TC_15
	
	public static By CloseCostSheet                                          = By.xpath("//li[@id='firstTab']//following::img[1]");
	public static By PlasticMaterialTextBox                                  = By.xpath("//td[contains(text(),'Plastic Material')]//following::input[1]");
	public static By PackagingMaterialTextBox                                = By.xpath("//td[contains(text(),'Packaging Material')]//following::input[1]");
	public static By ChemicalMaterialTextBox                                 = By.xpath("//td[contains(text(),'Chemical Material')]//following::input[1]");
	public static By PurchasedMaterialTextBox                                = By.xpath("//td[contains(text(),'Purchased Material')]//following::input[1]");
	public static By ElectronicMaterialTextBox                               = By.xpath("//td[contains(text(),'Electronic Material')]//following::input[1]");
	public static By SoftGoodMaterialTextBox                                 = By.xpath("//td[contains(text(),'Soft Goods Material')]//following::input[1]");
	public static By GeneralDecoLaborTextBox                                 = By.xpath("//td[contains(text(),'General / Deco Labor Cost')]//following::input[1]");
	public static By MoldinglaborCostTextBox                                 = By.xpath("//td[contains(text(),'Molding Labor Cost')]//following::input[1]");
	public static By OverheadAndMarkUpTextBox                                = By.xpath("//td[contains(text(),'Overhead & Markup')]//following::input[1]");
	public static By ContentMarkUpTextBox                                    = By.xpath("//td[contains(text(),'Markup')]//following::input[1]");
	public static By RetailItemCostTextBox                                   = By.xpath("//td[contains(text(),'Retail Item Cost')]//following::input[1]");
	public static By CostSheetRecentValue                                    = By.xpath("//a[contains(text(),'Sourcing Configuration')]//following::tr[3]/td[2]/a[1]");
	public static By RetailItemCostSheetQuoteCurrecny                        = By.xpath("//td[contains(text(),'Retail Item Cost - Quote Currency:')]//following::input[1]");
	
	
	
	public static By RetailItemValue                                         = By.xpath("//td[contains(text(),'Retail Item Cost (USD)')]//following::td[1]");
	public static By PlasticMaterialvalue                                    = By.xpath("//td[contains(text(),'Plastic Material (USD)')]//following::td[1]");
	public static By PackagingMaterialValue                                  = By.xpath("//td[contains(text(),'Packaging Material (USD)')]//following::td[1]");
	public static By ChemicalMaterialValue                                   = By.xpath("//td[contains(text(),'Chemical Material (USD)')]//following::td[1]");
	public static By PurchasedMaterialvalue                                  = By.xpath("//td[contains(text(),'Purchased Material (USD)')]//following::td[1]");
	public static By ElectronicMaterialValue                                 = By.xpath("//td[contains(text(),'Electronic Material (USD)')]//following::td[1]");
	public static By SoftGoodMaterialValue                                   = By.xpath("//td[contains(text(),'Soft Goods Material(USD)')]//following::td[1]");
	public static By GeneralDecoLaborValue                                   = By.xpath("//td[contains(text(),'General / Deco Labor Cost (USD)')]//following::td[1]");
	public static By MoldinglaborCostValue                                   = By.xpath("//td[contains(text(),'Molding Labor Cost (USD)')]//following::td[1]");
	public static By OverheadAndMarkUpValue                                  = By.xpath("//td[contains(text(),'Overhead & Markup (USD)')]//following::td[1]");
    public static By OverheadTypeEditButton                                  = By.xpath("//a[contains(text(),'Overhead Type')]//preceding::a[2]");
    
    public static By OverHeadTypeTable                                       = By.xpath("//td[@id='r1_hbOverheadType']");
    public static By OverHeadTypeDropDown                                    = By.xpath("//div[@id='hbOverheadTypeSourceDiv']/select[1]");
    public static By OverHeadCostTable                                       = By.xpath("//td[@id='r1_hbOverheadCost']");
    public static By OverHeadCostTextBox                                     = By.xpath("//td[@id='r1_hbOverheadCost']/div/input[1]");
    
    
    //WebElements Related to TC_16
    public static By SubmitQuoteForReviewDropDown                            = By.xpath("//td[contains(text(),'Quote Status')]//preceding::select[1]");
    public static By ErrorMessageBeforeAddingRetailItem                      = By.xpath("//div[@id='divContent']/table/tbody/tr/td");
	public static By AddRowsButtonInRetailItemColorway                       = By.xpath("//img[@id='menuImage1']");
	public static By RetailItemColorWayTable                                 = By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table/tbody/tr/td");
	public static By CreatedCostSheet                                        = By.xpath("//td[contains(text(),'Cost Sheet List')]/following::a[3]");          
	public static By CostSheetSpecificationDropDown                          = By.xpath("//select[@id='specReference']"); 
	public static By BOMDropDownInCostSheet                                  = By.xpath("//td[contains(text(),'BOM')]//following::select[1]");
	public static By SaveButtonOfCostSheet                                   = By.xpath("//a[text()='Save']");                  
	public static By RFQSelection                                            = By.xpath("//td[contains(text(),'RFQ')]//following::a[1]");
	public static By ExpandRFQButton                                         = By.xpath("//td[contains(text(),'Product Comments')]//following::img[1]");
	public static By PrimaryCostSheetCheckBox                                = By.xpath("//td[contains(text(),'Primary Cost Sheet')]//following::input[2]");
	public static By SelectTheCostSheet                                      = By.xpath("//a[contains(text(),'Colorways')]//following::td[3]/a[1]");
	public static By CostSheetIdentification                                 = By.xpath("//a[contains(text(),'Cost Sheet List')]//following::a[1]");
	public static By CostSheetRow                                            = By.xpath("//a[contains(text(),'Sort Options')]//following::tr[8]"); 
	
	//Content table values
	public static By ContentTableProductColorWay                             = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[10]/a[1]");
	public static By ContentTableProductName                                 = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[11]");
	public static By ContentTableWave                                        = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[12]");
	public static By ContentTableProductType                                 = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[13]");
	public static By ContentTableUnitRatio                                   = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[14]");
	public static By ContentTableProductSource                               = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[15]");
	public static By ContentTableCostSheetName                               = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[16]");
	public static By ContentTableCostSheetStatus                             = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[17]");
	public static By ContentTableLastModifiedBy                              = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[18]");
	public static By ContentTableLastModifiedDate                            = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[19]");
	public static By ContentTableProductColorWay1                            = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[20]/a[1]");
	public static By ContentTableProductName1                                = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[21]");
	public static By ContentTableWave1                                       = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[22]");
	public static By ContentTableProductType1                                = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[23]");
	public static By ContentTableUnitRatio1                                  = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[24]");
	public static By ContentTableProductSource1                              = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[25]");
	public static By ContentTableCostSheetName1                              = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[26]");
	public static By ContentTableCostSheetStatus1                            = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[27]");
	public static By ContentTableLastModifiedBy1                             = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[28]");
	public static By ContentTableLastModifiedDate1                           = By.xpath("//a[contains(text(),'Product Colorway')]//following::td[29]");
	
	
	//Vendor Table Values
	public static By VendorCostTableProductColorWay                          = By.xpath("//a[contains(text(),'Product Cost Total (USD)')]//following::td[1]/a[1]");
	public static By VendorTaleCostSheetName                                 = By.xpath("//a[contains(text(),'Product Cost Total (USD)')]//following::td[2]");
	public static By VendorTableProductOriginalQuoteCurrency                 = By.xpath("//a[contains(text(),'Product Cost Total (USD)')]//following::td[3]");
	public static By VendorTableProductCostTotal                             = By.xpath("//a[contains(text(),'Product Cost Total (USD)')]//following::td[4]");
	public static By VendorTableProductCostTotalUSD                          = By.xpath("//a[contains(text(),'Product Cost Total (USD)')]//following::td[5]");
	public static By VendorCostTableProductColorWay1                         = By.xpath("//a[contains(text(),'Product Cost Total (USD)')]//following::td[6]/a[1]");
	public static By VendorTaleCostSheetName1                                = By.xpath("//a[contains(text(),'Product Cost Total (USD)')]//following::td[7]");
	public static By VendorTableProductOriginalQuoteCurrency1                = By.xpath("//a[contains(text(),'Product Cost Total (USD)')]//following::td[8]");
	public static By VendorTableProductCostTotal1                            = By.xpath("//a[contains(text(),'Product Cost Total (USD)')]//following::td[9]");
	public static By VendorTableProductCostTotalUSD1                         = By.xpath("//a[contains(text(),'Product Cost Total (USD)')]//following::td[10]");
	
	
	
	public static By CasePackQuantity                                        = By.xpath("//td[@id='hbCasePackQuantity']");
	
	
	
	
	public static By CostSheetCompareTab                                     = By.xpath("//a[text()='Cost Sheet Compare']");
	public static By CostSheetNumber                                         = By.xpath("//td[contains(text(),'Cost Sheet Sequence Number')]//following::td[2]");
	public static By QuoteSubmission                                         = By.xpath("//td[@id='responseStatus']");
	
	public static By ActionDropDownOfSpecicationTab                          = By.xpath("//select[@id='prodseasonActions']");
	public static By RelationShipType                                        = By.xpath("//select[@id='copyModedata']");    
	public static By ColorwayCheckBox                                        = By.xpath("//div[@id='colorwayOptionsdiv_plus']/input");      
	public static By CostSheetTemplateInAdminUser                            = By.xpath("//div[@id='rfqResults']/table/tbody/tr[8]/td/div/div[2]/div[1]/table/tbody/tr/td[2]//following::a[3]");
	
	public static String ContentTableProductColorWayValue;
	public static String ContentTableProductNameValue;
	public static String ContentTableWaveValue;
	public static String ContentTableProductTypeValue;
	public static String ContentTableUnitRatioValue;
	public static String ContentTableProductSourceValue;
	public static String ContentTableCostSheetNameValue;
	public static String ContentTableCostSheetStatusValue;
	public static String ContentTableLastModifiedByValue;
	public static String ContentTableLastModifiedDateValue;
	public static String VendorCostTableProductColorWayValue;
	public static String VendorTaleCostSheetNameValue;
	public static String VendorTableProductOriginalQuoteCurrencyValue;
	public static String VendorTableProductCostTotalValue;
	public static String VendorTableProductCostTotalUSDValue;
	
	
	
	
	//WebElements Related to TC_17
	public static By CostSheetListsDropDown                                  = By.xpath("//select[@id='firstCostSheet']");
	public static By ShowWhatIfCostSheetCheckBox                             = By.xpath("//input[@id='whatifbox']");
	
	
	public static By SeasonValue_FirstCostSheet                              = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Season')]//following::td[1]");
	public static By SeasonValue_SecondCostSheet                             = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Season')]//following::td[2]");
	public static By SourceValue_FirstCostSheet                              = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Source')]//following::td[1]");
	public static By SourceValue_SecondCostSheet                             = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Source')]//following::td[2]");
	public static By RFQ_FirstCostSheet                                      = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'RFQ')]//following::td[1]");
	public static By RFQ_SecondCostSheet                                     = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'RFQ')]//following::td[2]");
	public static By Quote_FirstCostSheet                                    = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Quote']//following::td[1]");
	public static By Quote_SecondCostSheet                                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Quote']//following::td[2]");
	public static By QuoteVendor_FirstCostSheet                              = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Quote Vendor']//following::td[1]");
	public static By QuoteVendor_SecondCostSheet                             = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Quote Vendor']//following::td[2]");
	public static By Specification_FirstCostSheet                            = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Specification')]//following::td[1]");
	public static By Specification_SecondCostSheet                           = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Specification')]//following::td[1]");
	public static By ProductColorway_FirstCostSheet                          = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Product/Colorway')]//following::td[1]");
	public static By ProductColorway_SecondCostSheet                         = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Product/Colorway')]//following::td[2]");
	public static By Type_FirstCostSheet                                     = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Type']//following::td[1]");
	public static By Type_SecondCostSheet                                    = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Type']//following::td[2]");
	public static By WhatIf_FirstCostSheet                                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='What If']//following::td[1]");
	public static By WhatIf_SecondCostSheet                                  = By.xpath("//a[contains(text(),'Details')]//following::td[text()='What If']//following::td[2]");
	public static By Colorways_FirstCostSheet                                = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Colorways']//following::td[1]");
	public static By Colorways_SecondCostSheet                               = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Colorways']//following::td[2]");
	public static By PrimaryCostSheet_FirstCostSheet                         = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Primary Cost Sheet']//following::td[1]");
	public static By PrimaryCostSheet_SecondCostSheet                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Primary Cost Sheet']//following::td[2]");
	public static By ProductType_FirstCostSheet                              = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Product Type']//following::td[1]");
	public static By ProductType_SecondCostSheet                             = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Product Type']//following::td[2]");
	public static By CostSheetSequenceNumber_FirstCostSheet                  = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Cost Sheet Sequence Number']//following::td[1]");
	public static By CostSheetSequenceNumber_SecondCostSheet                 = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Cost Sheet Sequence Number']//following::td[2]");
	public static By Wave_FirstCostSheet                                     = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Wave']//following::td[1]");
	public static By Wave_SecondCostSheet                                    = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Wave']//following::td[2]");
	public static By DomesticOrDI_FirstCostSheet                             = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Domestic / DI']//following::td[1]");
	public static By DomesticOrDI_SecondCostSheet                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Domestic / DI']//following::td[2]");
	public static By CostSheetStaus_FirstCostSheet                           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Cost Sheet Status']//following::td[1]");
	public static By CostSheetStaus_SecondCostSheet                          = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Cost Sheet Status']//following::td[2]");
	public static By QuoteCurrency_FirstCostSheet                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Quote Currency']//following::td[1]");
	public static By QuoteCurrency_SecondCostSheet                           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Quote Currency']//following::td[2]");
	public static By BOM_FirstCostSheet                                      = By.xpath("//a[contains(text(),'Details')]//following::td[text()='BOM']//following::td[1]");
	public static By BOM_SecondCostSheet                                     = By.xpath("//a[contains(text(),'Details')]//following::td[text()='BOM']//following::td[2]");
	public static By CurrencyConversionRate_FirstCostSheet                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Currency Conversion Rate']//following::td[1]");
	public static By CurrencyConversionRate_SecondCostSheet                  = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Currency Conversion Rate']//following::td[2]");
	public static By BOMIteration_FirstCostSheet                             = By.xpath("//a[contains(text(),'Details')]//following::td[text()='BOM Iteration']//following::td[1]");
	public static By BOMIteration_SecondCostSheet                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='BOM Iteration']//following::td[2]");
	public static By CountryOfOrigin_FirstCostSheet                          = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Country of Origin']//following::td[1]");          
	public static By CountryOfOrigin_SecondCostSheet                         = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Country of Origin']//following::td[2]"); 
	public static By BOMRollUPDate_FirstCostSheet                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='BOM Roll Up Date']//following::td[1]");
	public static By BOMRollUPDate_SecondCostSheet                           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='BOM Roll Up Date']//following::td[2]");
	public static By TargetCost_FirstCostSheet                               = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Target Cost (USD)']//following::td[1]");
	public static By TargetCost_SecondCostSheet                              = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Target Cost (USD)']//following::td[2]");
	public static By Comments_FirstCostSheet                                 = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Comments']//following::td[1]");
	public static By Comments_SecondCostSheet                                = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Comments']//following::td[2]");
	public static By CasePackQuantity_FirstCostSheet                         = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Case Pack Quantity']//following::td[1]");
	public static By CasePackQuantity_SecondCostSheet                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Case Pack Quantity']//following::td[2]");
	public static By AstOrSolidWeightedAverage_FirstCostSheet                = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ast/Solid Weighted Average']//following::td[1]");
	public static By AstOrSolidWeightedAverage_SecondCostSheet               = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ast/Solid Weighted Average']//following::td[2]");
	public static By AstOrSolidWeightedAverage_FirstCostSheet_USD            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ast/Solid Weighted Average (USD)']//following::td[1]");
	public static By AstOrSolidWeightedAverage_SecondCostSheet_USD           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ast/Solid Weighted Average (USD)']//following::td[2]");
	public static By TM_BP_SubTotal_FirstCostSheet                           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='TM/BP Sub-total']//following::td[1]");
	public static By TM_BP_SubTotal_SecondCostSheet                          = By.xpath("//a[contains(text(),'Details')]//following::td[text()='TM/BP Sub-total']//following::td[2]");
	public static By TM_BP_SubTotal_FirstCostSheet_USD                       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='TM/BP Sub-total (USD)']//following::td[1]");
	public static By TM_BP_SubTotal_SecondCostSheet_USD                      = By.xpath("//a[contains(text(),'Details')]//following::td[text()='TM/BP Sub-total (USD)']//following::td[2]");
	
	
	public static By EXFactoryCost_FirstCostSheet                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ex-Factory Cost (SAP Base Price)']//following::td[1]");
	public static By EXFactoryCost_SecondCostSheet                           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ex-Factory Cost (SAP Base Price)']//following::td[2]");
	public static By TotalMarKUp_FirstCostSheet                              = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Markup']//following::td[1]");
	public static By TotalMarKUp_SecondCostSheet                             = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Markup']//following::td[2]");
	public static By MasterCartonPackagingMaterial_FirstCostSheet            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Material']//following::td[1]");
	public static By MasterCartonPackagingMaterial_SecondCostSheet           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Material']//following::td[2]");
	public static By MasterCartonpackagingLaborCost_FirstCostSheet           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Labor Cost']//following::td[1]");        
	public static By MasterCartonpackagingLaborCost_SecondCostSheet          = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Labor Cost']//following::td[2]"); 
	public static By MiscellaneousMaterial_FirstCostSheet                    = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Miscellaneous Material']//following::td[1]");
	public static By MiscellaneousMaterial_SecondCostSheet                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Miscellaneous Material']//following::td[2]");
	public static By ProductMarkUp_FirstCostSheet                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Product Markup']//following::td[1]");
	public static By ProductMarkUp_SecondCostSheet                           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Product Markup']//following::td[2]");
	public static By TotalPlasticCost_FirstCostSheet                         = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Plastic Cost']//following::td[1]");
	public static By TotalPlasticCost_SecondCostSheet                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Plastic Cost']//following::td[2]");
	public static By TotalPackagingCost_FirstCostSheet                       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Packaging Cost']//following::td[1]");
	public static By TotalPackagingCost_SecondCostSheet                      = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Packaging Cost']//following::td[2]");
	public static By TotalChemicalCost_FirstCostSheet                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Chemical Cost']//following::td[1]");
	public static By TotalChemicalCost_SecondCostSheet                       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Chemical Cost']//following::td[2]");
	public static By TotalGeneralDecoLaborCost_FirstCostSheet                = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total General / Deco Labor Cost']//following::td[1]");
	public static By TotalGeneralDecoLaborCost_SecondCostSheet               = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total General / Deco Labor Cost']//following::td[2]");
	public static By TotalPurchasedCost_FirstCostSheet                       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Purchased Cost']//following::td[1]");
	public static By TotalPurchasedCost_SecondCostSheet                      = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Purchased Cost']//following::td[2]");
	public static By TotalMoldingLaborCost_FirstCostSheet                    = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Molding Labor Cost']//following::td[1]");
	public static By TotalMoldingLaborCost_SecondCostSheet                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Molding Labor Cost']//following::td[2]");
	public static By TotalSoftGoodsCost_FirstCostSheet                       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Soft Goods Cost']//following::td[1]");
	public static By TotalSoftGoodsCost_SecondCostSheet                      = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Soft Goods Cost']//following::td[2]");
	public static By ContentsMarkUp_FirstCostSheet                           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Contents Markup']//following::td[1]");
	public static By ContentsMarkUp_SecondCostSheet                          = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Contents Markup']//following::td[2]");
	public static By TotalElectronicCost_FirstCostSheet                      = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Electronic Cost']//following::td[1]");
	public static By TotalElectronicCost_SecondCostSheet                     = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Electronic Cost']//following::td[2]");
	
	public static By EXFactoryCost_FirstCostSheet_USD                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ex-Factory Cost (SAP Base Price) (USD)']//following::td[1]");
	public static By EXFactoryCost_SecondCostSheet_USD                       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ex-Factory Cost (SAP Base Price) (USD)']//following::td[2]");
	public static By TotalMarKUp_FirstCostSheet_USD                          = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Markup(USD)']//following::td[1]");
	public static By TotalMarKUp_SecondCostSheet_USD                         = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Markup(USD)']//following::td[2]");
	public static By MasterCartonPackagingMaterial_FirstCostSheet_USD        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Material(USD)']//following::td[1]");
	public static By MasterCartonPackagingMaterial_SecondCostSheet_USD       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Material(USD)']//following::td[2]");
	public static By MasterCartonpackagingLaborCost_FirstCostSheet_USD       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Labor Cost(USD)']//following::td[1]");        
	public static By MasterCartonpackagingLaborCost_SecondCostSheet_USD      = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Labor Cost(USD)']//following::td[2]"); 
	public static By MiscellaneousMaterial_FirstCostSheet_USD                = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Miscellaneous Material(USD)']//following::td[1]");
	public static By MiscellaneousMaterial_SecondCostSheet_USD               = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Miscellaneous Material(USD)']//following::td[2]");
	public static By ProductMarkUp_FirstCostSheet_USD                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Product Markup(USD)']//following::td[1]");
	public static By ProductMarkUp_SecondCostSheet_USD                       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Product Markup(USD)']//following::td[2]");
	public static By TotalPlasticCost_FirstCostSheet_USD                     = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Plastic Cost(USD)']//following::td[1]");
	public static By TotalPlasticCost_SecondCostSheet_USD                    = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Plastic Cost(USD)']//following::td[2]");
	public static By TotalPackagingCost_FirstCostSheet_USD                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Packaging Cost(USD)']//following::td[1]");
	public static By TotalPackagingCost_SecondCostSheet_USD                  = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Packaging Cost(USD)']//following::td[2]");
	public static By TotalChemicalCost_FirstCostSheet_USD                    = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Chemical Cost(USD)']//following::td[1]");
	public static By TotalChemicalCost_SecondCostSheet_USD                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Chemical Cost(USD)']//following::td[2]");
	public static By TotalGeneralDecoLaborCost_FirstCostSheet_USD            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total General / Deco Labor Cost (USD)']//following::td[1]");
	public static By TotalGeneralDecoLaborCost_SecondCostSheet_USD           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total General / Deco Labor Cost (USD)']//following::td[2]");
	public static By TotalPurchasedCost_FirstCostSheet_USD                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Purchased Cost(USD)']//following::td[1]");
	public static By TotalPurchasedCost_SecondCostSheet_USD                  = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Purchased Cost(USD)']//following::td[2]");
	public static By TotalMoldingLaborCost_FirstCostSheet_USD                = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Molding Labor Cost (USD)']//following::td[1]");
	public static By TotalMoldingLaborCost_SecondCostSheet_USD               = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Molding Labor Cost (USD)']//following::td[2]");
	public static By TotalSoftGoodsCost_FirstCostSheet_USD                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Soft Goods Cost(USD)']//following::td[1]");
	public static By TotalSoftGoodsCost_SecondCostSheet_USD                  = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Soft Goods Cost(USD)']//following::td[2]");
	public static By ContentsMarkUp_FirstCostSheet_USD                       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Contents Markup (USD)']//following::td[1]");
	public static By ContentsMarkUp_SecondCostSheet_USD                      = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Contents Markup (USD)']//following::td[2]");
	public static By TotalElectronicCost_FirstCostSheet_USD                  = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Electronic Cost(USD)']//following::td[1]");
	public static By TotalElectronicCost_SecondCostSheet_USD                 = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Electronic Cost(USD)']//following::td[2]");
	
	//AleryIcons On Cost Sheet
	
	public static By SeasonValue_AleryIcon                                   = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Season')]//following::td[2]//following::td[1]/img[1]");
	public static By SourceValue_AleryIcon                                   = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Source')]//following::td[2]//following::td[1]/img[1]");
	public static By RFQ_AleryIcon                                           = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'RFQ')]//following::td[2]//following::td[1]/img[1]");
	public static By Quote_AleryIcon                                         = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Quote']//following::td[2]//following::td[1]/img[1]");
	public static By QuoteVendor_AleryIcon                                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Quote Vendor']//following::td[2]//following::td[1]/img[1]");
	public static By Specification_AleryIcon                                 = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Specification')]//following::td[1]//following::td[1]/img[1]");
	public static By ProductColorway_AleryIcon                               = By.xpath("//a[contains(text(),'Details')]//following::td[contains(text(),'Product/Colorway')]//following::td[2]//following::td[1]/img[1]");
	public static By Type_AleryIcon                                          = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Type']//following::td[2]//following::td[1]/img[1]");
	public static By WhatIf_AleryIcon                                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='What If']//following::td[2]//following::td[1]/img[1]");
	public static By Colorways_AleryIcon                                     = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Colorways']//following::td[2]//following::td[1]/img[1]");
	public static By PrimaryCostSheet_AleryIcon                              = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Primary Cost Sheet']//following::td[2]//following::td[1]/img[1]");
	public static By ProductType_AleryIcon                                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Product Type']//following::td[2]//following::td[1]/img[1]");
	public static By CostSheetSequenceNumber_AleryIcon                       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Cost Sheet Sequence Number']//following::td[2]//following::td[1]/img[1]");		
	public static By Wave_AleryIcon                                          = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Wave']//following::td[2]//following::td[1]/img[1]");
	public static By DomesticOrDI_AleryIcon                                  = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Domestic / DI']//following::td[2]//following::td[1]/img[1]");
	public static By CostSheetStaus_AleryIcon                                = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Cost Sheet Status']//following::td[2]//following::td[1]/img[1]");
	public static By QuoteCurrency_AleryIcon                                 = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Quote Currency']//following::td[2]//following::td[1]/img[1]");
    public static By BOM_AleryIcon                                           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='BOM']//following::td[2]//following::td[1]/img[1]");	
	public static By CurrencyConversionRate_AleryIcon                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Currency Conversion Rate']//following::td[2]//following::td[1]/img[1]");	
	public static By BOMIteration_AleryIcon                                  = By.xpath("//a[contains(text(),'Details')]//following::td[text()='BOM Iteration']//following::td[2]//following::td[1]/img[1]");	
	public static By CountryOfOrigin_AleryIcon                               = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Country of Origin']//following::td[2]//following::td[1]/img[1]"); 
	public static By BOMRollUPDate_AleryIcon                                 = By.xpath("//a[contains(text(),'Details')]//following::td[text()='BOM Roll Up Date']//following::td[2]//following::td[1]/img[1]");	
	public static By TargetCost_AleryIcon                                    = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Target Cost']//following::td[2]//following::td[1]/img[1]");
	public static By Comments_AleryIcon                                      = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Comments']//following::td[2]//following::td[1]/img[1]");
	public static By CasePackQuantity_AleryIcon                              = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Case Pack Quantity']//following::td[2]//following::td[1]/img[1]");
	public static By AstOrSolidWeightedAverage_AleryIcon                     = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ast/Solid Weighted Average']//following::td[2]//following::td[1]/img[1]");
	public static By AstOrSolidWeightedAverage_USD_AleryIcon                 = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ast/Solid Weighted Average (USD)']//following::td[2]//following::td[1]/img[1]");
	public static By TM_BP_SubTotal_AleryIcon                                = By.xpath("//a[contains(text(),'Details')]//following::td[text()='TM/BP Sub-total']//following::td[2]//following::td[2]//following::td[1]/img[1]");
	public static By TM_BP_SubTotal_USD_AleryIcon                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='TM/BP Sub-total (USD)']//following::td[2]//following::td[2]//following::td[1]/img[1]");
	public static By EXFactoryCost_AleryIcon                                 = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ex-Factory Cost (SAP Base Price)']//following::td[2]//following::td[1]/img[1]");
	public static By TotalMarKUp_AleryIcon                                   = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Markup']//following::td[2]//following::td[1]/img[1]");
	public static By MasterCartonPackagingMaterial_AleryIcon                 = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Material']//following::td[2]//following::td[1]/img[1]");	
	public static By MasterCartonpackagingLaborCost_AleryIcon                = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Labor Cost']//following::td[2]//following::td[1]/img[1]"); 	
	public static By MiscellaneousMaterial_AleryIcon                         = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Miscellaneous Material']//following::td[2]//following::td[1]/img[1]");
	public static By ProductMarkUp_AleryIcon                                 = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Product Markup']//following::td[2]//following::td[1]/img[1]");
	public static By TotalPlasticCost_AleryIcon                              = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Plastic Cost']//following::td[2]//following::td[1]/img[1]");
	public static By TotalPackagingCost_AleryIcon                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Packaging Cost']//following::td[2]//following::td[1]/img[1]");	
    public static By TotalChemicalCost_AleryIcon                             = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Chemical Cost']//following::td[2]//following::td[1]/img[1]");	
	public static By TotalGeneralDecoLaborCost_AleryIcon                     = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total General / Deco Labor Cost']//following::td[2]//following::td[1]/img[1]");
	public static By TotalPurchasedCost_AleryIcon                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Purchased Cost']//following::td[2]//following::td[1]/img[1]");
	public static By TotalMoldingLaborCost_AlerIcon                          = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Molding Labor Cost']//following::td[2]//following::td[1]/img[1]");
	public static By TotalSoftGoodsCost_AleryIcon                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Soft Goods Cost']//following::td[2]//following::td[1]/img[1]");	
	public static By ContentsMarkUp_AleryIcon                                = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Contents Markup']//following::td[2]//following::td[1]/img[1]");	
	public static By TotalElectronicCost_AleryIcon                           = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Electronic Cost']//following::td[2]//following::td[1]/img[1]");
	public static By EXFactoryCost_USD_AleryIcon                             = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Ex-Factory Cost (SAP Base Price) (USD)']//following::td[2]//following::td[1]/img[1]");
    public static By TotalMarKUp_USD_AleryIcon                               = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Markup(USD)']//following::td[2]//following::td[1]/img[1]");
    public static By MasterCartonPackagingMaterial_USD_AleryIcon             = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Material(USD)']//following::td[2]//following::td[1]/img[1]");    
    public static By MasterCartonpackagingLaborCost_USD_AleryIcon            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Master Carton Packaging Labor Cost(USD)']//following::td[2]//following::td[1]/img[1]"); 
    public static By MiscellaneousMaterial_USD_AleryIcon                     = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Miscellaneous Material(USD)']//following::td[2]//following::td[1]/img[1]");	
    public static By ProductMarkUp_USD_AleryIcon                             = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Product Markup(USD)']//following::td[2]//following::td[1]/img[1]");	
    public static By TotalPlasticCost_USD_AleryIcon                          = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Plastic Cost(USD)']//following::td[2]//following::td[1]/img[1]");	
    public static By TotalPackagingCost_USD_AleryIcon                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Packaging Cost(USD)']//following::td[2]//following::td[1]/img[1]");    
    public static By TotalChemicalCost_USD_AleryIcon                         = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Chemical Cost(USD)']//following::td[2]//following::td[1]/img[1]");	
    public static By TotalGeneralDecoLaborCost_USD_AleryIcon                 = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total General / Deco Labor Cost (USD)']//following::td[2]//following::td[1]/img[1]");	
    public static By TotalPurchasedCost_USD_AleryIcon                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Purchased Cost(USD)']//following::td[2]//following::td[1]/img[1]");	
    public static By TotalMoldingLaborCost_USD_AleryIcon                     = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Molding Labor Cost (USD)']//following::td[2]//following::td[1]/img[1]");
    public static By TotalSoftGoodsCost_USD_AleryIcon                        = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Soft Goods Cost(USD)']//following::td[2]//following::td[1]/img[1]");	
    public static By ContentsMarkUp_USD_AleryIcon                            = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Contents Markup (USD)']//following::td[2]//following::td[1]/img[1]");	
    public static By TotalElectronicCost_USD_AleryIcon                       = By.xpath("//a[contains(text(),'Details')]//following::td[text()='Total Electronic Cost(USD)']//following::td[2]//following::td[1]/img[1]");	
	
    
    public static By MinusIconOfFirstColumn                                  = By.xpath("//a[text()='Hide/Show columns']//following::td[5]//following::img[1]");
	public static By MinusIconOfSecondColumn                                 = By.xpath("//a[text()='Hide/Show columns']//following::td[5]//following::img[2]");
	public static By MinusIconOfThirdColumn                                  = By.xpath("//a[text()='Hide/Show columns']//following::td[5]//following::img[3]");
	public static By MinusIconOfFourthColumn                                 = By.xpath("//a[text()='Hide/Show columns']//following::td[5]//following::img[4]");
	
	
	public static By FirstColumn                                             = By.xpath("//a[text()='Hide/Show columns']//following::td[6][contains(text(),'Name')]");
	public static By SecondColumn                                            = By.xpath("//a[text()='Hide/Show columns']//following::td[7]");
	public static By ThirdColumn                                             = By.xpath("//a[text()='Hide/Show columns']//following::td[8]");
	public static By FourthColumn                                            = By.xpath("//a[text()='Hide/Show columns']//following::td[9]");
	
	
	//TC_18 For Retail Item
	
	public static By ToolingCostQuoteCurrency_FirstCostSheet                 = By.xpath("//a[contains(text(),'Tooling Cost')]//following::td[text()='Tooling Cost (Quote Currency)']//following::td[1]");
	public static By ToolingCostQuoteCurrency_SecondCostSheet                = By.xpath("//a[contains(text(),'Tooling Cost')]//following::td[text()='Tooling Cost (Quote Currency)']//following::td[2]");
	public static By ToolingCost_USD_FirstCostSheet                          = By.xpath("//a[contains(text(),'Tooling Cost')]//following::td[text()='Tooling Cost (USD)']//following::td[1]");
	public static By ToolingCost_USD_SecondCostSheet                         = By.xpath("//a[contains(text(),'Tooling Cost')]//following::td[text()='Tooling Cost (USD)']//following::td[2]");
	public static By AssortmentOrSolidReference_FirstCostSheet               = By.xpath("//a[contains(text(),'Assortment / Solid Reference')]//following::td[text()='Ast./Solid Colorway']//following::td[1]");
	public static By AssortmentOrSolidReference_SecondCostSheet              = By.xpath("//a[contains(text(),'Assortment / Solid Reference')]//following::td[text()='Ast./Solid Colorway']//following::td[2]");
	public static By AstOrSolidWave_FirstCostSheet                           = By.xpath("//a[contains(text(),'Assortment / Solid Reference')]//following::td[text()='Ast./Solid Wave']//following::td[1]");                                     
	public static By AstOrSolidWave_SecondCostSheet                          = By.xpath("//a[contains(text(),'Assortment / Solid Reference')]//following::td[text()='Ast./Solid Wave']//following::td[2]"); 
	
	
	public static By RetailItemValue_FirstCostSheet_USD                      = By.xpath("//td[contains(text(),'Retail Item Cost (USD)')]//following::td[1]");
	public static By RetailItemValue_SecondCostSheet_USD                     = By.xpath("//td[contains(text(),'Retail Item Cost (USD)')]//following::td[2]");
	public static By PlasticMaterialvalue_FirstCostSheet_USD                 = By.xpath("//td[contains(text(),'Plastic Material (USD)')]//following::td[1]");
	public static By PlasticMaterialvalue_SecondCostSheet_USD                = By.xpath("//td[contains(text(),'Plastic Material (USD)')]//following::td[2]");
	public static By PackagingMaterialValue_FirstCostSheet_USD               = By.xpath("//td[contains(text(),'Packaging Material (USD)')]//following::td[1]");
	public static By PackagingMaterialValue_SecondCostSheet_USD              = By.xpath("//td[contains(text(),'Packaging Material (USD)')]//following::td[2]");
	public static By ChemicalMaterialValue_FirstCostSheet_USD                = By.xpath("//td[contains(text(),'Chemical Material (USD)')]//following::td[1]");
	public static By ChemicalMaterialValue_SecondCostSheet_USD               = By.xpath("//td[contains(text(),'Chemical Material (USD)')]//following::td[2]");
	public static By PurchasedMaterialvalue_FirstCostSheet_USD               = By.xpath("//td[contains(text(),'Purchased Material (USD)')]//following::td[1]");
	public static By PurchasedMaterialvalue_SecondCostSheet_USD              = By.xpath("//td[contains(text(),'Purchased Material (USD)')]//following::td[2]");
	public static By ElectronicMaterialValue_FirstCostSheet_USD              = By.xpath("//td[contains(text(),'Electronic Material (USD)')]//following::td[1]");
	public static By ElectronicMaterialValue_SecondCostSheet_USD             = By.xpath("//td[contains(text(),'Electronic Material (USD)')]//following::td[2]");
	public static By SoftGoodMaterialValue_FirstCostSheet_USD                = By.xpath("//td[contains(text(),'Soft Goods Material(USD)')]//following::td[1]");
	public static By SoftGoodMaterialValue_SecondCostSheet_USD               = By.xpath("//td[contains(text(),'Soft Goods Material(USD)')]//following::td[2]");
	public static By GeneralDecoLaborValue_FirstCostSheet_USD                = By.xpath("//td[contains(text(),'General / Deco Labor Cost (USD)')]//following::td[1]");
	public static By GeneralDecoLaborValue_SecondCostSheet_USD               = By.xpath("//td[contains(text(),'General / Deco Labor Cost (USD)')]//following::td[2]");
	public static By MoldinglaborCostValue_FirstCostSheet_USD                = By.xpath("//td[contains(text(),'Molding Labor Cost (USD)')]//following::td[1]");
	public static By MoldinglaborCostValue_SecondCostSheet_USD               = By.xpath("//td[contains(text(),'Molding Labor Cost (USD)')]//following::td[2]");
	public static By MarkUp_FirstCostSheet_USD                               = By.xpath("//td[contains(text(),'Markup(USD)')]//following::td[1]");
	public static By MarkUp_SecondCostSheet_USD                              = By.xpath("//td[contains(text(),'Markup(USD)')]//following::td[2]");
	
	public static By RetailItemValue_FirstCostSheet                          = By.xpath("//td[text()='Retail Item Cost']//following::td[1]");
	public static By RetailItemValue_SecondCostSheet                         = By.xpath("//td[text()='Retail Item Cost']//following::td[2]");
	public static By PlasticMaterialvalue_FirstCostSheet                     = By.xpath("//td[text()='Plastic Material']//following::td[1]");
	public static By PlasticMaterialvalue_SecondCostSheet                    = By.xpath("//td[text()='Plastic Material']//following::td[2]");
	public static By PackagingMaterialValue_FirstCostSheet                   = By.xpath("//td[text()='Packaging Material']//following::td[1]");
	public static By PackagingMaterialValue_SecondCostSheet                  = By.xpath("//td[text()='Packaging Material']//following::td[2]");
	public static By ChemicalMaterialValue_FirstCostSheet                    = By.xpath("//td[text()='Chemical Material']//following::td[1]");
	public static By ChemicalMaterialValue_SecondCostSheet                   = By.xpath("//td[text()='Chemical Material']//following::td[2]");
	public static By PurchasedMaterialvalue_FirstCostSheet                   = By.xpath("//td[text()='Purchased Material']//following::td[1]");
	public static By PurchasedMaterialvalue_SecondCostSheet                  = By.xpath("//td[text()='Purchased Material']//following::td[2]");
	public static By ElectronicMaterialValue_FirstCostSheet                  = By.xpath("//td[text()='Electronic Material']//following::td[1]");
	public static By ElectronicMaterialValue_SecondCostSheet                 = By.xpath("//td[text()='Electronic Material']//following::td[2]");
	public static By SoftGoodMaterialValue_FirstCostSheet                    = By.xpath("//td[text()='Soft Goods Material']//following::td[1]");
	public static By SoftGoodMaterialValue_SecondCostSheet                   = By.xpath("//td[text()='Soft Goods Material']//following::td[2]");
	public static By GeneralDecoLaborValue_FirstCostSheet                    = By.xpath("//td[text()='General / Deco Labor Cost']//following::td[1]");
	public static By GeneralDecoLaborValue_SecondCostSheet                   = By.xpath("//td[text()='General / Deco Labor Cost']//following::td[2]");
	public static By MoldinglaborCostValue_FirstCostSheet                    = By.xpath("//td[text()='Molding Labor Cost']//following::td[1]");
	public static By MoldinglaborCostValue_SecondCostSheet                   = By.xpath("//td[text()='Molding Labor Cost']//following::td[2]");
	public static By MarkUp_FirstCostSheet                                   = By.xpath("//td[text()='Markup']//following::td[1]");
	public static By MarkUp_SecondCostSheet                                  = By.xpath("//td[text()='Markup']//following::td[2]");
	
	public static By ToolingCostQuoteCurrency_AleryIcon                      = By.xpath("//a[contains(text(),'Tooling Cost')]//following::td[text()='Tooling Cost (Quote Currency)']//following::td[2]//following::td[1]/img[1]");
	public static By ToolingCost_USD_AleryIcon                               = By.xpath("//a[contains(text(),'Tooling Cost')]//following::td[text()='Tooling Cost (USD)']//following::td[2]//following::td[1]/img[1]");
	public static By AssortmentOrSolidReference_AleryIcon                    = By.xpath("//a[contains(text(),'Assortment / Solid Reference')]//following::td[text()='Ast./Solid Colorway']//following::td[2]//following::td[1]/img[1]");
	public static By AstOrSolidWave_AleryIcon                                = By.xpath("//a[contains(text(),'Assortment / Solid Reference')]//following::td[text()='Ast./Solid Wave']//following::td[2]//following::td[1]/img[1]"); 
	public static By RetailItemValue_AleryIcon_USD                           = By.xpath("//td[contains(text(),'Retail Item Cost (USD)')]//following::td[2]//following::td[1]/img[1]");
	public static By PlasticMaterialvalue_AleryIcon_USD                      = By.xpath("//td[contains(text(),'Plastic Material (USD)')]//following::td[2]//following::td[1]/img[1]");
	public static By PackagingMaterialValue_AleryIcon_USD                    = By.xpath("//td[contains(text(),'Packaging Material (USD)')]//following::td[2]//following::td[1]/img[1]");
	public static By ChemicalMaterialValue_AleryIcon_USD                     = By.xpath("//td[contains(text(),'Chemical Material (USD)')]//following::td[2]//following::td[1]/img[1]");
	public static By PurchasedMaterialvalue_AleryIcon_USD                    = By.xpath("//td[contains(text(),'Purchased Material (USD)')]//following::td[2]//following::td[1]/img[1]");
	public static By ElectronicMaterialValue_AleryIcon_USD                   = By.xpath("//td[contains(text(),'Electronic Material (USD)')]//following::td[2]//following::td[1]/img[1]");
	public static By SoftGoodMaterialValue_AleryIcon_USD                     = By.xpath("//td[contains(text(),'Soft Goods Material(USD)')]//following::td[2]//following::td[1]/img[1]");
	public static By GeneralDecoLaborValue_AleryIcon_USD                     = By.xpath("//td[contains(text(),'General / Deco Labor Cost (USD)')]//following::td[2]//following::td[1]/img[1]");
	public static By MoldinglaborCostValue_AleryIcon_USD                     = By.xpath("//td[contains(text(),'Molding Labor Cost (USD)')]//following::td[2]//following::td[1]/img[1]");
	public static By MarkUp_AleryIcon_USD                                    = By.xpath("//td[contains(text(),'Markup(USD)')]//following::td[2]//following::td[1]/img[1]");
	public static By RetailItemValue_AleryIcon                               = By.xpath("//td[text()='Retail Item Cost']//following::td[2]//following::td[1]/img[1]");
	public static By PlasticMaterialvalue_AleryIcon                          = By.xpath("//td[text()='Plastic Material']//following::td[2]//following::td[1]/img[1]");
	public static By PackagingMaterialValue_AleryIcon                        = By.xpath("//td[text()='Packaging Material']//following::td[2]//following::td[1]/img[1]");
	public static By ChemicalMaterialValue_AleryIcon                         = By.xpath("//td[text()='Chemical Material']//following::td[2]//following::td[1]/img[1]");
	public static By PurchasedMaterialvalue_AleryIcon                        = By.xpath("//td[text()='Purchased Material']//following::td[2]//following::td[1]/img[1]");
	public static By ElectronicMaterialValue_AleryIcon                       = By.xpath("//td[text()='Electronic Material']//following::td[2]//following::td[1]/img[1]");
	public static By SoftGoodMaterialValue_AleryIcon                         = By.xpath("//td[text()='Soft Goods Material']//following::td[2]//following::td[1]/img[1]");
	public static By GeneralDecoLaborValue_AleryIcon                         = By.xpath("//td[text()='General / Deco Labor Cost']//following::td[2]//following::td[1]/img[1]");
	public static By MoldinglaborCostValue_AleryIcon                         = By.xpath("//td[text()='Molding Labor Cost']//following::td[2]//following::td[1]/img[1]");
	public static By MarkUp_AleryIcon                                        = By.xpath("//td[text()='Markup']//following::td[2]//following::td[1]/img[1]");
	public static By ResponsibleEngineer                                     = By.xpath("//td[contains(text(),'Responsible Engineer')]//following::select[1]");
	public static By ResponsibleCostEngineer                                 = By.xpath("//td[contains(text(),'Responsible Cost Engineer')]//following::select[1]");
	public static By RFQUpdateDropDown                                       = By.xpath("//div[@id='rfqResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select");
	public static By RFQHyperLinkOnCostSheet                                 = By.xpath("//td[contains(text(),'RFQ')]//following::a[1]");
	public static By RFQActionDropDown                                       = By.xpath("//div[@id='contentDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select");
	public static By RFQSelectButton                                         = By.xpath("//div[@id='divContent']/table/tbody/tr[3]/td/a");
	
	//WebElements related to TC_19
	public static By CostSheetNameTextBox                                    = By.xpath("//td[contains(text(),'*Name')]//following::input[1]");
	public static By ColorwayNameTextBox                                     = By.xpath("//td[contains(text(),'Colorway Name')]//following::input[1]");
	public static By TypeOfProduct                                           = By.xpath("//td[contains(text(),'Product Type')]//following::td[1]");
	public static By TotalMarkUp                                             = By.xpath("//td[contains(text(),'Total Markup')]//following::td[1]");
	public static By TotalMarkUpUSD                                          = By.xpath("//td[@id='hbTotalMarkUpUSD']");
	public static By CostSheetIdentification1_Internal                       = By.xpath("//a[contains(text(),'Sourcing Configuration')]//following::a[10]");
	public static By CostSheetIdentification2_Internal                       = By.xpath("//a[contains(text(),'Sourcing Configuration')]//following::a[24]");
	public static By CostSheetIdentification3_Internal                       = By.xpath("//a[contains(text(),'Sourcing Configuration')]//following::a[38]");
	public static By CostSheetIdentification4_Internal                       = By.xpath("//a[contains(text(),'Sourcing Configuration')]//following::a[52]");
	public static By ChoosedColorwayOption                                   = By.xpath("//select[@id='colorwayGroupChosen']/option[1]");
	public static By ErrorMessageForPrimaryCostSheetUpdation                 = By.xpath("//div[@id='contentDiv']/table/tbody/tr[2]/td/table/tbody/tr/td");
    public static By SuffixColorwayHyperLink                                 = By.linkText("Suffix:");
	public static By ViewProductButton                                       = By.xpath("//a[text()='View Product.']");
	public static By CreateNewSpecification                                  = By.xpath("//a[text()='Create New Specification']");
	public static By SpecificationStatus                                     = By.xpath("//td[contains(text(),'Specification Status')]//following::select[1]");
	public static By ColorwayDropDown                                        = By.xpath("//td[contains(text(),'Colorway Name')]//following::select[1]");
	public static By CasePackQunatityValue                                   = By.xpath("//td[contains(text(),'Case Pack Quantity')]//following::td[1]");
	public static By Assortment_SolidWeightedAverage                         = By.xpath("//td[@id='hbAstSolidWeightedAverage']");
	public static By Assortment_SolidWeightedAverageUSD                      = By.xpath("//td[contains(text(),'Ast/Solid Weighted Average (USD)')]//following::td[1]");
	public static By TM_BP_SubTotal                                          = By.xpath("//td[@id='hbTMBPSubTotal']");
	public static By TM_MP_SubTotalUSD                                       = By.xpath("//td[@id='hbTMBPSubTotalUSD']");
	public static By HeaderAttributesPlusIcon                                = By.xpath("//a[text()='Header Attributes']//preceding::img[1]");
	public static By HeaderAttributes                                        = By.xpath("//a[text()='Header Attributes']");
	public static By BOMCurrencyDropDown                                     = By.xpath("//td[contains(text(),'*Currency')]/following::select[1]");
	public static By InternalBOMStatus                                       = By.xpath("//td[contains(text(),'Internal BOM Status')]//following::td[1]");
	public static By VendorBOMStatus                                         = By.xpath("//td[contains(text(),'Vendor BOM Status:')]//following::td[2]");
	
	public static By AddRowsButtonRetailItemColoyWay;
	public static By ProductColorWayDynamic;
	public static By ProductColorWayHyperLinkDynamic;
	public static By WaveDynamic;
	public static By WaveDropDownDynamic;
	public static By UnitRatioDynamic;
	public static By UnitRatioTextBoxDynamic;
	public static By ProductSourceDynamic;
	public static By ProductSourceDropDownDynamic;
	public static By CostSheetValueInContentTable;
	public static By CostSheetDetails;
	
	public static String productColorWayDynamic;
	public static String addRowsButtonRetailItemColoyWay;
	public static String productColorWayHyperLinkDynamic;
	public static String waveDropDownDynamic;
	public static String waveDynamic;
	public static String unitRatioDynamic;
	public static String unitRatioTextBoxDynamic;
	public static String productSourceDynamic;
	public static String productSourceDropDownDynamic;
	public static String costSheetValueInContentTable;
	public static String costSheetDetails;
	public static String CostSheetName1;
	public static String CostSheetName2;
	public static String CostSheetName3;
	public static String CostSheetName4;
	
	
	public static By TotalPlasticCostIdentification                          = By.xpath("//td[contains(text(),'Total Plastic Cost(USD)')]//following::td[1]");
	public static By TotalPurchasedCostIdentification                        = By.xpath("//td[contains(text(),'Total Purchased Cost(USD)')]//following::td[1]");
	public static By TotalSoftGoodsCostCostIdentification                    = By.xpath("//td[contains(text(),'Total Soft Goods Cost(USD)')]//following::td[1]");
	public static By TotalChemicalCostCostIdentification                     = By.xpath("//td[contains(text(),'Total Chemical Cost(USD)')]//following::td[1]");
	public static By TotalGeneralOrDecoCostIdentification                    = By.xpath("//td[contains(text(),'Total General / Deco Labor Cost (USD)')]//following::td[1]");
	public static By TotalMoldingLaborCostIdentification                     = By.xpath("//td[contains(text(),'Total Molding Labor Cost (USD)')]//following::td[1]");
	public static By TotalElectronicCostIdentification                       = By.xpath("//td[contains(text(),'Total Electronic Cost(USD)')]//following::td[1]");
	public static By TotalPackagingCostIdentification                        = By.xpath("//td[contains(text(),'Total Packaging Cost(USD)')]//following::td[1]");
	public static By TotalContentAndOverHeadMarkupCostIdentification         = By.xpath("//td[contains(text(),'Contents Overhead & Markup (USD)')]//following::td[1]");
	public static By ContentMarkupCostIdentification                         = By.xpath("//td[contains(text(),'Contents Markup (USD)')]//following::td[1]");
	public static By QuoteCurreny                                            = By.xpath("//td[@id='hBCurrency']");
	public static By CostSheetRetailItemStatusValue                          = By.xpath("//td[@id='hbStatus']");
	public static By CostSheetTemplateHyperLink                              = By.xpath("//td[contains(text(),'Ex-Factory Cost (SAP Base Price)')]//following::a[1]");
	public static By CloseButton                                             = By.xpath("//a[contains(text(),'(close)')]");
	public static By SideBarRFQ                                              = By.xpath("//a[text()='Costing']/following::a[1][text()='RFQ']");
	public static By SideBarCosting                                          = By.xpath("//a[text()='Sourcing']//following::a[1][text()='Costing']");
	public static By RFQColorwayValue                                        = By.xpath("//td[contains(text(),'General Attributes')]//following::a[1]");
	public static By TotalCost                                               = By.xpath("//td[contains(text(),'Target Cost (USD)')]//following::input[1]");
	public static By Specification                                           = By.linkText("Specifications");
	public static By ProductTypeInCopyLink                                   = By.xpath("//select[@id='productTypedata']");
	public static By CopyLinkNextButton                                      = By.xpath("//a[text()='Next']");
	public static By SoftGoodsIncluded                                       = By.xpath("//td[contains(text(),'*Softgoods Included')]//following::select[1]");
	public static By ElectronicsIncluded                                     = By.xpath("//td[contains(text(),'*Electronics Included')]//following::select[1]");
	public static By RetailItemIdentification                                = By.xpath("//td[@id='contextBar']/table/tbody/tr/td[1]/a[2]");
	public static By SegmentDropDown                                         = By.xpath("//td[contains(text(),'Segment')]//following::select[1]");
	public static By SuperCategoryDropDown                                   = By.xpath("//td[contains(text(),'Super Category')]//following::select[1]");
	public static By CategoryDropDown                                        = By.xpath("//td[contains(text(),'Super Category')]//following::select[3]");
	public static By LicensorDropDown                                        = By.xpath("//td[contains(text(),'Licensor')]//following::select[1]");
	public static By PropertyDropDown                                        = By.xpath("//td[contains(text(),'Property')]//following::select[1]");
	public static By FamilyBrandDropDown                                     = By.xpath("//td[contains(text(),'Family Brand')]//following::select[1]");
	public static By CoBrandDropDown                                         = By.xpath("//td[contains(text(),'Co-Brand')]//following::select[1]");
	public static By LowerAgeDropDown                                        = By.xpath("//td[contains(text(),'Lower Age')]//following::select[1]");
	public static By GenderDropDown                                          = By.xpath("//td[contains(text(),'Gender')]//following::select[1]");
	public static By UpperAgeDropDown                                        = By.xpath("//td[contains(text(),'Upper Age')]//following::select[1]");
	public static By ThirdPartyIndicatorDropDown                             = By.xpath("//td[contains(text(),'Third Party Indicator')]//following::select[1]");
	public static By ISODropDown                                             = By.xpath("//td[contains(text(),'ISO')]//following::select[1]");
	public static By AddRowTable                                             = By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table/tbody/tr/td/font");
	
	
	
	
	public static By ExFactoryCost_USD                                       = By.xpath("//td[@id='hbExFactorySAPBasePriceUSDConversion']");
	public static By TotalMarkUp_USD                                         = By.xpath("//td[@id='hbTotalMarkUpUSD']");
	public static By TotalPackaging_USD                                      = By.xpath("//td[@id='hbTotalPackagingCostUSD']");
	public static By TotalPlastic_USD                                        = By.xpath("//td[@id='hbTotalPlasticCostUSD']");
	public static By TotalPurchased_USD                                      = By.xpath("//td[@id='hbTotalPurchasedCostUSD']");
	public static By TotalSoftGoods_USD                                      = By.xpath("//td[@id='hbTotalSoftgoodsCostUSD']");
	public static By TotalChemical_USD                                       = By.xpath("//td[@id='hbTotalChemicalCostUSD']");
	public static By GeneralDecoLabor_USD                                    = By.xpath("//td[@id='hbContentsGeneralDecoLaborTotalUSD']");
	public static By TotalModingLabor_USD                                    = By.xpath("//td[@id='hbContentsMoldingLaborCostUSD']");
	public static By TotalElectronic_USD                                     = By.xpath("//td[@id='hbTotalElectronicCostUSD']");
	public static By TotalContentMarkUP_USD                                  = By.xpath("//td[@id='hbContentsOverheadMarkUpUSD']");
	
	public static By ExFactoryCost                                           = By.xpath("//td[contains(text(),'Product Cost - Quote Currency:')]//following::td[2]");
	public static By ExFactoryCost_Vendor                                    = By.xpath("//td[contains(text(),'Vendor Cost - Quote Currency:')]//following::td[2]");
	public static By TotalMarkUpElement                                      = By.xpath("//td[contains(text(),'Product Cost - Quote Currency:')]//following::td[4]");
	public static By TotalMarkUpElement_Vendor                               = By.xpath("//td[contains(text(),'Vendor Cost - Quote Currency:')]//following::td[4]");
	public static By TotalPlastic                                            = By.xpath("//td[@id='hbTotalPlasticCost']");
	public static By TotalPurchased                                          = By.xpath("//td[@id='hbTotalPurchasedCost']");
	public static By TotalPurchasedPartsCost                                 = By.xpath("//td[@id='hbTotalPurchasedPartsCost']");
	public static By TotalsoftGoods                                          = By.xpath("//td[@id='hbTotalSoftGoodsCost']");
	public static By TotalChemical                                           = By.xpath("//td[@id='hbTotalChemicalCost']");
	public static By TotalChemicals                                          = By.xpath("//td[@id='hbTotalChemicalsCost']");
	public static By GeneralDecoLabor                                        = By.xpath("//td[@id='hbGeneralDecoLaborTotalCost']");
	public static By TotalModingLabor                                        = By.xpath("//td[@id='hbMoldingLaborTotalCost']");
	public static By TotalElectronic                                         = By.xpath("//td[@id='hbTotalElectronicCost']");
	public static By TotalElectronics                                        = By.xpath("//td[@id='hbTotalElectronicsCost']");
	public static By TotalPackaging                                          = By.xpath("//td[@id='hbTotalPackagingCost']");
	public static By TotalContentMarkUP                                      = By.xpath("//td[@id='hbContentsOverheadMarkup']");
	public static By TotalPurchasedParts                                     = By.xpath("//td[@id='hbTotalPurchasedPartsCost']");
	public static By TotalChemicalsCost                                      = By.xpath(".//td[@id='hbTotalChemicalsCost']");
	public static By TotalGeneral_DecoLaborCost                              = By.xpath("//td[@id='hbTotalGenDecoLaborCost']");
	public static By TotalMoldingLaborCost                                   = By.xpath("//td[@id='hbTotalMoldingLaborCost']");
	public static By TotalPlasticUsagePerK                                   = By.xpath("//td[@id='hbTotalPlasticUsageK']");
	public static By TotalElectronicCost                                     = By.xpath("//td[@id='hbTotalElectronicsCost']");
	public static By TotalPackagingCost                                      = By.xpath("//td[@id='hbTotalPackagingCost']");
	public static By TotalMarkUpCost                                         = By.xpath("//td[@id='hbTotalMarkUpCost']");
	public static By TotalBOMCost                                            = By.xpath("//td[@id='hbTotalBOMCost']");               
	
	public static By TotalMasterCartonPackagingCostInBOM                     = By.xpath("//td[@id='hbTotalMasterCartonPkgCost']");
	public static By TotalMiscellaneousCostInBOM                             = By.xpath("//td[@id='hbTotalMiscellaneousCost']");
	public static By TotalMasterCartonLaborCostInBOM                         = By.xpath("//td[@id='hbTotalLaborCost']");
	public static By TotalMarkUpCostInBOM                                    = By.xpath("//td[@id='hbTotalMarkUpCost']");
	public static By TotalMasterCartonPackagingCostInCostSheet               = By.xpath("//td[@id='hbMasterCartonPackagingMaterial']");
	public static By TotalMasterCartonLaborCostInCostSheet                   = By.xpath("//td[@id='hbMasterCartonPackagingLaborCost']");
	public static By TotalMiscellaneousCostInCostSheet                       = By.xpath("//td[@id='hbMiscellaneousMaterial']");
	public static By TotalProductMarkUpInCostSheet                           = By.xpath("//td[@id='hbProductMarkup']");
	public static By BOMIterationInCostSheet                                 = By.xpath("//td[@id='hbBOMIteration']");
	public static By QuoteCurrencyInCostSheet                                = By.xpath("//td[@id='hBCurrency']");
	public static By CurrencyConversionRateInCostSheet                       = By.xpath("//td[@id='hbCurrencyConversionRate']");
	public static By CurrencyInBOM                                           = By.xpath("//td[@id='hbBOMCurrency']");
	public static By MaterialTabThroughSideBar                               = By.linkText("Materials");
	public static By BOMUpdateButton                                         = By.xpath("//a[text()='Update']");
	
	//Master carton  text Box In BOM
	
	public static By MasterCarton_MOQPer_K                                   = By.xpath("//td[@id='r1_hbMOQPerK']");
	public static By MasterCarton_MOQPer_K_InnerTextBox                      = By.xpath("//td[@id='r1_hbMOQPerK']/div/input[1]");
	public static By MasterCarton_LeadTime                                   = By.xpath("//td[@id='r1_hbLeadTimeDays']");
	public static By MasterCarton_LeadTme_InnerTextBox                       = By.xpath("//td[@id='r1_hbLeadTimeDays']/div/input[1]");
	public static By MasterCarton_UnitPrice                                  = By.xpath("//td[@id='r1_hbUnitPrice']");
	public static By MasterCarton_UnitPrice_InnerTextBox                     = By.xpath("//td[@id='r1_hbUnitPrice']/div/input[1]");
	public static By MasterCarton_UsagePerK                                  = By.xpath("//td[@id='r1_hbUsagePerK']");
	public static By MasterCarton_UsagePerK_InnerTextBox                     = By.xpath("//td[@id='r1_hbUsagePerK']/div/input[1]");
	public static By MasterCarton_MarkUp                                     = By.xpath("//td[@id='r1_hbMarkup']");
	public static By Mastercarton_MarkUP_InnerTextBox                        = By.xpath("//td[@id='r1_hbMarkup']/div/input[1]");
	public static By MasterCarton_Unit                                       = By.xpath("//td[@id='r1_hbUnit']");
	public static By MasterCarton_Unit_InnerDropDown                         = By.xpath("//td[@id='r1_hbUnit']/div/select[1]");
	
	
	//labor  text Box In BOM
	
	public static By Labor_MOQPer_K                                          = By.xpath("//td[@id='r2_hbMOQPerK']");
	public static By Labor_MOQPer_K_InnerTextBox                             = By.xpath("//td[@id='r2_hbMOQPerK']/div/input[1]");
	public static By Labor_LeadTime                                          = By.xpath("//td[@id='r2_hbLeadTimeDays']");
	public static By Labor_LeadTme_InnerTextBox                              = By.xpath("//td[@id='r2_hbLeadTimeDays']/div/input[1]");
	public static By Labor_UnitPrice                                         = By.xpath("//td[@id='r2_hbUnitPrice']");
	public static By Labor_UnitPrice_InnerTextBox                            = By.xpath("//td[@id='r2_hbUnitPrice']/div/input[1]");
	public static By Labor_UsagePerK                                         = By.xpath("//td[@id='r2_hbUsagePerK']");
	public static By Labor_UsagePerK_InnerTextBox                            = By.xpath("//td[@id='r2_hbUsagePerK']/div/input[1]");
	public static By Labor_MarkUp                                            = By.xpath("//td[@id='r2_hbMarkup']");
	public static By Labor_MarkUP_InnerTextBox                               = By.xpath("//td[@id='r2_hbMarkup']/div/input[1]");
	public static By Labor_Unit                                              = By.xpath("//td[@id='r2_hbUnit']");
	public static By Labor_Unit_InnerDropDown                                = By.xpath("//td[@id='r2_hbUnit']/div/select[1]");
	
	
	//Miscellaneous  text Box In BOM
	
	public static By Miscellaneous_MOQPer_K                                   = By.xpath("//td[@id='r3_hbMOQPerK']");
	public static By Miscellaneous_MOQPer_K_InnerTextBox                      = By.xpath("//td[@id='r3_hbMOQPerK']/div/input[1]");
	public static By Miscellaneous_LeadTime                                   = By.xpath("//td[@id='r3_hbLeadTimeDays']");
	public static By Miscellaneous_LeadTme_InnerTextBox                       = By.xpath("//td[@id='r3_hbLeadTimeDays']/div/input[1]");
	public static By Miscellaneous_UnitPrice                                  = By.xpath("//td[@id='r3_hbUnitPrice']");
	public static By Miscellaneous_UnitPrice_InnerTextBox                     = By.xpath("//td[@id='r3_hbUnitPrice']/div/input[1]");
	public static By Miscellaneous_UsagePerK                                  = By.xpath("//td[@id='r3_hbUsagePerK']");
	public static By Miscellaneous_UsagePerK_InnerTextBox                     = By.xpath("//td[@id='r3_hbUsagePerK']/div/input[1]");
	public static By Miscellaneous_MarkUp                                     = By.xpath("//td[@id='r3_hbMarkup']");
	public static By Miscellaneous_MarkUP_InnerTextBox                        = By.xpath("//td[@id='r3_hbMarkup']/div/input[1]");
	public static By Miscellaneous_Unit                                       = By.xpath("//td[@id='r3_hbUnit']");
	public static By Miscellaneous_Unit_InnerDropDown                         = By.xpath("//td[@id='r3_hbUnit']/div/select[1]");
	
	//Fourth Row Values
	public static By FourthRow_MOQPer_K                                       = By.xpath("//td[@id='r4_hbMOQPerK']");
	public static By FourthRow_MOQPer_K_InnerTextBox                          = By.xpath("//td[@id='r4_hbMOQPerK']/div/input[1]");
	public static By FourthRow_LeadTime                                       = By.xpath("//td[@id='r4_hbLeadTimeDays']");
	public static By FourthRow_LeadTme_InnerTextBox                           = By.xpath("//td[@id='r4_hbLeadTimeDays']/div/input[1]");
	public static By FourthRow_UnitPrice                                      = By.xpath("//td[@id='r4_hbUnitPrice']");
	public static By FourthRow_UnitPrice_InnerTextBox                         = By.xpath("//td[@id='r4_hbUnitPrice']/div/input[1]");
	public static By FourthRow_UsagePerK                                      = By.xpath("//td[@id='r4_hbUsagePerK']");
	public static By FourthRow_UsagePerK_InnerTextBox                         = By.xpath("//td[@id='r4_hbUsagePerK']/div/input[1]");
	public static By FourthRow_MarkUp                                         = By.xpath("//td[@id='r4_hbMarkup']");
	public static By FourthRow_MarkUP_InnerTextBox                            = By.xpath("//td[@id='r4_hbMarkup']/div/input[1]");
	public static By FourthRow_Unit                                           = By.xpath("//td[@id='r4_hbUnit']");
	public static By FourthRow_Unit_InnerDropDown                             = By.xpath("//td[@id='r4_hbUnit']/div/select[1]");
	
	//Fifth Row Values
    public static By FifthRow_MOQPer_K                                        = By.xpath("//td[@id='r5_hbMOQPerK']");
	public static By FifthRow_MOQPer_K_InnerTextBox                           = By.xpath("//td[@id='r5_hbMOQPerK']/div/input[1]");
	public static By FifthRow_LeadTime                                        = By.xpath("//td[@id='r5_hbLeadTimeDays']");
	public static By FifthRow_LeadTme_InnerTextBox                            = By.xpath("//td[@id='r5_hbLeadTimeDays']/div/input[1]");
	public static By FifthRow_UnitPrice                                       = By.xpath("//td[@id='r5_hbUnitPrice']");
	public static By FifthRow_UnitPrice_InnerTextBox                          = By.xpath("//td[@id='r5_hbUnitPrice']/div/input[1]");
	public static By FifthRow_UsagePerK                                       = By.xpath("//td[@id='r5_hbUsagePerK']");
	public static By FifthRow_UsagePerK_InnerTextBox                          = By.xpath("//td[@id='r5_hbUsagePerK']/div/input[1]");
	public static By FifthRow_MarkUp                                          = By.xpath("//td[@id='r5_hbMarkup']");
	public static By FifthRow_MarkUP_InnerTextBox                             = By.xpath("//td[@id='r5_hbMarkup']/div/input[1]");
	public static By FifthRow_Unit                                            = By.xpath("//td[@id='r5_hbUnit']");
	public static By FifthRow_Unit_InnerDropDown                              = By.xpath("//td[@id='r5_hbUnit']/div/select[1]");
	
	//Sixth Row Values
    public static By SixthRow_MOQPer_K                                        = By.xpath("//td[@id='r6_hbMOQPerK']");
	public static By SixthRow_MOQPer_K_InnerTextBox                           = By.xpath("//td[@id='r6_hbMOQPerK']/div/input[1]");
	public static By SixthRow_LeadTime                                        = By.xpath("//td[@id='r6_hbLeadTimeDays']");
	public static By SixthRow_LeadTme_InnerTextBox                            = By.xpath("//td[@id='r6_hbLeadTimeDays']/div/input[1]");
	public static By SixthRow_UnitPrice                                       = By.xpath("//td[@id='r6_hbUnitPrice']");
	public static By SixthRow_UnitPrice_InnerTextBox                          = By.xpath("//td[@id='r6_hbUnitPrice']/div/input[1]");
	public static By SixthRow_UsagePerK                                       = By.xpath("//td[@id='r6_hbUsagePerK']");
	public static By SixthRow_UsagePerK_InnerTextBox                          = By.xpath("//td[@id='r6_hbUsagePerK']/div/input[1]");
	public static By SixthRow_MarkUp                                          = By.xpath("//td[@id='r6_hbMarkup']");
	public static By SixthRow_MarkUP_InnerTextBox                             = By.xpath("//td[@id='r6_hbMarkup']/div/input[1]");
	public static By SixthRow_Unit                                            = By.xpath("//td[@id='r6_hbUnit']");
	public static By SixthRow_Unit_InnerDropDown                              = By.xpath("//td[@id='r6_hbUnit']/div/select[1]");
	
	
	//Seventh Row Values
    public static By SeventhRow_MOQPer_K                                       = By.xpath("//td[@id='r7_hbMOQPerK']");
	public static By SeventhRow_MOQPer_K_InnerTextBox                          = By.xpath("//td[@id='r7_hbMOQPerK']/div/input[1]");
	public static By SeventhRow_LeadTime                                       = By.xpath("//td[@id='r7_hbLeadTimeDays']");
	public static By SeventhRow_LeadTme_InnerTextBox                           = By.xpath("//td[@id='r7_hbLeadTimeDays']/div/input[1]");
	public static By SeventhRow_UnitPrice                                      = By.xpath("//td[@id='r7_hbUnitPrice']");
	public static By SeventhRow_UnitPrice_InnerTextBox                         = By.xpath("//td[@id='r7_hbUnitPrice']/div/input[1]");
	public static By SeventhRow_UsagePerK                                      = By.xpath("//td[@id='r7_hbUsagePerK']");
	public static By SeventhRow_UsagePerK_InnerTextBox                         = By.xpath("//td[@id='r7_hbUsagePerK']/div/input[1]");
	public static By SeventhRow_MarkUp                                         = By.xpath("//td[@id='r7_hbMarkup']");
	public static By SeventhRow_MarkUP_InnerTextBox                            = By.xpath("//td[@id='r7_hbMarkup']/div/input[1]");
	public static By SeventhRow_Unit                                           = By.xpath("//td[@id='r7_hbUnit']");
	public static By SeventhRow_Unit_InnerDropDown                             = By.xpath("//td[@id='r7_hbUnit']/div/select[1]");
	
	//Eighth Row Values
    public static By EighthRow_MOQPer_K                                        = By.xpath("//td[@id='r8_hbMOQPerK']");
	public static By EighthRow_MOQPer_K_InnerTextBox                           = By.xpath("//td[@id='r8_hbMOQPerK']/div/input[1]");
	public static By EighthRow_LeadTime                                        = By.xpath("//td[@id='r8_hbLeadTimeDays']");
	public static By EighthRow_LeadTme_InnerTextBox                            = By.xpath("//td[@id='r8_hbLeadTimeDays']/div/input[1]");
	public static By EighthRow_UnitPrice                                       = By.xpath("//td[@id='r8_hbUnitPrice']");
	public static By EighthRow_UnitPrice_InnerTextBox                          = By.xpath("//td[@id='r8_hbUnitPrice']/div/input[1]");
	public static By EighthRow_UsagePerK                                       = By.xpath("//td[@id='r8_hbUsagePerK']");
	public static By EighthRow_UsagePerK_InnerTextBox                          = By.xpath("//td[@id='r8_hbUsagePerK']/div/input[1]");
	public static By EighthRow_MarkUp                                          = By.xpath("//td[@id='r8_hbMarkup']");
	public static By EighthRow_MarkUP_InnerTextBox                             = By.xpath("//td[@id='r8_hbMarkup']/div/input[1]");
	public static By EighthRow_Unit                                            = By.xpath("//td[@id='r8_hbUnit']");
	public static By EighthRow_Unit_InnerDropDown                              = By.xpath("//td[@id='r8_hbUnit']/div/select[1]");
	public static By VendorActionDropDown                                      = By.xpath("//select[@id='sourcingActions']");
	
	//Vendor Retail Item internal Cost Sheet Value
	
	public static By RetailItemInternalCostSheetValue                         = By.xpath("//td[contains(text(),'Vendor Retail Item Cost - Quote Currency:')]//following::td[contains(text(),'Retail Item Cost')]//following::td[1]");
	public static By RetailItemInternal_PackagingMaterialvalue                = By.xpath("//td[contains(text(),'Vendor Retail Item Cost - Quote Currency:')]//following::td[contains(text(),'Packaging Material')]//following::td[1]");
	public static By RetailItemInternal_PlasticMaterialvalue                  = By.xpath("//td[contains(text(),'Vendor Retail Item Cost - Quote Currency:')]//following::td[contains(text(),'Plastic Material')]//following::td[1]");
	public static By RetailItemInternal_GeneralDecovalue                      = By.xpath("//td[contains(text(),'Vendor Retail Item Cost - Quote Currency:')]//following::td[contains(text(),'General / Deco Labor Cost')]//following::td[1]");
	public static By RetailItemInternal_ChemicalMaterialvalue                 = By.xpath("//td[contains(text(),'Vendor Retail Item Cost - Quote Currency:')]//following::td[contains(text(),'Chemical Material')]//following::td[1]");
	public static By RetailItemInternal_MoldingLaborCostvalue                 = By.xpath("//td[contains(text(),'Vendor Retail Item Cost - Quote Currency:')]//following::td[contains(text(),'Molding Labor Cost')]//following::td[1]");
	public static By RetailItemInternal_PurchasedMaterialvalue                = By.xpath("//td[contains(text(),'Vendor Retail Item Cost - Quote Currency:')]//following::td[contains(text(),'Purchased Material')]//following::td[1]");
	public static By RetailItemInternal_OverHeadAndMarkUpvalue                = By.xpath("//td[contains(text(),'Vendor Retail Item Cost - Quote Currency:')]//following::td[contains(text(),'Overhead & Markup')]//following::td[1]");
	public static By RetailItemInternal_SoftGoodsMaterialvalue                = By.xpath("//td[contains(text(),'Vendor Retail Item Cost - Quote Currency:')]//following::td[contains(text(),'Soft Goods Material')]//following::td[1]");
	public static By RetailItemInternal_ElectronicMaterialValue               = By.xpath(".//td[contains(text(),'Vendor Retail Item Cost - Quote Currency:')]//following::td[contains(text(),'Electronic Material')]//following::td[1]");
	public static By AddExistingDocumentRefrenceNumber                        = By.xpath("//td[contains(text(),'Associated Documents:')]//following::select[1]");     
	public static By ContentFileName                                          = By.xpath("//a[text()='File Size (Bytes)']//following::a[5]");
	public static By ContentFileSize                                          = By.xpath("//a[text()='File Size (Bytes)']//following::td[8]");
	public static By DocumentName                                             = By.xpath("//a[text()='File Size (Bytes)']//following::td[9]/a[1]");
	public static By WorkingState                                             = By.xpath("//a[text()='File Size (Bytes)']//following::td[10]");
	public static By ContenFileType                                           = By.xpath("//a[text()='File Size (Bytes)']//following::td[11]");
	
	
	
	public static String TotalPlasticCostValue;
	public static String TotalPurchasedCostValue;
	public static String TotalSoftGoodsCostValue;
    public static String TotalChemicalCostValue;
    public static String TotalGeneralOrDecoCostValue;
    public static String TotalMoldingLaborCostValue;
    public static String TotalElectronicCostValue;
    public static String TotalPackagingCostValue;
    public static String TotalContentAndOverHeadMarkupCostValue;
    public static String ContentMarkupCostValue;
	public static String colorwayValue;
	public static String CopyLinkRetailItem1;
	public static String CopyLinkRetailItem2;
	public static String totalMasterCartonPackagingCostInBOM;
	public static String totalMiscellaneousCostInBOM;
	public static String totalMasterCartonLaborCost;
	public static String totalMarkUpCost;
	public static String QuoteCurrencyInBOM;
	public static String CostSheetQuoteCurrency;
	
	public static String strViewOwner;
	//M01
	
	public static By lineSheetView                                            = By.id("viewId");
	public static By Filter                                                   = By.xpath("//a[contains(text(),'Filters')]");
	public static By options                                                  = By.xpath("//a[text()='Options']");
	public static By level                                                    = By.xpath("//td[contains(text(),'Level')]//following::select[1]");
	public static By Filterdropdown                                           = By.id("filterId");
	public static By Run                                                      = By.xpath("//a[text()='Run']"); 
	public static By lineSheet                                                = By.linkText("Line Sheet");
	public static By updateTableLayout                                        = By.xpath("//img[contains(@src,'customize_tablebutton.gif')]");
	public static By placeholders                                             = By.id("placeholderMode");
	public static By ddRegion                                                 = By.xpath("//a[contains(text(),'Region')]//following::td[2]/select[1]");
	public static By ddBU                                                     = By.xpath("//a[contains(text(),'Business Unit')]//following::td[2]/select[1]");
	public static By updateTableLayoutHidden                                  = By.xpath("//div[@id='updateViewDiv' and @style='display: none;']//img[contains(@src,'customize_tablebutton.gif')]");
	public static By viewowner                                                = By.xpath("//td[text()='System View']");
	public static By viewOwner                                                = By.xpath("//td[contains(text(),'View Owner')]//following::td[1]");
	public static By FirstSelectionCheckBox                                   = By.xpath("//a[text()='Visible To Vendor']//following::input[1]");
	public static By VendorRetailItemBOMtype                                  = By.xpath("//div[@id='null']/div[1]/div[2]/table/tbody[1]/tr[1]/td[4]");
	public static By CountryOfOriginInsideGeneralAttribute                    = By.xpath("//td[contains(text(),'General Attributes:')]//following::div[4]/table[1]/tbody[1]/tr[3]/td[3]");
	public static By CountryOfOriginTDTAGInsideGeneralAttribute               = By.xpath("//td[contains(text(),'General Attributes:')]//following::div[4]/table[1]/tbody[1]/tr[3]/td[4]");
	public static By FactoryRegionInsdieGeneralAttribute                      = By.xpath("//td[contains(text(),'General Attributes:')]//following::div[4]/table[1]/tbody[1]/tr[4]/td[3]");
	public static By FactoryRegionTDTAGInsdieGeneralAttribute                 = By.xpath("//td[contains(text(),'General Attributes:')]//following::div[4]/table[1]/tbody[1]/tr[4]/td[4]");
	public static By PlasticSectionIdentification                             = By.xpath("//div[@id='hbPlasticsTabEditorTableDiv_plus']/a[2]");
	public static By ChemicalSectionIdentification                            = By.xpath("//div[@id='hbPlasticsTabEditorTableDiv_plus']/a[2]//following::div[@id='hbChemicalsTabEditorTableDiv_plus']/a[2]");
	public static By PurchasedSectionIdentification                           = By.xpath("//div[@id='hbChemicalsTabEditorTableDiv_plus']/a[2]//following::div[@id='hbPurchasedPartsTabEditorTableDiv_plus']/a[2]");
	public static By ElectronicSectionIdentification                          = By.xpath("//div[@id='hbPurchasedPartsTabEditorTableDiv_plus']/a[2]//following::div[@id='hbElectronicsTabEditorTableDiv_plus']/a[2]");
	public static By SoftGoodsIdentification                                  = By.xpath("//div[@id='hbElectronicsTabEditorTableDiv_plus']/a[2]//following::div[@id='hbSoftGoodsTabEditorTableDiv_plus']/a[2]");
	public static By PackagingIdentification                                  = By.xpath("//div[@id='hbSoftGoodsTabEditorTableDiv_plus']/a[2]//following::div[@id='hbPackagingTabEditorTableDiv_plus']/a[2]");
	public static By GeneralDecoIdentification                                = By.xpath("//div[@id='hbPackagingTabEditorTableDiv_plus']/a[2]//following::div[@id='hbGeneralOrDecoLaborTabEditorTableDiv_plus']/a[2]");
	public static By ModingLaborIdentification                                = By.xpath("//div[@id='hbGeneralOrDecoLaborTabEditorTableDiv_plus']/a[2]//following::div[@id='hbMoldingLaborTabEditorTableDiv_plus']/a[2]");
	
	
	public static By PlasticSectionView                                       = By.xpath("//div[@id='hbPlasticsViewDisplay']/b");
	public static By ChemicalSectionView                                      = By.xpath("//div[@id='hbChemicalsViewDisplay']/b");
	public static By PurchasedPartsSectionView                                = By.xpath("//div[@id='hbPurchasedPartsViewDisplay']/b");
	public static By ElectronicSectionView                                    = By.xpath("//div[@id='hbElectronicsViewDisplay']/b");
	public static By SoftGoodsSectionView                                     = By.xpath("//div[@id='hbSoftGoodsViewDisplay']/b");
	public static By PackagingSectionView                                     = By.xpath("//div[@id='hbPackagingViewDisplay']/b");
	public static By GeneralDecoLaborView                                     = By.xpath("//div[@id='hbGeneralOrDecoLaborViewDisplay']/b");
	public static By MoldingLaborView                                         = By.xpath("//div[@id='hbMoldingLaborViewDisplay']/b");
	
	
	public static By GeneralDecoLaborViewChangeImage                          = By.xpath("//div[@id='hbGeneralOrDecoLaborTabEditorTableDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[4]/a/img");
	
	
	//Moldong labor Section
	public static By MoldingLaborViewchangeImage                              = By.xpath("//div[@id='hbMoldingLaborTabEditorTableDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[4]/a/img");
	
	
	public static By ViewChangeTable                                          = By.xpath("//div[@id='overDiv']/table/tbody/tr/td/table[2]/tbody/tr/td/font");
	
	
	//Plastic Section
	public static By PlasticSectionViewChangeImage                            = By.xpath("//div[@id='hbPlasticsTabEditorTableDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[4]/a/img");
	public static By PlasticUnitPriceTable                                    = By.xpath("//td[@id='r1_hbUnitPrice']");
	public static By PlasticUnitPriceTextBox                                  = By.xpath("//td[@id='r1_hbUnitPrice']/div[1]/input[1]");
	public static By PlasticUsagePerKTable                                    = By.xpath("//td[@id='r1_hbUsagePerK']");
	public static By PlasticUsagePerKTextBox                                  = By.xpath("//td[@id='r1_hbUsagePerK']/div[1]/input[1]");
	public static By PlasticCavtable                                          = By.xpath("//td[@id='r1_hbCav']");
	public static By PlasticCavtextBox                                        = By.xpath("//td[@id='r1_hbCav']/div[1]/input[1]");
	public static By PlasticMarkUpTable                                       = By.xpath("//td[@id='r1_hbMarkup']");
	public static By PlasticMarkUpTextBox                                     = By.xpath("//td[@id='r1_hbMarkup']/div[1]/input[1]");
	
	//Chemical Section
	public static By ChemicalSectionViewChangeImage                           = By.xpath("//div[@id='hbChemicalsTabEditorTableDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[4]/a/img");
	public static By ChemicalUnitPriceTable                                   = By.xpath("//td[@id='r2_hbUnitPrice']");
	public static By ChemicalUnitPriceTextBox                                 = By.xpath("//td[@id='r2_hbUnitPrice']/div[1]/input[1]");
	public static By ChemicalUsagePerKTable                                   = By.xpath("//td[@id='r2_hbUsagePerK']");
	public static By ChemicalUsagePerKTextBox                                 = By.xpath("//td[@id='r2_hbUsagePerK']/div[1]/input[1]");
	public static By ChemicalMarkUpTable                                      = By.xpath("//td[@id='r2_hbMarkup']");
	public static By ChemicalMarkUpTextBox                                    = By.xpath("//td[@id='r2_hbMarkup']/div[1]/input[1]");
	
	//Purchased parts
	public static By PurcHasedSectionViewChangeImage                          = By.xpath("//div[@id='hbPurchasedPartsTabEditorTableDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[4]/a/img");
	public static By PurchasedUnitPriceTable                                  = By.xpath("//td[@id='r3_hbUnitPrice']");
	public static By PurchasedUnitPriceTextBox                                = By.xpath("//td[@id='r3_hbUnitPrice']/div[1]/input[1]");
	public static By PurchasedUsagePerKTable                                  = By.xpath("//td[@id='r3_hbUsagePerK']");
	public static By PurchasedUsagePerKTextBox                                = By.xpath("//td[@id='r3_hbUsagePerK']/div[1]/input[1]");
	public static By PurchasedMarkUpTable                                     = By.xpath("//td[@id='r3_hbMarkup']");
	public static By PurchasedMarkUpTextBox                                   = By.xpath("//td[@id='r3_hbMarkup']/div[1]/input[1]");
	
	//Electronic Section
	public static By ElectronicSectionViewChangeImage                         = By.xpath("//div[@id='hbElectronicsTabEditorTableDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[4]/a/img");
	public static By ElectronicUnitPriceTable                                 = By.xpath("//td[@id='r4_hbUnitPrice']");
	public static By ElectronicUnitPriceTextBox                               = By.xpath("//td[@id='r4_hbUnitPrice']/div[1]/input[1]");
	public static By ElectronicUsagePerKTable                                 = By.xpath("//td[@id='r4_hbUsagePerK']");
	public static By ElectronicUsagePerKTextBox                               = By.xpath("//td[@id='r4_hbUsagePerK']/div[1]/input[1]");
	public static By ElectronicMarkUpTable                                    = By.xpath("//td[@id='r4_hbMarkup']");
	public static By ElectronicMarkUpTextBox                                  = By.xpath("//td[@id='r4_hbMarkup']/div[1]/input[1]");
	
	
	//SoftGoods Section
	public static By SoftGoodsSectionViewChangeImage                          = By.xpath("//div[@id='hbSoftGoodsTabEditorTableDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[4]/a/img");
	public static By SoftGoodsUnitPriceTable                                  = By.xpath("//td[@id='r5_hbUnitPrice']");
	public static By SoftGoodsUnitPriceTextBox                                = By.xpath("//td[@id='r5_hbUnitPrice']/div[1]/input[1]");
	public static By SoftGoodsUsagePerKTable                                  = By.xpath("//td[@id='r5_hbUsagePerK']");
	public static By SoftGoodsUsagePerKTextBox                                = By.xpath("//td[@id='r5_hbUsagePerK']/div[1]/input[1]");
	public static By SoftGoodsMarkUpTable                                     = By.xpath("//td[@id='r5_hbMarkup']");
	public static By SoftGoodsMarkUpTextBox                                   = By.xpath("//td[@id='r5_hbMarkup']/div[1]/input[1]");
	
	
	//SoftGoods Section
	public static By PackagingSectionViewChangeImage                          = By.xpath("//div[@id='hbPackagingTabEditorTableDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[4]/a/img");
	public static By PackagingUnitPriceTable                                  = By.xpath("//td[@id='r6_hbUnitPrice']");
	public static By PackagingUnitPriceTextBox                                = By.xpath("//td[@id='r6_hbUnitPrice']/div[1]/input[1]");
	public static By PackagingUsagePerKTable                                  = By.xpath("//td[@id='r6_hbUsagePerK']");
	public static By PackagingUsagePerKTextBox                                = By.xpath("//td[@id='r6_hbUsagePerK']/div[1]/input[1]");
	public static By PackagingMarkUpTable                                     = By.xpath("//td[@id='r6_hbMarkup']");
	public static By PackagingMarkUpTextBox                                   = By.xpath("//td[@id='r6_hbMarkup']/div[1]/input[1]");
	
	//GeneralDeco Section
	public static By GeneralDecoSectionViewChangeImage                        = By.xpath("//div[@id='hbGeneralOrDecoLaborTabEditorTableDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[4]/a/img");
	public static By GeneralDecoUnitPriceTable                                = By.xpath("//td[@id='r7_hbUnitPrice']");
	public static By GeneralDecoUnitPriceTextBox                              = By.xpath("//td[@id='r7_hbUnitPrice']/div[1]/input[1]");
	public static By GeneralDecoUsagePerKTable                                = By.xpath("//td[@id='r7_hbUsagePerK']");
	public static By GeneralDecoUsagePerKTextBox                              = By.xpath("//td[@id='r7_hbUsagePerK']/div[1]/input[1]");
	public static By GeneralDecoMarkUpTable                                   = By.xpath("//td[@id='r7_hbMarkup']");
	public static By GeneralDecoMarkUpTextBox                                 = By.xpath("//td[@id='r7_hbMarkup']/div[1]/input[1]");
	
	//Molding Labor Section
	
	public static By MoldingSectionViewChangeImage                            = By.xpath("//div[@id='hbMoldingLaborTabEditorTableDiv']/table/tbody/tr[1]/td/table/tbody/tr/td[4]/a/img");
	public static By MoldingLaborCostPerHourTable                             = By.xpath("//td[@id='r8_hbCostPerHr']");
	public static By MoldingLaborCostPerHourTextBox                           = By.xpath("//td[@id='r8_hbCostPerHr']/div[1]/input[1]");
	public static By MoldinglaborEfficiencyPercentageTable                    = By.xpath("//td[@id='r8_hbEfficiencyPercent']");
	public static By MoldinglaborEfficiencyPercentageTextBox                  = By.xpath("//td[@id='r8_hbEfficiencyPercent']/div[1]/input[1]");
	public static By MoldinglaborCycleTimeTable                               = By.xpath("//td[@id='r8_hbCycleTime']");
	public static By MoldingLaborCycleTimeTextBox                             = By.xpath("//td[@id='r8_hbCycleTime']/div[1]/input[1]");
	public static By MoldinglaborTotalCavTable                                = By.xpath("//td[@id='r8_hbTotalCav']");
	public static By MoldinglaborTotalCavTextBox                              = By.xpath("//td[@id='r8_hbTotalCav']/div[1]/input[1]");
	public static By MoldinglaborUpTable                                      = By.xpath("//td[@id='r8_hbUp']");
	public static By MoldinglaborUpTableTextBox                               = By.xpath("//td[@id='r8_hbUp']/div[1]/input[1]");
	public static By MoldingLaborMarkUpTable                                  = By.xpath("//td[@id='r8_hbMarkup']");
	public static By MoldingLaborMarkUpTextBox                                = By.xpath("//td[@id='r8_hbMarkup']/div[1]/input[1]");
	public static By MoldinglaborMaterialTable                                = By.xpath("//td[@id='r8_materialDescription']");
	public static By MoldinglaborMaterialTextBox                              = By.xpath("//td[@id='r8_materialDescription']/div[1]/textarea[1]");
	
	
	
	
	
	public static By VendorFullModldingLaborView                              = By.linkText("Vendor: Full Molding Labor");
	public static By VendorFullPlasticLaborView                               = By.linkText("Vendor: Full Plastic");
	public static By VendorFullView                                           = By.linkText("Vendor: Full");
	
	
	
	public static By TotalBOMCostText                                         = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[1]");
	public static By TotalPlasticCostText                                     = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[9]");
	public static By TotalPackagingCostText                                   = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[11]");
	public static By TotalChemicalCostText                                    = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[13]");
	public static By TotalGeneralDecoLaboRcostText                            = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[15]");
	public static By TotalPurchasedCostText                                   = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[17]");
	public static By TotalMoldingLaborCostText                                = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[19]");
	public static By TotalElectronicCostText                                  = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[21]");
	public static By TotalMarkUpCostText                                      = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[23]");
	public static By TotalSotGoodCostText                                     = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[25]");
	public static By TotalPlasticUsagePerKText                                = By.xpath("//td[contains(text(),'Vendor BOM Cost Summary:')]//following::td[27]");
	public static By DetailedWaveHDMTable                                     = By.xpath(".//div[@id='contentDiv']/table/tbody/tr[3]/td/table/tbody/tr/td/div[4]/div[2]/div[1]/table/tbody/tr/td[2]");
	public static By HDMTableEditButton                                       = By.xpath("//td[contains(text(),'Detailed Wave - HDM:')]//following::a[text()='Edit']");
	
	
	
	
	//PD59
	public static By RetailItemWaveTable_HDMTable                             = By.xpath("//td[@id='r1_retailItemOrWave']");
	public static By RetailItemWaveHyperLink_HDMTable                         = By.xpath("//td[@id='r1_retailItemOrWave']/div/a[1]");
	public static By Colorway9thDigitTable                                    = By.xpath("//td[@id='r1_hbRINinthDigit']");
	public static By Colorway9thDigitTableTextBox                             = By.xpath("//td[@id='r1_hbRINinthDigit']/div/input[1]");
	public static By WaveTable_HDM                                            = By.xpath("//td[@id='r1_hbWave']");
	public static By WaveTableDropDown_HDM                                    = By.xpath("//td[@id='r1_hbWave']/div[1]/select[1]");
	public static By ColorwayRatioTable_HDM                                   = By.xpath("//td[@id='r1_hbRIRatio']");
	public static By ColorwayRatioTextBox_HDM                                 = By.xpath("//td[@id='r1_hbRIRatio']/div[1]/input[1]");
	public static By ColorwayStatusTable_HDM                                  = By.xpath("//td[@id='r1_hbWaveStatus']");
	public static By ColorwayStatusTextBox_HDM                                = By.xpath("//td[@id='r1_hbWaveStatus']/div[1]/select[1]");
	public static By UnitRatioValue1                                          = By.xpath("//td[contains(text(),'Contents Table:')]//following::td[18]");
	public static By UntiRatioValue2                                          = By.xpath("//td[contains(text(),'Contents Table:')]//following::td[28]");
	public static By CostSheetStatusDropDown                                  = By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]");
	
	public static By CostSheetStatus                                          = By.xpath("//td[contains(text(),'Cost Sheet Status')]//following::td[1]");
	public static By VendorCostSheetStatus                                    = By.xpath("//td[contains(text(),'Vendor Cost Sheet Status:')]//following::td[2]");
	
	@Test(dataProvider="testDataTest")
	//public void tcProduct(String login, String pwd, String AttributeGroup, String Verification,String Create, String SetState, String ReadView, String UpdateProduct,String UpdateProductSeason, String Delete,String SeasonYear,String LSAction,String LSViews) throws Exception{
	public void tcSCFunctional(String [] data) throws Exception{
		count++;
		System.out.println(runmodes[count]);
		if(!runmodes[count].equalsIgnoreCase("y")){
			skip=true;
			log.debug(this.getClass().getSimpleName()+" Testdata row number "+(count+1)+" is skippped as runmode is set to N");
			throw new SkipException(this.getClass().getSimpleName()+" Testdata row number "+(count+1)+" is skipped as runmode is set to N");
		}
		try{
			log.debug("Inside testcase for Sanity suite");
			// User Name, Password and Action
			log.info("col0 :" + data[0]); 
			log.info("col1 :" + data[1]);
			log.info("col1 :" + data[2]);
			//log.info("Testcase is :" + data[137]);
			//log.info("Testcase no is :" + data[138]);
			if(flaglogin==true)
			{
				if(!loginVal.equalsIgnoreCase(data[0])){
					y=0;
					flaglogin=false;
					CommonProjectFunctions.logOut();
					
				}
			}
			if(runmodes[count].equalsIgnoreCase("y")){
				if(y==0){
					openBrowser();
					launchApp(data[0],data[1]);
					y++;
					System.out.println("y: "+y);
					loginVal=data[0];
					flaglogin=true;
				}
			}
			switch (data[2]) {
			case "M04 - Update Wave Forecast Quantities - Manual":
			TC_1_ManualInputWaveForecastQuantityWithoutPercentageCalculation(data);	
			//Adminuser[data[0] and data[1])
			break;
			
			case "M05 - Update Wave Forecast Quantities - Automatic":
			TC_2_WaveForecastQuantityBasedOnForecastPercentageCalculation(data);
			//Adminuser[data[0] and data[1])
			break;
			
			case "R2.5-PD19 - Remove Product from Placeholder from Assoc prod table for Admin User Role":
			TC_3_RemoveProductFromPlaceholderFromAssocProdTable(data);
			/*Pre-Req:
			 * //We Should Have an existing PlaceHolder with out Associating Any Product(data [140])
			 * data[151] should Have Been Empty
			 */
			
			break;
			
			case "R2.5-PD19 - Remove Product from Placeholder from Assoc prod table for GM User Role":
			TC_4_5_6_RemoveProductFromPlaceholderFromAssocProdTable(data);
			/*Pre-Req:
			 * //We Should Have an existing PlaceHolder with out Associating Any Product(data [140])
			 * data[151] should Have Been Empty
			 */
			break;
			
			case "R2.5-PD19 - Remove Product from Placeholder from Assoc prod table for PMO User Role":
			TC_4_5_6_RemoveProductFromPlaceholderFromAssocProdTable(data);
			/*Pre-Req:
			 * //We Should Have an existing PlaceHolder with out Associating Any Product(data [140])
			 * data[151] should Have Been Empty
			 */
			break;
			
			case "R2.5-PD19 - Remove Product from Placeholder from Assoc prod table for RM User Role":
			TC_4_5_6_RemoveProductFromPlaceholderFromAssocProdTable(data);
			/*Pre-Req:
			 * //We Should Have an existing PlaceHolder with out Associating Any Product(data [140])
			 * data[151] should Have Been Empty
			 */
			break;
			
			case "R2.5-PD20 - Remove Product from Placeholder from Line Sheet for Admin User Role":
			TC_7_RemoveProductFromPlaceholderFromLineSheet(data);
			/*Pre-Req:
			 * //We Should Have an existing PlaceHolder with out Associating Any Product(data [140])
			 * data[151] should Have Been Empty
			 */
			break;
			
			case "R2.5-PD20 - Remove Product from Placeholder from Line Sheet for GM User Role":
			TC_8_9_10_RemoveProductFromPlaceholderFromLineSheet(data);
			/*Pre-Req:
			 * //We Should Have an existing PlaceHolder (data [140])with  Product Associated(data[154])
			 * data[151] should Have Been Empty
			 * 
			 */
			break;
			
			case "R2.5-PD20 - Remove Product from Placeholder from Line Sheet for PMO User Role":
			TC_8_9_10_RemoveProductFromPlaceholderFromLineSheet(data);
			/*Pre-Req:
			 * //We Should Have an existing PlaceHolder (data [140])with  Product Associated(data[154])
			 * data[151] should Have Been Empty
			 * 
			 */
			break;
			
			case "R2.5-PD20 - Remove Product from Placeholder from Line Sheet for RM User Role":
			TC_8_9_10_RemoveProductFromPlaceholderFromLineSheet(data);
			/*Pre-Req:
			 * //We Should Have an existing PlaceHolder (data [140])with  Product Associated(data[154])
			 * data[151] should Have Been Empty
			 * 
			 */
			break;
				
			case "PC42 - Create Vendor Product Cost Sheet Template":
			TC_11_CreateVendorProductCostSheetTemplate(data);
			/*Pre-Req:
			 * Assortment/Solid Product Should Have Been Created(data[155]
			 * Source Should Have BeenAdded(Data[156]
			 * Retail Item(data[171] Should Have Created and Associated With The Assortment Product
			 * Color Should have Been Added(data[160])
			 * External Supplier Should Have been Added(data[159])
			 */
			
			break;
			
			case "R2.5-PC41 - Create Vendor Product Cost Sheet from Template":
			TC_12_CreateVendorProductCostSheetFromTemplate(data);
			/*Pre-Req:
			 * Assortment/Solid Product Should Have Been Created(data[155] with Specificationa and Colorway
			 * Source Should Have BeenAdded(Data[156]
			 * Retail Item(data[171] Should Have Created and Associated With The Assortment Product
			 * Color Should have Been Added(data[160])
			 * External Supplier Should Have been Added(data[159]) 
			 * vendor user([data[220],data[221])
			 */
			break;
			
			case "PC44 - Create Vendor What-If Product Cost Sheet":
			TC_13_CreateVendorWhatIfProductCostSheet(data);
			/*Pre-Req:
			 * Admin user(data[0],data[1]
			 * CostingUSer[data[461],data[462]
			 * VendorUser(data[220],data[221]
			 */
			break;
			
			case "PC43 - Create Vendor Retail Item Cost Sheet from Template":
			TC_14_CreateVendorRetailItemCostSheetFromTemplate(data);
			/*Pre-Req:
			 * AdminUser(data[0],data[1]
			 * Retail Item Product Should Have Been Created(data[155] with Specification  and Color way
			 * Source Should Have BeenAdded(Data[156]
			 * Retail Item(data[171] Should Have Created and Associated With The Assortment Product
			 * Color Should have Been Added(data[160])
			 * External Supplier Should Have been Added(data[159]) 
			 * vendor user([data[220],data[221])*/
			break;
			
			case "PC34 - Create Vendor Retail Item Cost Sheet":
			TC_15_CreateVendorRetailItemCostSheet(data);
			/*Pre-Req
			  * 1.Existing Retail Item Product(data[155])
               2.One External Vendor Source Should Have Been Added(data[156]) for a Season(data[3]) with Approved State
               3.Specification Should Have been added( it will be Selected Through index , not required Excel Data)
               4.Factory Should Have been Added(data[159])
               5.one VendorUser(data[0] and data[1])

			 */
			break;
			
			case "PC60 - Submit Incomplete Vendor Product Cost Sheet":
			TC_16_SubmitIncompleteVendorProductCostSheet(data);
			/*Pre-req
			 * 1.Existing Assortment Product(data[155])
               2.One External Vendor Source Should Have Been Added(data[156]) for a Season(data[3]) with Approved State
               3.Specification Should Have been added( it will be Selected Through index , not required Excel Data)
               4.Colorway Should Have ben added(data[160])
               5.Add Retail Item Colorway1(data[171])
               6.Add Retail Item Colorway2(data[265])
               7.Admin User(data[0] and Data[1])
               8.Vendor User(dat[220] and data[221])
               9.Assortment/Solid Should Have an BOM
               */
			break;
			
			
			case "PC78 - Compare Vendor Product Cost Sheets":
			TC_17_CompareVendorProductCostSheet(data);
			/*Vendor User(data[0] and data[1]
			 *Existing Assortment Product(data[155])with source(data[156]) with two Cost Sheets and One is mentioned in  data[165])
			 *One What If Cost Sheet
			 */
			break;
			
			case "PC79 - Compare Vendor Retail Item Cost Sheets":
			TC_18_CompareVendorRetailtemCostSheets(data);
			break;	
			
			case "PC35 - Create Internal Product Cost Sheet":
			TC_19_CreateInternalProductCostSheet(data);
			/*Costing User(data[0] and data[1]
			 *Existing Assortment Product(data[155]) with source(data[156])
			 *Copy/Link Retail Item Product
			 *7 Retail Item color way should Have Configured with cost Sheet (cost Sheet Status Should Also been entered in excel data) from data[277] to data[283]) and Cost Sheets Should be Primary
			 *Assortment/Solid Weighted Averaage(USD) Value Should be configured manually in data[292]
			 *Assortment/Solid Weighted Averaage Should be configured manually in data[296]
			 */
			break;
			
			case "PC37 - Update Primary Flag for Internal Retail Item Cost Sheet":
			TC_20_UpdatePrimaryFlagForInternalRetailItemCostSheet(data);
			/*Pre-Req:
			 * 1.Existing Retail Item Prod( data[155])
			 * 2.Colorway(data[160])
			 * 3. Retail Item Internal Cost Sheets SHould Have Been created(data[300] to data[303])
			 * One What If Cost Sheet SHould Have Been Created(no Place for Excel data)
			 * Costing user(data[0] and data[1])
			 */
			
			break;
			
			case "PC40 - Update Contents Table for Vendor Product Cost Sheet":
			TC_21_UpdateContentTableForVendorProductCostSheet(data);
			/*Vendor User(data[0] and data[1])
			 * one Existing Assortment/Solid Product(data[155]) wth external Source(data[156]) with cost Sheet and below Retail Item Added
			 * one Retail Item Product Should have been added with cost sheet(data[154]) with associated Cost Sheet with Primary Check Box Checked
			 * Assortment/SOlid Cost Sheet(data[300])
			 * Retail Item Cost SHeet(data[301])
			 */
			break;
			
			case "PC39 - Update Contents Table for Internal Product Cost Sheet":
			TC_22_UpdateContentTableForInternalProductCostSheet(data);
			/*Costing user(data[0] and data[1]
			 * Existing Assortment/Solid Product[155]with cost Sheet and below Retail Item Added
			 * Internal Source[156]
			 * one Retail Item Product Should have been added with cost sheet(data[154]) with associated Cost Sheet with Primary Check Box Checked
			 * Assortment/SOlid Cost Sheet(data[300])
			 * Retail Item Cost SHeet(data[301])
			 */
			break;
			
			case "PC20 - Create RFQ":
			TC_23_CreateRFQ(data);
			/*Pre-Req
			 * //Costing user(data[0] data[1])
               //Existing Assortment Product(data[155] with source[156])
               //Retail item Associated(data[154]) with assortment with cost sheet Primary
               //External Source(data[159])
               //Vendor user(data[220],data[221])
               //Colorway should Present(data[160])
               //Retail Item should have Been added(data[171])
              //Engineer user added(data[275])
             //Specification data[318]

			 */
			break;
			
			case "PC45 - Save Contents Table for Internal Product Cost Sheet":
			TC_24_SaveContentsTableforInternalProductCostSheet(data);
			/*Pre-req
			*Admin user(data[0] data[1])
			**/
			break;
			
			case "PC47- Associate BOM to Internal Product Cost Sheet":
			TC_25_AssociateBOMToInternalProductCostSheet(data);
			/*Pre-req
			 * 1.Adminuser(data[0] and Data[1])
               2.Existing Assortment Product(data[155]) with Source(data[156]) with costsheet(Below Created BOM Associated)
               3.BOM SHould Have Been Created for This Product(data[389])*/
			
			break;
			
			case "PC57 - Validate BOM Changes on Vendor Product Cost Sheet":
			TC_26_ValidateBOMChangesOnVendorProductCostSheet(data);
			/*Pre-req
			 * 1.Vendorsuer(data[0] and data[1])
               2.Assortmet/Sold Prod(data[155]) with source(data[156)
               3.Assortment/SOlid Product Must have BOm with values Pipulated
               4.Assortment/Solid Must have Cost Sheet with above Associated BOM
               */
			break;
			
			case "PC58 - Validate BOM Changes on Vendor Retail Item Cost Sheet":
			TC_27_ValidateBOMChangesOnVendorRetailItemCostSheet(data);
			/*Pre-req
			 * 1.Vendorsuer(data[0] and data[1])
               2.Retail Item Prod(data[155]) with source(data[156)
               3.Assortment/SOlid Product Must have BOm with values Populated
               4.Assortment/Solid Must have Cost Sheet with above Associated BOM
               */
			break;
			
			case "PC36 - Create Vendor Product Cost Sheet":
			TC_28_CreateVendorProductCostSheet(data);
			/*PC_36
			Pre-Req:
				1.Vendoruser(data[0],data[1])
				2.One Existing Assortment/Solid Product(data[155)
				3.One External Vendor Source Should Have Been Added(data[156]) for a Season(data[3]) with Approved State
				4.Specification Should Have been added( it will be Selected Through index , not required Excel Data)
				5.Factory Should Have been Added(data[159])
				6.Retail Item Should Have Beed Added associated with the assortment/SOlid Product(data[171]) with Proper Vlaues
				7.Admin User(data[220],[221])
				8.Costing user[data[273],data[274])
				9.EngineeringLeadUser(data[275],data[276])*/

			
			break;
			
			case "PC46 - Save Contents Table for What If Vendor Product Cost Sheet":
			TC_30_SaveContentsTableForWhatIfVendorProductCostSheet(data);
			/*PC_46 
			Pre_req:

			1.Add One External Source(data [453])
			2.CostingUser(data[461],data[462])
			3.VendorUser(data[220],data[221])*/

			break;
			
			case "PC33 - Create Internal Retail Item Cost Sheet":
			TC_31_CreateInternalRetailItemCostSheet(data);
			/*Pre-Requisite: One Costing user[data [0] and data[1]],Existing Retail item Product[data[154] with 'hasbro internal'[data[156] Source
			 */
			break;
			
			case "PC25 - Create Vendor Retail Item BOM - Vendor":
			TC_32_CreateVendorRetailItemBOM_Vendor(data);
			/*Pre-Requisite: One Vendor user[data [0] and data[1]],Existing Retail item Product[data[154] with 'One External Source'[data[156] and with Specification
			*/
			break;
			
			case "PC59 - System Override of Unit Ratio in Contents Table of Product Cost Sheet":
			TC_33_SystemOverrideOfUnitRatioInContentsTableOfProductCostSheet(data);
			//BadminUser(data[0] and data[1])
			break;
			
			
			case "PC81a - Internal BOM Status Updates":
			TC_34_InternalBOMStatusUpdates(data);
			
			/*Engineering user(data[0] and data[1])
			 *Assortment/Solid Product(155])with internal Product CostSHeet(BOM Should have Been Attached) and Retail Item Product(data[154]) with internal Retail item CostSHeet(BOM Should have Been Attached)
		     *Internal Source (data[156])
			 *Retail Item Color way Should Have Associated in Contents Table of Internal Product Cost Sheet 
			 * Admin user(data[220] and data[221])
			 * Retail Item Internal Cost Sheet SHould Have been Configured(data[300])
			 * Status data[556] to data[569]- no need To update
			 * Assortment cost sheet(data[301])
			 * Retail item cost sheet(data[300])
			 * Retail Item BOM Name(data [389])
			 * Asoortment BOM Name(data [570])
			 */
			break;
			
			case "PC81b - Vendor BOM Status Updates":
				TC_35_VendorBOMStatusUpdates(data);
				
				/*Admin user(data[0] and data[1])
				 *Assortment/Solid Product(155])with Vendor Product CostSHeet(BOM Should have Been Attached) and Retail Item Product(data[154]) with Vendor Retail item CostSHeet(BOM Should have Been Attached)
				 *Vendor Source (data[156])
				 *Retail Item Color way Should Have Associated in Contents Table of Vendor Product Cost Sheet 
				 * Admin user(data[220] and data[221])
				 * Retail Item Vendor Cost Sheet SHould Have been Configured(data[300])
				 * Status data[556] to data[569]- no need To update
				 * Assortment cost sheet(data[301])
				 * Retail item cost sheet(data[300])
				 * Retail Item BOM Name(data [389])
				 * Asoortment BOM Name(data [570])
				 */
				break;
			
			case "M01 - View Line Sheet":
			TC_28_viewLineSheet(data);
			break;
			
			
			
			
		    default:
			fail=true;
			log.info("Default is executed");
			
			}
		}
	   catch(Throwable t){
			fail=true;
			log.error(t);
			ErrorUtil.addVerificationFailure(t);
			
		}	
	}
	public static boolean TC_35_VendorBOMStatusUpdates(String [] data) throws Exception{
		try{
	        CreateTabs_Vendor(data);
			//Opening 4 tabs 
			 NavigateToCostSheetsAndBOM(data);
			//Navigating to cost sheets and BOM
			 AssertionVerificationOfVendorBOMUpdates(data);
			 //Assertion Verification of Vendor BOM Updated
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC81b - Vendor BOM Status Updates TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC81b - Vendor BOM Status Updates TEST CASE FAILED.PLEASE CHECK");
			     }
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in TC_35_VendorBOMStatusUpdates"+e);
				throw e;
			}
			return true;
		}
	
	public static boolean TC_34_InternalBOMStatusUpdates(String [] data) throws Exception{
		try{
	
			OpenNewTabs(data);
			//Opening 4 tabs 
			navigateToProduct(data);
			//Navigating to product page
		    SearchProduct_RetailItem(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTabThroughSidebar(data);
			//Navigate to Costing through Side Bar
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SelectCostSheet1VendorUser(data);
			//Selecting the Cost SHeet
			AssertionVerificationCostSheetandBOMStatusBeforeandAfterUpdate_RetailItem(data);
			//Assertion verification on cost sheet status
			OpenAssortmentProduct(data);
			//Open the Assortment Product
			OpenProduct_BOM(data);
			//Open Product BOM
			AssertionVerificationOfProductBOM_RISheet_RIBOM_BasedOnProductCostUpdation_InEnineeringUser(data);
			//AssertionVerificationOfProductBOM,RISheet,RIBOM,BasedOnProductCostUpdation in engineering user
			LogOutAndAdminLogin(data);
			//Log out and Log in as Admin user
            NavigateToCostSheetsAndBOM(data);
			//Navigating to cost sheets and BOM
			AssertionVerificationOfProductBOM_RISheet_RIBOM_BasedOnProductCostUpdation_InAdminUser(data);
			//AssertionVerificationOfProductBOM,RISheet,RIBOM,BasedOnProductCostUpdation in Admin user
			
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC81a - Internal BOM Status Updates TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC81a - Internal BOM Status Updates TEST CASE FAILED.PLEASE CHECK");
			     }
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in TC_34_InternalBOMStatusUpdates"+e);
				throw e;
			}
			return true;
		}
	
	public static Boolean LogOutAndAdminLogin(String [] data) throws Exception{
		try{
			driver.switchTo().window(newTab1.get(0));
			driver.close();
			driver.switchTo().window(newTab1.get(1));
			driver.close();
			driver.switchTo().window(newTab1.get(2));
			driver.close();
			driver.switchTo().window(newTab1.get(3));
			driver.close();
			openBrowser();
			//Open Browser
			launchApp(data[220],data[221]);
			//Log in with admin
			
	        ((JavascriptExecutor)driver).executeScript("window.open()");
	        log.info("Tab Number-4 Created");
	        ((JavascriptExecutor)driver).executeScript("window.open()");
	        log.info("Tab Number-3 Created");
	        ((JavascriptExecutor)driver).executeScript("window.open()");
	        log.info("Tab Number-2 Created");
				newTab1 = new ArrayList<String>(driver.getWindowHandles());
			
			    log.info(newTab1.get(0));
			    log.info(newTab1.get(1));
			    log.info(newTab1.get(2));
			    log.info(newTab1.get(3));
			
			driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
		    launchApp(data[220],data[221]);
			//Log in with admin
			driver.switchTo().window(newTab1.get(2));
			//Switch to Fourth tab
			launchApp(data[220],data[221]);
			//Log in with admin
			driver.switchTo().window(newTab1.get(1));
			//Switch to Third tab
			launchApp(data[220],data[221]);
			//Log in with admin
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in LogOutAndAdminLogin"+e);
			throw e;
		}
		return true;
	}
	
	public static Boolean CreateTabs_Vendor(String [] data) throws Exception{
		try{
		
			
	        ((JavascriptExecutor)driver).executeScript("window.open()");
	        log.info("Tab Number-4 Created");
	        ((JavascriptExecutor)driver).executeScript("window.open()");
	        log.info("Tab Number-3 Created");
	        ((JavascriptExecutor)driver).executeScript("window.open()");
	        log.info("Tab Number-2 Created");
				newTab1 = new ArrayList<String>(driver.getWindowHandles());
			
			    log.info(newTab1.get(0));
			    log.info(newTab1.get(1));
			    log.info(newTab1.get(2));
			    log.info(newTab1.get(3));
			
			driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
		    launchApp(data[0],data[1]);
			//Log in with admin
			driver.switchTo().window(newTab1.get(2));
			//Switch to Fourth tab
			launchApp(data[0],data[1]);
			//Log in with admin
			driver.switchTo().window(newTab1.get(1));
			//Switch to Third tab
			launchApp(data[0],data[1]);
			//Log in with admin
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in LogOutAndAdminLogin_Vendor"+e);
			throw e;
		}
		return true;
	}
	public static boolean NavigateToCostSheetsAndBOM(String [] data) throws Exception{
		try{
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			//Navigate To Internal Product Cost Sheet
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct1(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTabThroughSidebar(data);
			//Navigate to Costing through Side Bar
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SelectCostSheet1_adminuser(data);
			//Select Cost Sheet1
			
			//Navigate to Internal Product Cost Sheet
			driver.switchTo().window(newTab1.get(3));
			//Switch to Second tab
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct1(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			navigateToMaterialTabThroughSideBar(data);
			//Navigate To materials tab
			
			//Navigate To Retail Item Internal Cost Sheet
			driver.switchTo().window(newTab1.get(2));
			//Switch to Third tab
			navigateToProduct(data);
			//Navigating to product page
		    SearchProduct_RetailItem(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTabThroughSidebar(data);
            wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetUpdateButton));
            CommonFunctions.clickButtonOrLink(CostSheetUpdateButton, "DropDown", "CostSheetUpdateButton");
			//Navigate to Costing through Side Bar
			//CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			//SelectCostSheet1VendorUser(data);
			//Selecting the Cost SHeet
			
			//Navigate To Retail Item BOM
			driver.switchTo().window(newTab1.get(1));
			//Switch to Fourth tab
			navigateToProduct(data);
			//Navigating to product page
		    SearchProduct_RetailItem(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			navigateToMaterialTabThroughSideBar(data);
			//Navigate To materials tab
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToCostSheetsAndBOM"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean AssertionVerificationOfProductBOM_RISheet_RIBOM_BasedOnProductCostUpdation_InEnineeringUser(String [] data) throws Exception{
		try{
			//2-Product CostSheet-update
			//1-Product BOM,
			//1-RI Cost Sheet
			//3-RI BOM
			driver.switchTo().window(newTab1.get(2));
			//Switch to Third tab
			  NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToCostSheet(data);
			 //Going to Cost SHeet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[556], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("*** Validate the status of the Internal Product Cost sheet is at "+ActualValue+" - Validated ***");
			driver.switchTo().window(newTab1.get(3));
			//Switch to Third tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToProductBOM(data);
			//Going to Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[556], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("*** Validate the status of the Internal Product BOM is at "+ActualValue+" - Validated ***");
			driver.switchTo().window(newTab1.get(2));
			//Switch to Third tab
			  NavigateToContentFrame(data);
			//Navigating to content Frame
			 ApproveInternalCostSheet(data);
			 //Approve Internal cost sheet
			 
			 //First Set Validation
			 driver.switchTo().window(newTab1.get(1));
			//Switch to Third tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToProductBOM(data);
			//Going to Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 
			 driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			GoToCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[557], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 
			driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			GoToRetailItemBOM(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** 1. Internal Product BOM Status: RELEASED 2. Internal Retail Item Cost Sheet Status: APPROVED 3. Internal Retail Item BOM status: RELEASED- validated *****");
		
			driver.switchTo().window(newTab1.get(2));
			//Switch to Third tab
			  NavigateToContentFrame(data);
			//Navigating to content Frame 
			InWorkInternalCostSheet(data);
			//Change Cost SHeet in to Inwork
			
			//Second Set validation
			 driver.switchTo().window(newTab1.get(1));
				//Switch to Third tab
				NavigateToContentFrame(data);
				//Navigating to content Frame
				GoToProductBOM(data);
				//Going to Product BOM
				CommonFunctions.AssertEqualsVerification(ActualValue, data[563], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				 
				 driver.switchTo().window(newTab1.get(0));
				//Switch to First tab
				GoToCostSheet(data);
				 //Go to Cost Sheet
				CommonFunctions.AssertEqualsVerification(ActualValue, data[557], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				 
				driver.switchTo().window(newTab1.get(3));
				//Switch to First tab
				GoToRetailItemBOM(data);
				 //Go to Cost Sheet
				CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				log.info("***** 1. Internal Product BOM Status: RELEASED 2. Internal Retail Item Cost Sheet Status: APPROVED 3. Internal Retail Item BOM status: RELEASED- validated *****");
			 
			
		}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in AssertionVerificationOfProductBOM_RISheet_RIBOM_BasedOnProductCostUpdation"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerificationOfProductBOM_RISheet_RIBOM_BasedOnProductCostUpdation_InAdminUser(String [] data) throws Exception{
		try{
			//2-Product CostSheet-update
			//1-Product BOM,
			//1-RI Cost Sheet
			//3-RI BOM
			 driver.switchTo().window(newTab1.get(2));
				//Switch to First tab
				NavigateToContentFrame(data);
				//Navigating to content Frame
				GoToCostSheet(data);
				 //Go to Cost Sheet
				CommonFunctions.AssertEqualsVerification(ActualValue, data[557], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				 
				driver.switchTo().window(newTab1.get(1));
				//Switch to First tab
				NavigateToContentFrame(data);
				//Navigating to content Frame
				GoToRetailItemBOM(data);
				 //Go to Cost Sheet
				CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				log.info("***** 1. Internal Retail Item Cost Sheet Status: APPROVED 2. Internal Retail Item BOM status: RELEASED- validated *****");
				
				
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToCostSheet(data);
			 //Going to Cost SHeet
			 CancelInternalCostSheet(data);
			 //Cancel the Internal Product Cost SHeet
			 //First Set Validation
			 driver.switchTo().window(newTab1.get(3));
				//Switch to Third tab
				NavigateToContentFrame(data);
				//Navigating to content Frame
				GoToProductBOM(data);
				//Going to Product BOM
				CommonFunctions.AssertEqualsVerification(ActualValue, data[566], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				 
				 driver.switchTo().window(newTab1.get(2));
				//Switch to First tab
				GoToCostSheet(data);
				 //Go to Cost Sheet
				CommonFunctions.AssertEqualsVerification(ActualValue, data[557], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				 
				driver.switchTo().window(newTab1.get(1));
				//Switch to First tab
				GoToRetailItemBOM(data);
				 //Go to Cost Sheet
				CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				log.info("***** 1. Internal Product BOM Status: CANCELED 2. Internal Retail Item Cost Sheet Status: APPROVED 3. Internal Retail Item BOM status: RELEASED- validated *****");
			  
				driver.switchTo().window(newTab1.get(0));
				//Switch to First tab
				NavigateToContentFrame(data);
				//Navigating to content Frame
				 GoToCostSheet(data);
				 //Going to Cost SHeet
				ApproveInternalCostSheet(data);
				//Approve The Internal Cost Sheet
				
				//Second Set validations
				driver.switchTo().window(newTab1.get(3));
				//Switch to Third tab
				NavigateToContentFrame(data);
				//Navigating to content Frame
				GoToProductBOM(data);
				//Going to Product BOM
				CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				 
				 driver.switchTo().window(newTab1.get(2));
				//Switch to First tab
				 NavigateToContentFrame(data);
				//Navigating to content Frame
				GoToCostSheet(data);
				 //Go to Cost Sheet
				CommonFunctions.AssertEqualsVerification(ActualValue, data[557], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				 
				driver.switchTo().window(newTab1.get(1));
				//Switch to First tab
				NavigateToContentFrame(data);
				//Navigating to content Frame
				GoToRetailItemBOM(data);
				 //Go to Cost Sheet
				CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
				//Assertion verification
				log.info("***** 1. Internal Product BOM Status: RELEASED 2. Internal Retail Item Cost Sheet Status: APPROVED 3. Internal Retail Item BOM status: RELEASED- validated *****");
				
				driver.switchTo().window(newTab1.get(0));
				//Switch to First tab
				NavigateToContentFrame(data);
				//Navigating to content Frame
				 GoToCostSheet(data);
				 //Going to Cost SHeet
				 InWorkInternalCostSheet(data);
				 //Cancel the Internal Product Cost SHeet
				 //Third Set Validation
				 driver.switchTo().window(newTab1.get(3));
					//Switch to Third tab
					NavigateToContentFrame(data);
					//Navigating to content Frame
					GoToProductBOM(data);
					//Going to Product BOM
					CommonFunctions.AssertEqualsVerification(ActualValue, data[563], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
					//Assertion verification
					 
					 driver.switchTo().window(newTab1.get(2));
					//Switch to First tab
					 NavigateToContentFrame(data);
						//Navigating to content Frame
					GoToCostSheet(data);
					 //Go to Cost Sheet
					CommonFunctions.AssertEqualsVerification(ActualValue, data[557], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
					//Assertion verification
					 
					driver.switchTo().window(newTab1.get(1));
					//Switch to First tab
					NavigateToContentFrame(data);
					//Navigating to content Frame
					GoToRetailItemBOM(data);
					 //Go to Cost Sheet
					CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
					//Assertion verification
					log.info("***** 1. Internal Product BOM Status: CANCELED 2. Internal Retail Item Cost Sheet Status: APPROVED 3. Internal Retail Item BOM status: RELEASED- validated *****");
			
				//making into Defaults
					driver.switchTo().window(newTab1.get(2));
					//Switch to First tab
					NavigateToContentFrame(data);
					//Navigating to content Frame
					InWorkInternalCostSheet(data);
					//Making the Status Into InWork
					
		}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in AssertionVerificationOfProductBOM_RISheet_RIBOM_BasedOnProductCostUpdation"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean AssertionVerificationOfVendorBOMUpdates(String [] data) throws Exception{
		try{
			//First Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[556], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[556], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[556], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[556], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = In work Browser 2: Vendor Product BOM Status = In work Browser 3: Vendor Retail Item Cost sheet Status = In Work Browser 4: Vendor Retail Item BOM Status = In Work - Validated *****");
			
			//Second Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			ReadyForReviewVendorCostSheet(data);
			//Making into Ready For Review Status
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[566], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[557], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[566], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = Ready For Review Browser 2: Vendor Product BOM Status = Ready For Review Browser 3: Vendor Retail Item Cost sheet Status = Ready For Review Browser 4: Vendor Retail Item BOM Status = Ready For Review - Validated *****");
			
			
			//Third Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			UnderReviewVendorCostSheet(data);
			//Making into Ready For Review Status
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[558], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[558], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[558], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = Under Review Browser 2: Vendor Product BOM Status = Under Review Browser 3: Vendor Retail Item Cost sheet Status = Under Review Browser 4: Vendor Retail Item BOM Status = Under Review - Validated *****");
			
			
			//Fourth Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			VendorSelectionQuoteVendorCostSheet(data);
			//Making into Ready For Review Status
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[558], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[559], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[558], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = Vendor Selection Quote Browser 2: Vendor Product BOM Status = Under Review Browser 3: Vendor Retail Item Cost sheet Status = Vendor Selection Quote Browser 4: Vendor Retail Item BOM Status = Under Review - Validated *****");
			
			//Fifth Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			InWorkInternalCostSheet(data);
			//Making into Ready For Review Status
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[556], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[556], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[556], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = In Work Browser 2: Vendor Product BOM Status = In Work Browser 3: Vendor Retail Item Cost sheet Status = In Work Browser 4: Vendor Retail Item BOM Status = In Work - Validated *****");
			
			
			//Sixth Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			SG4AppprovedVendorCostSheet(data);
			//Making into SG4Aproved Status
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[558], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[560], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[558], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = SG4 Approved Browser 2: Vendor Product BOM Status = Under Review Browser 3: Vendor Retail Item Cost sheet Status = SG4 Approved Browser 4: Vendor Retail Item BOM Status = Under Review - Validated *****");
			
			
			//Seventh Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			InWorkInternalCostSheet(data);
			//Making into SG4Aproved Status
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[556], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[560], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[558], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = In Work Browser 2: Vendor Product BOM Status = In Work Browser 3: Vendor Retail Item Cost sheet Status = SG4 Approved Browser 4: Vendor Retail Item BOM Status = Under Review - Validated *****");
			
			
			//Eighth Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			FEPApprovedVendorCostSheet(data);
			//Making into SG4Aproved Status
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[561], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = FEP Approved Browser 2: Vendor Product BOM Status = Released Browser 3: Vendor Retail Item Cost sheet Status = FEPApproved Browser 4: Vendor Retail Item BOM Status = Released - Validated *****");
			
			//Ninth Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			InWorkInternalCostSheet(data);
			//Making into In work Status
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[561], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = In Work Browser 2: Vendor Product BOM Status = Released Browser 3: Vendor Retail Item Cost sheet Status = FEPApproved Browser 4: Vendor Retail Item BOM Status = Released - Validated *****");
			
			//Tenth Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			SeasonalReviewApprovedVendorCostSheet(data);
			//Making into Seasonal Review Approved Status
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[562], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = Seasonal Review Approved Browser 2: Vendor Product BOM Status = Released Browser 3: Vendor Retail Item Cost sheet Status = Seasonal Review Approved Browser 4: Vendor Retail Item BOM Status = Released - Validated *****");
			
			//eleventh Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			InWorkInternalCostSheet(data);
			//Making into In Work
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[562], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = In Work Browser 2: Vendor Product BOM Status = Released Browser 3: Vendor Retail Item Cost sheet Status = Seasonal Review Approved Browser 4: Vendor Retail Item BOM Status = Released - Validated *****");
			
			
			//Twelvth Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			RejectedVendorCostSheet(data);
			//Making into Rejected
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[562], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = Rejected Browser 2: Vendor Product BOM Status = Released Browser 3: Vendor Retail Item Cost sheet Status = Seasonal Review Approved Browser 4: Vendor Retail Item BOM Status = Released - Validated *****");
			
			
			//Thirteenth Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			InWorkInternalCostSheet(data);
			//Making into In Work
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[562], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = In Work Browser 2: Vendor Product BOM Status = Released Browser 3: Vendor Retail Item Cost sheet Status = Seasonal Review Approved Browser 4: Vendor Retail Item BOM Status = Released - Validated *****");
			
			//Thirteenth Set Validation
			driver.switchTo().window(newTab1.get(0));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CancelledVendorCostSheet(data);
			//Making into In Work
		   
			 driver.switchTo().window(newTab1.get(3));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorBOM(data);
			 //Go to Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			driver.switchTo().window(newTab1.get(2));
			//Switch to First tab
			NavigateToContentFrame(data);
			//Navigating to content Frame
			GoToVendorCostSheet(data);
			 //Go to Cost Sheet
			CommonFunctions.AssertEqualsVerification(ActualValue, data[562], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			 driver.switchTo().window(newTab1.get(1));
			//Switch to First tab
			 NavigateToContentFrame(data);
			//Navigating to content Frame
			 GoToVendorRetailItemBOM(data);
			 //Navigating the Vendor Product BOM
			CommonFunctions.AssertEqualsVerification(ActualValue, data[564], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
			//Assertion verification
			log.info("***** Browser 1: Vendor Product Cost sheet  Status = Cancelled Browser 2: Vendor Product BOM Status = Released Browser 3: Vendor Retail Item Cost sheet Status = Seasonal Review Approved Browser 4: Vendor Retail Item BOM Status = Released - Validated *****");
		}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in AssertionVerificationOfProductBOM_RISheet_RIBOM_BasedOnProductCostUpdation"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean ApproveInternalCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[557]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in ApproveInternalCostSheet"+e);
		throw e;
	}
		return true;
	}
	public static boolean CancelInternalCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[559]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in CancelInternalCostSheet"+e);
		throw e;
	}
		return true;
	}
	
	public static boolean InWorkInternalCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[556]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in ApproveInternalCostSheet"+e);
		throw e;
	}
		return true;
	}
	
	public static boolean CancelledVendorCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[563]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in CancelledVendorCostSheet"+e);
		throw e;
	}
		return true;
	}
	
	public static boolean RejectedVendorCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[565]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in RejectedVendorCostSheet"+e);
		throw e;
	}
		return true;
	}
	public static boolean SeasonalReviewApprovedVendorCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[562]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in SeasonalReviewApprovedVendorCostSheet"+e);
		throw e;
	}
		return true;
	}
	public static boolean FEPApprovedVendorCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[561]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in FEPApprovedVendorCostSheet"+e);
		throw e;
	}
		return true;
	}
	public static boolean SG4AppprovedVendorCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[560]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in SG4AppprovedVendorCostSheet"+e);
		throw e;
	}
		return true;
	}
	
	public static boolean UnderReviewVendorCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[558]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in UnderReviewVendorCostSheet"+e);
		throw e;
	}
		return true;
	}
	public static boolean VendorSelectionQuoteVendorCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[559]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in VendorSelectionQuoteVendorCostSheet"+e);
		throw e;
	}
		return true;
	}
	public static boolean ReadyForReviewVendorCostSheet(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions5=dropdDown5.getOptions();
	        for(int i=0;i<allOptions5.size();i++){
			     String RequiredValue=allOptions5.get(i).getText();
			    // System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[179]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        wait.until(ExpectedConditions.titleIs(data[335]));
	        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
		     List<WebElement> allOptions2=dropdDown1.getOptions();
	         for(int i=0;i<allOptions2.size();i++){
			     String RequiredValue=allOptions2.get(i).getText();
			    // System.out.println(RequiredValue);
			     
			     if(RequiredValue.contains(data[557]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
			     }
	        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
	        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
	        wait.until(ExpectedConditions.titleIs(data[144]));
	        CommonFunctions.waitForPageLoaded();
	        
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in ReadyForReviewVendorCostSheet"+e);
		throw e;
	}
		return true;
	}
	public static boolean OpenProduct_BOM(String [] data) throws Exception{
		try{
			driver.switchTo().window(newTab1.get(1));
			//Navigating to Tab3
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct1(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			navigateToMaterialTabThroughSideBar(data);
			//Navigate To materials tab
		}
		catch(Exception e)
		{
			fail=true;
			log.error("OpenProduct_BOM"+e);
			throw e;
		}
		return true;
	}
	public static boolean OpenAssortmentProduct(String [] data) throws Exception{
		try{
			driver.switchTo().window(newTab1.get(2));
			//Navigating to Tab3
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct1(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTabThroughSidebar(data);
			//Navigate to Costing through Side Bar
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SelectCostSheet1(data);
			//Select Cost Sheet1
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in OpenAssortmentProduct"+e);
			throw e;
		}
		return true;
	}
	
	
	
	
	public static boolean OpenNewTabs(String [] data) throws Exception{
		try{
	
			String Parent_WIndow = driver.getWindowHandle();
			System.out.println(Parent_WIndow);
			
        ((JavascriptExecutor)driver).executeScript("window.open()");
        log.info("Tab Number-4 Created");
        ((JavascriptExecutor)driver).executeScript("window.open()");
        log.info("Tab Number-3 Created");
        ((JavascriptExecutor)driver).executeScript("window.open()");
        log.info("Tab Number-2 Created");
			newTab1 = new ArrayList<String>(driver.getWindowHandles());
		
		    log.info(newTab1.get(0));
		    log.info(newTab1.get(1));
		    log.info(newTab1.get(2));
		    log.info(newTab1.get(3));
		
			driver.switchTo().window(newTab1.get(1));
			log.info("Swithched to Second Tab");
			launchApp(data[0],data[1]);
			//Launch  App
			CommonFunctions.waitForPageLoaded();
			driver.switchTo().window(newTab1.get(2));
			log.info("Swithched to Third Tab");
			launchApp(data[0],data[1]);
			//Launch  App
			
			driver.switchTo().window(newTab1.get(3));
			log.info("Swithched to Fourth Tab");
			launchApp(data[0],data[1]);
			//Launch  App
			navigateToProduct(data);
			//Navigating to product page
		    SearchProduct_RetailItem(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			navigateToMaterialTabThroughSideBar(data);
			//Navigate To materials tab
			
			CommonFunctions.waitForPageLoaded();
			driver.switchTo().window(newTab1.get(0));
			log.info("Swithched to First Tab");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in OpenNewTabs"+e);
			throw e;
		}
		return true;
		
	}
	
	
	public static boolean GoToProductBOM(String [] data) throws Exception{
		try{
		
		    navigateToMaterialTabThroughSideBar(data);
		    CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(BOMid);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='bomId']")));
			List<WebElement> allOptions1=dropdDown.getOptions();
	        for(int i=0;i<allOptions1.size();i++){
			     String RequiredValue=allOptions1.get(i).getText();
			     //System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[570]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMid, RequiredValue, "BOM Id selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
	       }
	        wait.until(ExpectedConditions.visibilityOfElementLocated(HeaderAttributesPlusIcon));
	        CommonFunctions.clickButtonOrLink(HeaderAttributesPlusIcon, "Image", "HeaderAttributesPlusIcon");
	        //Clicking on Header Attribute + Icon
	        CommonFunctions.waitForPageLoaded();
	        CommonFunctions.waitForElementTobeClickable(InternalBOMStatus);
	        GettingText(InternalBOMStatus);
			
		}
		catch(Exception e){
		      fail=true;
		      log.error("Exception in GoToProductBOM"+e);
		      throw e;
		}
		return true;
	}
	public static boolean GoToVendorBOM(String [] data) throws Exception{
		try{
		
		    navigateToMaterialTabThroughSideBar(data);
			CommonFunctions.waitForElementTobeClickable(BOMid);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='bomId']")));
			List<WebElement> allOptions1=dropdDown.getOptions();
	        for(int i=0;i<allOptions1.size();i++){
			     String RequiredValue=allOptions1.get(i).getText();
			     //System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[570]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMid, RequiredValue, "BOM Id selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
	       }
	        wait.until(ExpectedConditions.visibilityOfElementLocated(HeaderAttributesPlusIcon));
	        CommonFunctions.clickButtonOrLink(HeaderAttributesPlusIcon, "Image", "HeaderAttributesPlusIcon");
	        //Clicking on Header Attribute + Icon
	        CommonFunctions.waitForPageLoaded();
	        CommonFunctions.waitForElementTobeClickable(VendorBOMStatus);
	        GettingText(VendorBOMStatus);
			
		}
		catch(Exception e){
		      fail=true;
		      log.error("Exception in GoToProductBOM"+e);
		      throw e;
		}
		return true;
	}
	public static boolean GoToRetailItemBOM(String [] data) throws Exception{
		try{
		
		    navigateToMaterialTabThroughSideBar(data);
		    CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(BOMid);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='bomId']")));
			List<WebElement> allOptions1=dropdDown.getOptions();
	        for(int i=0;i<allOptions1.size();i++){
			     String RequiredValue=allOptions1.get(i).getText();
			     //System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[389]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMid, RequiredValue, "BOM Id selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
	       }
	        wait.until(ExpectedConditions.visibilityOfElementLocated(HeaderAttributesPlusIcon));
	        CommonFunctions.clickButtonOrLink(HeaderAttributesPlusIcon, "Image", "HeaderAttributesPlusIcon");
	        //Clicking on Header Attribute + Icon
	        CommonFunctions.waitForPageLoaded();
	        CommonFunctions.waitForElementTobeClickable(InternalBOMStatus);
	        GettingText(InternalBOMStatus);
			
		}
		catch(Exception e){
		      fail=true;
		      log.error("Exception in GoToRetailItemBOM"+e);
		      throw e;
		}
		return true;
	}
	public static boolean GoToVendorRetailItemBOM(String [] data) throws Exception{
		try{
		
		    navigateToMaterialTabThroughSideBar(data);
		    CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(BOMid);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='bomId']")));
			List<WebElement> allOptions1=dropdDown.getOptions();
	        for(int i=0;i<allOptions1.size();i++){
			     String RequiredValue=allOptions1.get(i).getText();
			     //System.out.println(RequiredValue);
			     if(RequiredValue.contains(data[389]))
			     {
			     CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMid, RequiredValue, "BOM Id selection");
			     CommonFunctions.waitForPageLoaded();
			     break;
			     }
	       }
	        wait.until(ExpectedConditions.visibilityOfElementLocated(HeaderAttributesPlusIcon));
	        CommonFunctions.clickButtonOrLink(HeaderAttributesPlusIcon, "Image", "HeaderAttributesPlusIcon");
	        //Clicking on Header Attribute + Icon
	        CommonFunctions.waitForPageLoaded();
	        CommonFunctions.waitForElementTobeClickable(VendorBOMStatus);
	        GettingText(VendorBOMStatus);
			
		}
		catch(Exception e){
		      fail=true;
		      log.error("Exception in GoToRetailItemBOM"+e);
		      throw e;
		}
		return true;
	}
	public static boolean GoToCostSheet(String [] data) throws Exception{
		try{
		    NavigateToCostSheetThroughSideBar(data);
			//Navigating to Costing side Bar
			GettingText(CostSheetStatus);
			//Getting the Text
		}
		catch(Exception e){
		      fail=true;
		      log.error("Exception in GoToCostSheet"+e);
		      throw e;
		}
		return true;
	}
	public static boolean GoToVendorCostSheet(String [] data) throws Exception{
		try{
		    NavigateToCostSheetThroughSideBar(data);
			//Navigating to Costing side Bar
		    
			GettingText(VendorCostSheetStatus);
			
		}
		catch(Exception e){
		      fail=true;
		      log.error("Exception in GoToVendorCostSheet"+e);
		      throw e;
		}
		return true;
	}
	public static boolean AssertionVerificationCostSheetandBOMStatusBeforeandAfterUpdate_RetailItem(String [] data) throws Exception{
		try{
			for(int k =0,s=1;k<7;k++,s++){
				
		GettingText(CostSheetStatus);
		CommonFunctions.AssertEqualsVerification(ActualValue, data[556+k], "Actual and expected Cost SHeet Status Are not Matched.Assertion Failed.Please Verify");
		//Assertion verification
		log.info("*** Validate the status of the Internal Retail Item Cost sheet is at "+ActualValue+" - Validated ***");
	    driver.switchTo().window(newTab1.get(3));
	    navigateToMaterialTabThroughSideBar(data);
	    CommonFunctions.waitForPageLoaded();
		CommonFunctions.waitForElementTobeClickable(BOMid);
		Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='bomId']")));
		List<WebElement> allOptions1=dropdDown.getOptions();
        for(int i=0;i<allOptions1.size();i++){
		     String RequiredValue=allOptions1.get(i).getText();
		     //System.out.println(RequiredValue);
		     if(RequiredValue.contains(data[389]))
		     {
		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMid, RequiredValue, "BOM Id selection");
		     CommonFunctions.waitForPageLoaded();
		     break;
		     }
       }
        wait.until(ExpectedConditions.visibilityOfElementLocated(HeaderAttributesPlusIcon));
        CommonFunctions.clickButtonOrLink(HeaderAttributesPlusIcon, "Image", "HeaderAttributesPlusIcon");
        //Clicking on Header Attribute + Icon
        CommonFunctions.waitForPageLoaded();
        CommonFunctions.waitForElementTobeClickable(InternalBOMStatus);
        GettingText(InternalBOMStatus);
        CommonFunctions.AssertEqualsVerification(ActualValue, data[563+k], "Actual and expected BOM Are not Matched.Assertion Failed.Please Verify");
		log.info("*** Validate the status of the Internal Retail Item BOM is at "+ActualValue+" - Validated ***");
		//Assertion verification
		if(s==7){
			break;
		}
		else{
        driver.switchTo().window(newTab1.get(0));
	    NavigateToContentFrame(data);
        CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
		Select dropdDown5 = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
	     List<WebElement> allOptions5=dropdDown5.getOptions();
        for(int i=0;i<allOptions5.size();i++){
		     String RequiredValue=allOptions5.get(i).getText();
		    // System.out.println(RequiredValue);
		     if(RequiredValue.contains(data[179]))
		     {
		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
		     CommonFunctions.waitForPageLoaded();
		     break;
		     }
		     }
        wait.until(ExpectedConditions.titleIs(data[335]));
        CommonFunctions.waitForElementTobeClickable(CostSheetStatusDropDown);
		Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'*Cost Sheet Status')]//following::select[1]")));
	     List<WebElement> allOptions2=dropdDown1.getOptions();
         for(int i=0;i<allOptions2.size();i++){
		     String RequiredValue=allOptions2.get(i).getText();
		    // System.out.println(RequiredValue);
		     
		     if(RequiredValue.contains(data[556+s]))
		     {
		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetStatusDropDown, RequiredValue, "Status DropDown Selection");
		     CommonFunctions.waitForPageLoaded();
		     break;
		     }
		     }
        CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
        CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
        wait.until(ExpectedConditions.titleIs(data[144]));
        CommonFunctions.waitForPageLoaded();
        
			}
			}
		
		}
			catch(Exception e){
				fail=true;
				log.error("Exception in AssertionVerificationCostSheetandBOMStatusBeforeUpdate"+e);
				throw e;
			}
			return true;
		}
	
	
	
	public static boolean NavigateToContentFrame(String [] data){
		try{
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToContentFrame"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean TC_33_SystemOverrideOfUnitRatioInContentsTableOfProductCostSheet(String [] data) throws Exception{
		try{
			CreateProdFromLineSheetForSanitySuite_TC24(data);
			//Create a Product
			CreateSpecificationAndColorway(data);
			//Create a Specification and Color way
			CopyLinkProductRetailItem1(data);
			//Copy Retail Item 1
			SearchAssortmentProduct(data);
			//Searching Assortment or Solid Product
			CopyLinkProductRetailItem2(data);
			//Copy Retail Item 2
			SearchAssortmentProduct(data);
			//Searching Assortment or Solid Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			SelectColorway(data);
		    //Selecting the Colorway
			HDMTableEdit(data);
			//Adding a Retail Item A in HDM Table
			NavigateToCostingTabThroughSidebar(data);
			//Navigate to Costing through Side Bar
		    AssertionVerficationOfCostSheetTypeforWhatIf_TC_24(data);
			//Assertion Verification Of Cost Sheet Type
			CreateInternalCostSheetForAssortmentProduct(data);
			//Creating a Internal Cost Sheet
			FillColorwayAndDetailsInContentTable_TC_24(data);
			//Filling Content table and Details Value
			BlankUpdate_TC24(data);
			//Doing a Blank Update
			AssertionVerificationOnUnitRatio(data);
			//Assertion verification on Unit Ratio Values
			UpdateHDMTable(data);
			//Updating  the Colorway Ratio
			NavigateToCostingTabThroughSidebar(data);
			//Navigate to Costing through Side Bar
		    UpdateContentsTable(data);
			//Edit contents table
			AssertionVerificationOnUnitRatioafterFirstHDMUpdate(data);
			//Assertion Verification On Unit Ratio after First HDM Update
		     DeleteHDMTable(data);
			//Deleting HDM Table Values
			NavigateToCostingTabThroughSidebar(data);
			//Navigate to Costing through Side Bar
	        UpdateContentsTableSecondTime(data);
			//Edit contents table
			AssertionVerificationOnUnitRatioafterHDMTableDelete(data);
			//Assertion Verification after deleting HDM Table Values
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC59 - System Override of Unit Ratio in Contents Table of Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC59 - System Override of Unit Ratio in Contents Table of Product Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			     }
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in TC_33_SystemOverrideOfUnitRatioInContentsTableOfProductCostSheet"+e);
				throw e;
			}
			return true;
		}
	
	
	
	public static boolean AssertionVerificationOnUnitRatio(String [] data){
		try{
			CommonFunctions.waitForElementTobeClickable(UnitRatioValue1);
			GettingText(UnitRatioValue1);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[551], "Actual and Expected values of UnitRatio values are not matched.Assertion failed.Please verify");
			log.info("*** Validate Contents Table - Unit Ratio for Retail Item B-validated ***");
			
			CommonFunctions.waitForElementTobeClickable(UntiRatioValue2);
			GettingText(UntiRatioValue2);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[172], "Actual and Expected values of UnitRatio values are not matched.Assertion failed.Please verify");
			log.info("*** Validate Contents Table - Unit Ratio for Retail Item C-validated ***");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOnUnitRatio"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerificationOnUnitRatioafterFirstHDMUpdate(String [] data){
		try{
			CommonFunctions.waitForElementTobeClickable(UnitRatioValue1);
			GettingText(UnitRatioValue1);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[553], "Actual and Expected values of UnitRatio values are not matched.Assertion failed.Please verify");
			log.info("*** Validate Contents Table - Unit Ratio for Retail Item B-validated ***");
			
			CommonFunctions.waitForElementTobeClickable(UntiRatioValue2);
			GettingText(UntiRatioValue2);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[172], "Actual and Expected values of UnitRatio values are not matched.Assertion failed.Please verify");
			log.info("*** Validate Contents Table - Unit Ratio for Retail Item C-validated ***");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOnUnitRatioafterFirstHDMUpdate"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerificationOnUnitRatioafterHDMTableDelete(String [] data){
		try{
			CommonFunctions.waitForElementTobeClickable(UnitRatioValue1);
			GettingText(UnitRatioValue1);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[554], "Actual and Expected values of UnitRatio values are not matched.Assertion failed.Please verify");
			log.info("*** Validate Contents Table - Unit Ratio for Retail Item B-validated ***");
			
			CommonFunctions.waitForElementTobeClickable(UntiRatioValue2);
			GettingText(UntiRatioValue2);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[555], "Actual and Expected values of UnitRatio values are not matched.Assertion failed.Please verify");
			log.info("*** Validate Contents Table - Unit Ratio for Retail Item C-validated ***");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOnUnitRatioafterFirstHDMUpdate"+e);
			throw e;
		}
		return true;
	}
	public static boolean DeleteHDMTable(String [] data) throws Exception{
		try{
			
			driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
			CommonFunctions.waitForPageLoaded();
			By Details = By.linkText("Details");
			CommonFunctions.waitForElementTobeClickable(Details);
			CommonFunctions.clickButtonOrLink(Details, "HyperLink", "Details");
			//Clicking on Specification Link
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
		    //Navigating to Content Frame 
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			SelectColorway(data);
		    //Selecting the Colorway
			CommonFunctions.waitForElementTobeClickable(HDMTableEditButton);
			CommonFunctions.clickButtonOrLink(HDMTableEditButton, "HyperLink", "HDMTableEdit");
			wait.until(ExpectedConditions.titleIs(data[169]));
			CommonFunctions.waitForPageLoaded();
			 CommonFunctions.waitForElementTobeClickable(AddRowsButton);
			    CommonFunctions.clickButtonOrLink(AddRowsButton, "table", "AddRowsButton");
			    //Clicking Add Rows Button Ratio
			   wait.until(ExpectedConditions.visibilityOfElementLocated(AddRowTable));
			   By Delete = By.linkText("Delete");
			   CommonFunctions.waitForElementTobeClickable(Delete);
			   CommonFunctions.clickButtonOrLink(Delete, "Hyper-Link", "Delete");
			   //Clicking on Delete Button
			   CommonFunctions.handleAlertPopUp1();
		       CommonFunctions.waitForPageLoaded();
			 CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
	  		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
	  		     //Clicking Done Button
	  		     CommonFunctions.waitForPageLoaded();
	  		     wait.until(ExpectedConditions.titleIs(data[144]));
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateHDMTable"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean UpdateHDMTable(String [] data) throws Exception{
		try{
			
			driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
			CommonFunctions.waitForPageLoaded();
			By Details = By.linkText("Details");
			CommonFunctions.waitForElementTobeClickable(Details);
			CommonFunctions.clickButtonOrLink(Details, "HyperLink", "Details");
			//Clicking on Specification Link
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
		    //Navigating to Content Frame 
			SelectColorway(data);
			 //Selecting the Colorway
			CommonFunctions.waitForElementTobeClickable(HDMTableEditButton);
			CommonFunctions.clickButtonOrLink(HDMTableEditButton, "HyperLink", "HDMTableEdit");
			wait.until(ExpectedConditions.titleIs(data[169]));
			CommonFunctions.waitForPageLoaded();
			 CommonFunctions.waitForElementTobeClickable(ColorwayRatioTable_HDM);
			    CommonFunctions.clickButtonOrLink(ColorwayRatioTable_HDM, "table", "ColorwayRatioTable_HDM");
			    //Clicking Color way Ratio
			    CommonFunctions.waitForElementTobeClickable(ColorwayRatioTextBox_HDM);
			    CommonFunctions.clearTextBox(ColorwayRatioTextBox_HDM, "ColorwayRatioTextBox_HDM");
			    CommonFunctions.enterTextInTextboxUpdated(ColorwayRatioTextBox_HDM,data[553],"ColorwayRatioTextBox_HDM");
			   //Adding a new Colorway 
			    CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
	  		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
	  		     //Clicking Done Button
	  		     CommonFunctions.waitForPageLoaded();
	  		     wait.until(ExpectedConditions.titleIs(data[144]));
	  		 
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateHDMTable"+e);
			throw e;
		}
		return true;
	}
	public static boolean UpdateContentsTable(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
		    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
		    //Clicking on contents table Edit Button
		    CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.titleIs(data[169]));
		    CommonFunctions.waitForElementTobeClickable(UnitRatioTable);
			CommonFunctions.clickButtonOrLink(UnitRatioTable, "table", "UnitRatiotable");
			CommonFunctions.waitForElementTobeClickable(UnitRatioTableTextBox);
			CommonFunctions.clearTextBox(UnitRatioTableTextBox, "UnitRatioTableTextBox");
			CommonFunctions.enterTextInTextboxUpdated(UnitRatioTableTextBox, data[172], "UnitRatioTextBox");
			 CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
  		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
  		     //Clicking Done Button
  		     CommonFunctions.waitForPageLoaded();
  		     wait.until(ExpectedConditions.titleIs(data[144]));
			
  		   
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateContentsTable"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean UpdateContentsTableSecondTime(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
		    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
		    //Clicking on contents table Edit Button
		    CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.titleIs(data[169]));
		    CommonFunctions.waitForElementTobeClickable(UnitRatioTable);
			CommonFunctions.clickButtonOrLink(UnitRatioTable, "table", "UnitRatiotable");
			CommonFunctions.waitForElementTobeClickable(UnitRatioTableTextBox);
			CommonFunctions.clearTextBox(UnitRatioTableTextBox, "UnitRatioTableTextBox");
			CommonFunctions.enterTextInTextboxUpdated(UnitRatioTableTextBox, data[554], "UnitRatioTextBox");
			  CommonFunctions.waitForElementTobeClickable(UnitRatioTable1);
				CommonFunctions.clickButtonOrLink(UnitRatioTable1, "table", "UnitRatiotable1");
				CommonFunctions.waitForElementTobeClickable(UnitRatioTableTextBox1);
				CommonFunctions.clearTextBox(UnitRatioTableTextBox1, "UnitRatioTableTextBox1");
				CommonFunctions.enterTextInTextboxUpdated(UnitRatioTableTextBox1, data[555], "UnitRatioTextBox");
			 CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
  		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
  		     //Clicking Done Button
  		     CommonFunctions.waitForPageLoaded();
  		     wait.until(ExpectedConditions.titleIs(data[144]));
			
  		   
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateContentsTableSecondTime"+e);
			throw e;
		}
		return true;
	}
	public static boolean SelectColorway(String [] data) throws Exception
	{
		try{
			CommonFunctions.waitForElementTobeClickable(ColorWayDropDown);
			CommonFunctions.selectFromDropDownByIndex(ColorWayDropDown, 1);
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(DetailedWaveHDMTable));
			//Waiting till HDM table Appear
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectColorway"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean NavigateToCostingTabThroughSidebar(String [] data) throws Exception
	{
		try{
			driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
			CommonFunctions.waitForPageLoaded();
			By Costing = By.linkText("Costing");
			CommonFunctions.waitForElementTobeClickable(Costing);
			CommonFunctions.clickButtonOrLink(Costing, "HyperLink", "Specification");
			//Clicking on Specification Link
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
		    //Navigating to Content Frame 
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToCostingTabThroughSidebar"+e);
			throw e;
		}
		catch(AssertionError er){
			fail=true;
			log.error("Assertion Error in NavigateToCostingTabThroughSidebar"+er);
			throw er;
		}
		return true;
	}
	
	public static boolean HDMTableEdit(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(HDMTableEditButton);
			CommonFunctions.clickButtonOrLink(HDMTableEditButton, "HyperLink", "HDMTableEdit");
			wait.until(ExpectedConditions.titleIs(data[169]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.gettingParentWindow();
			wait.until(ExpectedConditions.visibilityOfElementLocated(RetailItemWaveTable_HDMTable));
			CommonFunctions.clickButtonOrLink(RetailItemWaveTable_HDMTable, "Table", "RetailItemWaveTable_HDMTable");
			//clicking on Retail item table
			wait.until(ExpectedConditions.visibilityOfElementLocated(RetailItemWaveHyperLink_HDMTable));
			CommonFunctions.clickButtonOrLink(RetailItemWaveHyperLink_HDMTable, "Hyper_link", "RetailItemWaveHyperLink_HDMTable");
			//clicking on Retai item table
			
			CommonFunctions.switchingChildWindow();
            CommonFunctions.waitForElementTobeClickable(ProductTextBox);
            CommonFunctions.enterTextInTextboxUpdated(ProductTextBox, CopyLinkRetailItem1, "Suplier Name");
            //Entering the Vale In Name Text Box
            CommonFunctions.waitForElementTobeClickable(SearchProductButton);
            CommonFunctions.clickButtonOrLink(SearchProductButton, "Button", "Search Button");
            //Clicking Search Button
            wait.until(ExpectedConditions.visibilityOfElementLocated(ChooseColorWay));
            CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseColorWay");
            //Choosing the Source
            CommonFunctions.switchParentWindow();
            driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
		    //Switching Frame
		    CommonFunctions.waitForPageLoaded();
		    CommonFunctions.waitForElementTobeClickable(Colorway9thDigitTable);
		    CommonFunctions.clickButtonOrLink(Colorway9thDigitTable, "table", "Colorway9thDigitTable");
		    //Clicking Color way 9th Digit Table
		    CommonFunctions.waitForElementTobeClickable(Colorway9thDigitTableTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(Colorway9thDigitTableTextBox,data[550],"Colorway9thDigitTableTextBox");
		    //Entering Color way 9thdigit
		    CommonFunctions.waitForElementTobeClickable(WaveTable_HDM);
		    CommonFunctions.clickButtonOrLink(WaveTable_HDM, "Table", "WaveTable_HDM");
		    //Click on Wave table
		    wait.until(ExpectedConditions.visibilityOfElementLocated(WaveTableDropDown_HDM));
		    CommonFunctions.selectFromDropDownByVisibleTextUpdated(WaveTableDropDown_HDM, data[550], "WaveTableDropDown_HDM");
		    //Selecting the Value on Wave
		    CommonFunctions.waitForElementTobeClickable(ColorwayRatioTable_HDM);
		    CommonFunctions.clickButtonOrLink(ColorwayRatioTable_HDM, "table", "ColorwayRatioTable_HDM");
		    //Clicking Color way Ratio
		    CommonFunctions.waitForElementTobeClickable(ColorwayRatioTextBox_HDM);
		    CommonFunctions.enterTextInTextboxUpdated(ColorwayRatioTextBox_HDM,data[551],"ColorwayRatioTextBox_HDM");
		    //Entering the Color way Ratio
		    CommonFunctions.waitForElementTobeClickable(ColorwayStatusTable_HDM);
		    CommonFunctions.clickButtonOrLink(ColorwayStatusTable_HDM, "Table", "ColorwayStatusTable_HDM");
		    //Click on ColorwayStatus table
		    wait.until(ExpectedConditions.visibilityOfElementLocated(ColorwayStatusTextBox_HDM));
		    CommonFunctions.selectFromDropDownByVisibleTextUpdated(ColorwayStatusTextBox_HDM, data[552], "ColorwayStatusTextBox_HDM");
		    //Selecting the Color way Status Text Box
		    CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
  		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
  		     //Clicking Done Button
  		     CommonFunctions.waitForPageLoaded();
  		     wait.until(ExpectedConditions.titleIs(data[144]));
		    
		    
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in HDMTableEdit"+e);
			throw e;
		}
		return true;
	}
	public static boolean TC_31_CreateInternalRetailItemCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct_RetailItem(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			AssertionVerficationOTypeOfInternalCostSheetforRetailItem(data);
			//Assertion Verification of Retail item Cost Sheet
			CreateInternalCostSheetForRetailItemInternal(data);
			//Creating a internal Retail Item Cost sheet
			AssrtionVerificationOfCostSheetElements(data);
			//Assertion verification of  few CostSheet elements
			AddExistingReferenceDocument(data);
			//Adding a Existing Reference Document
			AssertionVerficationOfCreateCostSheetElements_USD_TC31(data);
			//Assertion Verification Of Create Cost Sheet Elements
			UpdatingCostSheet(data);
			//Updating the Currency Unit in Cost Sheet
			AssertionVerificationOfCurrencyConversionrateAfterUpdation(data);
			//Assertion Verification of Currency Conversion rate After Updation
			AssertionVerficationOfCreateCostSheetElements_HKD_TC31(data);
			//Assertion Verification Of Create Cost Sheet Elements
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC33 - Create Internal Retail Item Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC33 - Create Internal Retail Item Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			     }
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in TC_31_CreateInternalRetailItemCostSheet"+e);
				throw e;
			}
			return true;
		}
	
	public static boolean TC_32_CreateVendorRetailItemBOM_Vendor(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct_RetailItem(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			navigateSpecificationThroughSideBar(data);
			//Navigate To Specification
			CommonProjectFunctions.clickMaterialsTab();
			//Naviagate to materials tab
			CreateBOM_RetailItemforTC_33(data);
			//BOM Creation
			AssertionVerfificationOfCostValuesInBOM(data);
			//Assertion verification of CostSheet values in BOm
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC25 - Create Vendor Retail Item BOM - Vendor TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC25 - Create Vendor Retail Item BOM - Vendor TEST CASE FAILED.PLEASE CHECK");
			     }
		}
			catch(Exception e){
				fail=true;
				log.error("Exception in TC_32_CreateVendorRetailItemBOM_Vendor"+e);
				throw e;
			}
			return true;
	}
	
	
	
	public static boolean AssertionVerfificationOfCostValuesInBOM(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(HeaderAttributesPlusIcon);
			CommonFunctions.clickButtonOrLink(HeaderAttributesPlusIcon,"Image","HeaderAttributesPlusIcon");
			//Clicking Plus Button
			CommonFunctions.waitForElementTobeClickable(TotalBOMCostText);
			GettingText(TotalBOMCostText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[517], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
		
			CommonFunctions.waitForElementTobeClickable(TotalPlasticCostText);
			GettingText(TotalPlasticCostText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[518], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
			
			
			CommonFunctions.waitForElementTobeClickable(TotalPackagingCostText);
			GettingText(TotalPackagingCostText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[519], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
			
			
			CommonFunctions.waitForElementTobeClickable(TotalChemicalCostText);
			GettingText(TotalChemicalCostText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[520], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
			
			
			CommonFunctions.waitForElementTobeClickable(TotalGeneralDecoLaboRcostText);
			GettingText(TotalGeneralDecoLaboRcostText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[521], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
			
			
			CommonFunctions.waitForElementTobeClickable(TotalPurchasedCostText);
			GettingText(TotalPurchasedCostText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[522], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
			
			CommonFunctions.waitForElementTobeClickable(TotalMoldingLaborCostText);
			GettingText(TotalMoldingLaborCostText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[523], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
			
			
			CommonFunctions.waitForElementTobeClickable(TotalElectronicCostText);
			GettingText(TotalElectronicCostText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[524], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
			
			CommonFunctions.waitForElementTobeClickable(TotalMarkUpCostText);
			GettingText(TotalMarkUpCostText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[525], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
			
			
			CommonFunctions.waitForElementTobeClickable(TotalSotGoodCostText);
			GettingText(TotalSotGoodCostText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[526], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
			
			
			CommonFunctions.waitForElementTobeClickable(TotalPlasticUsagePerKText);
			GettingText(TotalPlasticUsagePerKText);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[527], "Actual and expected Field Names are not Matched.Assertion failed.Please check");	
			
			log.info("*** Verify that in BOM  Cost Summary table group is visible a above cost attributes - validated *** ");
			
			CommonFunctions.waitForElementTobeClickable(TotalPlastic);
			GettingText(TotalPlastic);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[529], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total Plastic  Cost - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(TotalChemicals);
			GettingText(TotalChemicals);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[531], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total Chemicals Cost - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(TotalPurchasedPartsCost);
			GettingText(TotalPurchasedPartsCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[533], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total Purchased Parts Cost - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(TotalElectronics);
			GettingText(TotalElectronics);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[535], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total Electronics  Cost - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(TotalsoftGoods);
			GettingText(TotalsoftGoods);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[537], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total Soft Goods  Cost - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(TotalPackaging);
			GettingText(TotalPackaging);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[539], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total Packaging  Cost - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(TotalMoldingLaborCost);
			GettingText(TotalMoldingLaborCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[543], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total Molding labor  Cost - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(TotalGeneral_DecoLaborCost);
			GettingText(TotalGeneral_DecoLaborCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[541], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total GeneralDeco labor  Cost - Validated ***");
			
			
			CommonFunctions.waitForElementTobeClickable(TotalPlasticUsagePerK);
			GettingText(TotalPlasticUsagePerK);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[545], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total  Plastic usage Per K - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(TotalMarkUpCost);
			GettingText(TotalMarkUpCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[549], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total  Mark Up Cost - Validated ***");
			

			
			CommonFunctions.waitForElementTobeClickable(TotalBOMCost);
			GettingText(TotalBOMCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[547], "Actual and expected Total Plastic cost Values are not matched.Assertion Failed.please Check");
			log.info(" *** Verify that Total  BOM Cost - Validated ***");
			
		}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in AssertionVerfificationOfCostValuesInBOM"+e);
			throw e;
		}
		return true;
	}
	
	public static Boolean EnterValuesInBOM(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(PlasticUnitPriceTable);
			CommonFunctions.clickButtonOrLink(PlasticUnitPriceTable, "Table", "PlasticUnitPriceTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(PlasticUnitPriceTextBox));
			CommonFunctions.enterTextInTextboxUpdated(PlasticUnitPriceTextBox, data[492], "PlasticUnitPriceTextBox");
			//Entering the Value in Unit Price of plastic Section 
			CommonFunctions.waitForElementTobeClickable(PlasticUsagePerKTable);
			CommonFunctions.clickButtonOrLink(PlasticUsagePerKTable, "Table", "PlasticUsagePerKTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(PlasticUsagePerKTextBox));
			CommonFunctions.enterTextInTextboxUpdated(PlasticUsagePerKTextBox, data[493], "PlasticUsagePerKTextBox");
			//Entering the Value in Unit Price of plastic Section 
			
			CommonFunctions.waitForElementTobeClickable(ChemicalUnitPriceTable);
			CommonFunctions.clickButtonOrLink(ChemicalUnitPriceTable, "Table", "ChemicalUnitPriceTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(ChemicalUnitPriceTextBox));
			CommonFunctions.enterTextInTextboxUpdated(ChemicalUnitPriceTextBox, data[494], "ChemicalUnitPriceTextBox");
			//Entering the Value in Unit Price of Chemical Section 
			CommonFunctions.waitForElementTobeClickable(ChemicalUsagePerKTable);
			CommonFunctions.clickButtonOrLink(ChemicalUsagePerKTable, "Table", "ChemicalUsagePerKTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(ChemicalUsagePerKTextBox));
			CommonFunctions.enterTextInTextboxUpdated(ChemicalUsagePerKTextBox, data[495], "ChemicalUsagePerKTextBox");
			//Entering the Value in UagePerK Price of Chemical Section 
			
			CommonFunctions.waitForElementTobeClickable(PurchasedUnitPriceTable);
			CommonFunctions.clickButtonOrLink(PurchasedUnitPriceTable, "Table", "PurchasedUnitPriceTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(PurchasedUnitPriceTextBox));
			CommonFunctions.enterTextInTextboxUpdated(PurchasedUnitPriceTextBox, data[496], "PurchasedUnitPriceTextBox");
			//Entering the Value in Unit Price of Purchased Section 
			CommonFunctions.waitForElementTobeClickable(PurchasedUsagePerKTable);
			CommonFunctions.clickButtonOrLink(PurchasedUsagePerKTable, "Table", "PurchasedUsagePerKTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(PurchasedUsagePerKTextBox));
			CommonFunctions.enterTextInTextboxUpdated(PurchasedUsagePerKTextBox, data[497], "PurchasedUsagePerKTextBox");
			//Entering the Value in UagePerK Price of Purchased Section 
			
			CommonFunctions.waitForElementTobeClickable(ElectronicUnitPriceTable);
			CommonFunctions.clickButtonOrLink(ElectronicUnitPriceTable, "Table", "ElectronicUnitPriceTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(ElectronicUnitPriceTextBox));
			CommonFunctions.enterTextInTextboxUpdated(ElectronicUnitPriceTextBox, data[498], "ElectronicUnitPriceTextBox");
			//Entering the Value in Unit Price of Electronic Section 
			CommonFunctions.waitForElementTobeClickable(ElectronicUsagePerKTable);
			CommonFunctions.clickButtonOrLink(ElectronicUsagePerKTable, "Table", "ElectronicUsagePerKTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(ElectronicUsagePerKTextBox));
			CommonFunctions.enterTextInTextboxUpdated(ElectronicUsagePerKTextBox, data[499], "ElectronicUsagePerKTextBox");
			//Entering the Value in UagePerK Price of Electronic Section 
			
			CommonFunctions.waitForElementTobeClickable(SoftGoodsUnitPriceTable);
			CommonFunctions.clickButtonOrLink(SoftGoodsUnitPriceTable, "Table", "SoftGoodsUnitPriceTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(SoftGoodsUnitPriceTextBox));
			CommonFunctions.enterTextInTextboxUpdated(SoftGoodsUnitPriceTextBox, data[500], "SoftGoodsUnitPriceTextBox");
			//Entering the Value in Unit Price of SoftGoods Section 
			CommonFunctions.waitForElementTobeClickable(SoftGoodsUsagePerKTable);
			CommonFunctions.clickButtonOrLink(SoftGoodsUsagePerKTable, "Table", "SoftGoodsUsagePerKTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(SoftGoodsUsagePerKTextBox));
			CommonFunctions.enterTextInTextboxUpdated(SoftGoodsUsagePerKTextBox, data[501], "SoftGoodsUsagePerKTextBox");
			//Entering the Value in UagePerK Price of SoftGood Section 
			
			CommonFunctions.waitForElementTobeClickable(PackagingUnitPriceTable);
			CommonFunctions.clickButtonOrLink(PackagingUnitPriceTable, "Table", "PackagingUnitPriceTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(PackagingUnitPriceTextBox));
			CommonFunctions.enterTextInTextboxUpdated(PackagingUnitPriceTextBox, data[502], "PackagingUnitPriceTextBox");
			//Entering the Value in Unit Price of Packaging Section 
			CommonFunctions.waitForElementTobeClickable(PackagingUsagePerKTable);
			CommonFunctions.clickButtonOrLink(PackagingUsagePerKTable, "Table", "PackagingUsagePerKTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(PackagingUsagePerKTextBox));
			CommonFunctions.enterTextInTextboxUpdated(PackagingUsagePerKTextBox, data[503], "PackagingUsagePerKTextBox");
			//Entering the Value in UagePerK Price of Packaging Section 
			
			CommonFunctions.waitForElementTobeClickable(GeneralDecoUnitPriceTable);
			CommonFunctions.clickButtonOrLink(GeneralDecoUnitPriceTable, "Table", "GeneralDecoUnitPriceTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(GeneralDecoUnitPriceTextBox));
			CommonFunctions.enterTextInTextboxUpdated(GeneralDecoUnitPriceTextBox, data[504], "GeneralDecoUnitPriceTextBox");
			//Entering the Value in Unit Price of GeneralDeco Section 
			
			CommonFunctions.waitForElementTobeClickable(GeneralDecoUsagePerKTable);
			CommonFunctions.clickButtonOrLink(GeneralDecoUsagePerKTable, "Table", "GeneralDecoUsagePerKTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(GeneralDecoUsagePerKTextBox));
			CommonFunctions.enterTextInTextboxUpdated(GeneralDecoUsagePerKTextBox, data[505], "GeneralDecoUsagePerKTextBox");
			//Entering the Value in Unit Price of GeneralDeco Section
			
			CommonFunctions.waitForElementTobeClickable(MoldingSectionViewChangeImage);
			CommonFunctions.clickButtonOrLink(MoldingSectionViewChangeImage, "Image", "MoldingSectionViewChangeImage");
			//Clicking View Image Icon
			wait.until(ExpectedConditions.visibilityOfElementLocated(ViewChangeTable));
			CommonFunctions.waitForElementTobeClickable(VendorFullModldingLaborView);
			CommonFunctions.clickButtonOrLink(VendorFullModldingLaborView, "Hyper-Link", "VendorFullModldingLaborView");
		    CommonFunctions.waitForElementTobeClickable(MoldinglaborEfficiencyPercentageTable);
			CommonFunctions.waitForPageLoaded();
			By MoldingLabotTable = By.xpath("//table[@id='hbMoldingLaborTabEditorTable']");
			wait.until(ExpectedConditions.visibilityOfElementLocated(MoldingLabotTable));
			wait.until(ExpectedConditions.visibilityOfElementLocated(MoldinglaborEfficiencyPercentageTable));
			//CommonFunctions.clickButtonOrLink(MoldinglaborEfficiencyPercentageTable, "table", "MoldinglaborEfficiencyPercentageTable");
			
			action.moveToElement(driver.findElement(MoldinglaborEfficiencyPercentageTable)).doubleClick().build().perform();
			wait.until(ExpectedConditions.visibilityOfElementLocated(MoldinglaborEfficiencyPercentageTextBox));
			CommonFunctions.enterTextInTextboxUpdated(MoldinglaborEfficiencyPercentageTextBox, data[506], "MoldinglaborEfficiencyPercentageTextBox");
			//Entering the Value in Efficiency% of Molding Labor Section
			wait.until(ExpectedConditions.visibilityOfElementLocated(MoldinglaborCycleTimeTable));
			CommonFunctions.clickButtonOrLink(MoldinglaborCycleTimeTable, "table", "MoldinglaborCycleTimeTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(MoldingLaborCycleTimeTextBox));
			CommonFunctions.enterTextInTextboxUpdated(MoldingLaborCycleTimeTextBox, data[507], "MoldingLaborCycleTimeTextBox");
			//Entering the Value in CycleTime of Molding Labor Section
			wait.until(ExpectedConditions.visibilityOfElementLocated(MoldinglaborTotalCavTable));
			CommonFunctions.clickButtonOrLink(MoldinglaborTotalCavTable, "table", "MoldinglaborTotalCavTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(MoldinglaborTotalCavTextBox));
			GettingText(MoldinglaborTotalCavTextBox);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[509], "Actual and expected Default cav Values are not Matched.Assertion failed.Please Verify");
			log.info("*** In Molding Labor BOM section verify that Total Cav attribute is present and its default value is blank- Validated ***");
			CommonFunctions.enterTextInTextboxUpdated(MoldinglaborTotalCavTextBox, data[508], "MoldinglaborTotalCavTextBox");
			//Entering the Value in TotalCav of Molding Labor Section
			
			CommonFunctions.waitForElementTobeClickable(MoldinglaborUpTable);
			CommonFunctions.clickButtonOrLink(MoldinglaborUpTable, "Table", "MoldinglaborUpTable");
			GettingText(MoldinglaborUpTableTextBox);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[510], "Actual and expected Default cav Values are not Matched.Assertion failed.Please Verify");
			log.info("*** In Molding Labor BOM section verify that Up attribute is present and its default value is blank- Validated ***");
			CommonFunctions.enterTextInTextboxUpdated(MoldinglaborUpTableTextBox, data[511], "MoldinglaborUpTableTextBox");
			//Entering the Value in TotalCav of Molding Labor Section
			
			CommonFunctions.waitForElementTobeClickable(MoldingLaborMarkUpTable);
			CommonFunctions.clickButtonOrLink(MoldingLaborMarkUpTable, "table", "MoldingLaborMarkUpTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(MoldingLaborMarkUpTextBox));
			CommonFunctions.enterTextInTextboxUpdated(MoldingLaborMarkUpTextBox, data[512], "MoldingLaborMarkUpTextBox");
			//Entering MarkUp% Value
			
			CommonFunctions.waitForElementTobeClickable(MoldingLaborCostPerHourTable);
			CommonFunctions.clickButtonOrLink(MoldingLaborCostPerHourTable, "table", "MoldingLaborCostPerHourTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(MoldingLaborCostPerHourTextBox));
			CommonFunctions.enterTextInTextboxUpdated(MoldingLaborCostPerHourTextBox, data[516], "MoldingLaborCostPerHourTextBox");
			//Entering Cost/Hour Value Value
	
			
			CommonFunctions.waitForElementTobeClickable(MoldinglaborMaterialTable);
			CommonFunctions.clickButtonOrLink(MoldinglaborMaterialTable, "table", "MoldinglaborMaterialTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(MoldinglaborMaterialTextBox));
			CommonFunctions.enterTextInTextboxUpdated(MoldinglaborMaterialTextBox, data[513], "MoldinglaborMaterialTextBox");
			WebElement MoldinglaborMaterialTextBox1= driver.findElement(By.xpath("//td[@id='r8_materialDescription']/div[1]/textarea[1]"));
			MoldinglaborMaterialTextBox1.sendKeys(Keys.TAB);
			//Pressing Tab Key
			
			CommonFunctions.waitForElementTobeClickable(PlasticSectionViewChangeImage);
			CommonFunctions.clickButtonOrLink(PlasticSectionViewChangeImage, "Image", "PlasticSectionViewChangeImage");
			wait.until(ExpectedConditions.visibilityOfElementLocated(ViewChangeTable));
			CommonFunctions.waitForElementTobeClickable(VendorFullPlasticLaborView);
			CommonFunctions.clickButtonOrLink(VendorFullPlasticLaborView, "HyperLink", "VendorFullPlasticLaborView");
			CommonFunctions.waitForPageLoaded();
			
			wait.until(ExpectedConditions.visibilityOfElementLocated(PlasticCavtable));
			CommonFunctions.clickButtonOrLink(PlasticCavtable, "table", "PlasticCavtable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(PlasticCavtextBox));
			GettingText(PlasticCavtextBox);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[515], "ACtual and Expected cav Default Values Are Not Matched.Asssertion Failed.please Verfiy");
			log.info("***In Plastic BOM section verify that Cav attribute exist and its default value is blank-validated***");
			CommonFunctions.enterTextInTextboxUpdated(PlasticCavtextBox, data[514], "PlasticCavtextBoxValue");
			
			CommonFunctions.waitForElementTobeClickable(PlasticSectionViewChangeImage);
			CommonFunctions.clickButtonOrLink(PlasticSectionViewChangeImage, "Image", "PlasticSectionViewChangeImage");
			wait.until(ExpectedConditions.visibilityOfElementLocated(ViewChangeTable));
			CommonFunctions.clickButtonOrLink(VendorFullView, "HyperLink", "VendorFullView");
			
			
			CommonFunctions.waitForElementTobeClickable(PlasticMarkUpTable);
			CommonFunctions.clickButtonOrLink(PlasticMarkUpTable, "table", "PlasticMarkUpTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(PlasticMarkUpTextBox));
			CommonFunctions.enterTextInTextboxUpdated(PlasticMarkUpTextBox, data[512], "PlasticMarkUpTextBox");
			//Entering MarkUp% Value in Plastic Section
			
			
			CommonFunctions.waitForElementTobeClickable(ChemicalMarkUpTable);
			CommonFunctions.clickButtonOrLink(ChemicalMarkUpTable, "table", "ChemicalMarkUpTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(ChemicalMarkUpTextBox));
			CommonFunctions.enterTextInTextboxUpdated(ChemicalMarkUpTextBox, data[512], "ChemicalMarkUpTextBox");
			//Entering MarkUp% Value in Chemical Section
			
			
			CommonFunctions.waitForElementTobeClickable(PurchasedMarkUpTable);
			CommonFunctions.clickButtonOrLink(PurchasedMarkUpTable, "table", "PurchasedMarkUpTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(PurchasedMarkUpTextBox));
			CommonFunctions.enterTextInTextboxUpdated(PurchasedMarkUpTextBox, data[512], "PurchasedMarkUpTextBox");
			//Entering MarkUp% Value in Chemical Section
			
			CommonFunctions.waitForElementTobeClickable(ElectronicMarkUpTable);
			CommonFunctions.clickButtonOrLink(ElectronicMarkUpTable, "table", "ElectronicMarkUpTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(ElectronicMarkUpTextBox));
			CommonFunctions.enterTextInTextboxUpdated(ElectronicMarkUpTextBox, data[512], "ElectronicMarkUpTextBox");
			//Entering MarkUp% Value in Chemical Section
			
			CommonFunctions.waitForElementTobeClickable(SoftGoodsMarkUpTable);
			CommonFunctions.clickButtonOrLink(SoftGoodsMarkUpTable, "table", "SoftGoodsMarkUpTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(SoftGoodsMarkUpTextBox));
			CommonFunctions.enterTextInTextboxUpdated(SoftGoodsMarkUpTextBox, data[512], "SoftGoodsMarkUpTextBox");
			//Entering MarkUp% Value in SoftGoods Section
			
			CommonFunctions.waitForElementTobeClickable(PackagingMarkUpTable);
			CommonFunctions.clickButtonOrLink(PackagingMarkUpTable, "table", "PackagingMarkUpTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(PackagingMarkUpTextBox));
			CommonFunctions.enterTextInTextboxUpdated(PackagingMarkUpTextBox, data[512], "PackagingMarkUpTextBox");
			//Entering MarkUp% Value in Packaging Section
			
			CommonFunctions.waitForElementTobeClickable(GeneralDecoMarkUpTable);
			CommonFunctions.clickButtonOrLink(GeneralDecoMarkUpTable, "table", "GeneralDecoMarkUpTable");
			wait.until(ExpectedConditions.visibilityOfElementLocated(GeneralDecoMarkUpTextBox));
			CommonFunctions.enterTextInTextboxUpdated(GeneralDecoMarkUpTextBox, data[512], "GeneralDecoMarkUpTextBox");
			//Entering MarkUp% Value in General/Deco Section
			 
			
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in EnterValuesInBOM"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean AssertionverificationOfReferenceDocument(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ContentFileName);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentFileName, "ContentFileName"), "ContentFileName is Not Found.Condition failed.Assertion failed.Please Verify");
			
			CommonFunctions.waitForElementTobeClickable(ContentFileSize);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentFileSize, "ContentFileSize"), "ContentFileSize is Not Found.Condition failed.Assertion failed.Please Verify");
			GettingText(ContentFileSize);
			log.info("Content File of Reference Document is "+ActualValue);
			
			CommonFunctions.waitForElementTobeClickable(DocumentName);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(DocumentName, "DocumentName"), "DocumentName is Not Found.Condition failed.Assertion failed.Please Verify");
			GettingText(DocumentName);
			log.info("DocumentName of Reference Document is "+ActualValue);
			
			CommonFunctions.waitForElementTobeClickable(WorkingState);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(WorkingState, "WorkingState"), "WorkingState is Not Found.Condition failed.Assertion failed.Please Verify");
			GettingText(WorkingState);
			log.info("WorkingState of Reference Document is "+ActualValue);
			
			CommonFunctions.waitForElementTobeClickable(ContenFileType);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContenFileType, "ContenFileType"), "ContenFileType is Not Found.Condition failed.Assertion failed.Please Verify");
			GettingText(ContenFileType);
			log.info("ContenFileType of Reference Document is "+ActualValue);
			log.info("*** Validate Validate Reference Document-Validatd ***");
			
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in AddExistingReferenceDocument"+e);
				throw e;
			}
			return true;
		}
	public static boolean AddExistingReferenceDocument(String [] data) throws Exception{
		try{
			CommonFunctions.gettingParentWindow();
			CommonFunctions.waitForElementTobeClickable(AddExistingDocumentRefrenceNumber);
			Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Associated Documents:')]//following::select[1]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
           for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		     System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[464]))
  		     {
  		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(AddExistingDocumentRefrenceNumber, RequiredValue, "AddExistingDocumentRefrenceNumber DropDown Selection");
  		    	 CommonFunctions.waitForPageLoaded();
  		    	 break;
  		     }
  		    }
           CommonFunctions.switchingChildWindow();
           CommonFunctions.waitForElementTobeClickable(SearchButton);
           CommonFunctions.clickButtonOrLink(SearchButton, "Button", "SearchButton");
           //Clicking Search Button
           CommonFunctions.waitForPageLoaded();
           CommonFunctions.waitForElementTobeClickable(FirstSelectionCheckBox);
           CommonFunctions.clickButtonOrLink(FirstSelectionCheckBox, "CheckBox", "FirstSelectionCheckBox");
           //Clicking the First check Box
           CommonFunctions.waitForElementTobeClickable(SelectButton);
           CommonFunctions.clickButtonOrLink(SelectButton, "Button", "SelectButton");
           //Clicking SelectButton
           CommonFunctions.switchParentWindow();
           driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in AddExistingReferenceDocument"+e);
				throw e;
			}
			return true;
		}
	public static boolean AssrtionVerificationOfCostSheetElements(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ProductTypeValue);
			GettingText(ProductTypeValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[11], "Actual And Expected Cost Sheet Product Type Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Product Type - Validated ***");
			//Assertion Verification of product Type
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
			GettingText(CurrencyConversionRate);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[175], "Actual And Expected Cost Sheet CurrencyConversionRate Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Currency Conversion Rate - Validated ***");
			//Assertion Verification of CurrencyConversionRate
			CommonFunctions.waitForElementTobeClickable(CostSheetSequenceNumberValue);
			GettingText(CostSheetSequenceNumberValue);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CostSheetSequenceNumberValue, "CostSheetSequenceNumberValue"), "CostSheetSequenceNumberValue is not found.Assertion failed.Please Check");
			log.info("CostSheetSequenceNumberValue is generated and is "+ActualValue);
			log.info("*** Validate Cost Sheet Sequence Number - Validated ***");
			//Verifying the Appearance Of Cost Sheet Sequence Number
			
			
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in AssrtionVerificationOfCostSheetElements"+e);
				throw e;
			}
			return true;
		}
	
	public static boolean AssertionVerificationOfCurrencyConversionrateAfterUpdation(String [] data) throws Exception{
		try{

			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
			GettingText(CurrencyConversionRate);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[174], "Actual And Expected Cost Sheet CurrencyConversionRate Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Currency Conversion Rate - Validated ***");
			//Assertion Verification of CurrencyConversionRate
		
		}
			catch(Exception e){
				fail=true;
				log.error("Exception in AssrtionVerificationOfCostSheetElements"+e);
				throw e;
			}
			return true;
		}
	public static boolean TC_30_SaveContentsTableForWhatIfVendorProductCostSheet(String [] data) throws Exception{
		try{
			CreateProdFromLineSheetForSanitySuite_TC24(data);
			//Create a Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			AddVendorSource(data);
			//Adding a Vendor Source
			ApproveVendorSource(data);
			//Approving the Vendor Source
			navigateSpecificationThroughSideBar(data);
			//Navigate Specification Through Side Bar
			CreateSpecification(data);
			//Creating a Specification
			CreateColorway(data);
			//Creating a Colorway
			CopyLinkProductRetailItem1(data);
			//Copy Retail Item 1
			SearchAssortmentProduct(data);
			//Searching Assortment/Solid Product
			CopyLinkProductRetailItem2(data);
			//Create Retail Item 2
		    CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Open  Browser
			launchApp(data[461],data[462]);
			//Launch  App
			SearchAssortmentProduct(data);
			//Searching Assortment/Solid Product
			CreateWhatIFCostSheetForAssortment_SolidthroughRFQ(data);
			//Create What If Cost Sheet For Assortment/Solid
			SearchTheRFQForTC_30(data);
			//Searching the RFQ
			AddContentTableValuesThroughRFQHyperLinkForTC_30(data);
			//Adding a Content table values
			SubmitRequestThroughCostSheet_TC30(data);
			//Submitting the Request Through Vendors
			NavigateToRFQThroughSideBar(data);
			//Clicking RFQ
			SearchingTheCostSheet(data);
			//Searching the RFQ
			SubmitRequestStatusCheck(data);
			//Checking the status of Request Sent
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//opening the Browser
			launchApp(data[220],data[221]);
			//Launching the URL
			SearchRetailItemProduct1(data);
			//Searching the Retail Item Product1
			CreateVendorCostSheet_RetailItem(data);
			//Create a Cost Sheet For Retail Item A
			SearchRetailItemProduct2(data);
			//Seraching the Retail Item 2
			CreateVendorCostSheet_RetailItem(data);
			//Create a Cost Sheet For Retail Item B
			SearchAssortmentProduct(data);
			//Searching Assortment/Solid Product
			NavigatingToCostingTab(data);
			//Navigate to Costing tab
			SearchTheRFQForTC_30(data);
			//navigating to the particular RFQ
			UpdateContentTable_VendorUserforTC_30(data);
			//Updating the Contents Table
			BlankUpdate_TC30(data);
			//Doing a Blank Update
			AssertionVaildationOnContenttableAndVendorCostTable(data);
			//Assertion Verification on Content and vendor CostSTable validation
			AssertionVaildationOfCostValues(data);
			//Assertion Verification of Cost Values
			UpdateCurrenCyConversionRate_TC_30(data);
			//Update Currency Conversion rate
			AssertionVaildationOfCurrencyConversionRate(data);
			//Assertion verification of Currency Conversion rate
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC46 - Save Contents Table for What If Vendor Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC46 - Save Contents Table for What If Vendor Product Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			     }
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in TC_30_SaveContentsTableForWhatIfVendorProductCostSheet"+e);
				throw e;
			}
			return true;
		}
	
	public static boolean AssertionVaildationOfCurrencyConversionRate(String [] data){
		try{
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
			GettingText(CurrencyConversionRate);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[174], "Actual and ExpectedCouurency Conversion rate are not Matched.ssertion failed.Please Verfify");
			log.info("*** Validate Currency Conversion Rate-validated ***");
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVaildationOfCurrencyConversionRate"+e);
			throw e;
		}
		return true;
		}
	
	public static boolean AssertionVaildationOnContenttableAndVendorCostTable(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ContentTableUnitRatio);
			GettingText(ContentTableUnitRatio);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[172], "Actual and Expected Unit Ratio are not matched for Colorway1.Asstion failed.Please Verfiy");
			CommonFunctions.waitForElementTobeClickable(ContentTableUnitRatio1);
			GettingText(ContentTableUnitRatio);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[172], "Actual and Expected Unit Ratio are not matched for Colorway2.Asstion failed.Please Verfiy");
			log.info(" *** Validate Contents Table - Unit Ratio - Validated ***");
			CommonFunctions.waitForElementTobeClickable(ContentTableProductSource);
			GettingText(ContentTableProductSource);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[466], "Actual and Expected Product Source are not matched for Colorway1.Asstion failed.Please Verfiy");
			CommonFunctions.waitForElementTobeClickable(ContentTableProductSource1);
			GettingText(ContentTableProductSource1);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[466], "Actual and Expected Product Source are not matched for Colorway2.Asstion failed.Please Verfiy");
			log.info(" *** Validate Product Source - Unit Ratio - Validated ***");
			CommonFunctions.waitForElementTobeClickable(ContentTableCostSheetStatus);
			GettingText(ContentTableCostSheetStatus);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[182], "Actual and Expected CostSheet Status are not matched for Colorway1.Asstion failed.Please Verfiy");
			CommonFunctions.waitForElementTobeClickable(ContentTableCostSheetStatus1);
			GettingText(ContentTableCostSheetStatus1);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[182], "Actual and Expected CostSheet Status are not matched for Colorway2.Asstion failed.Please Verfiy");
			log.info(" *** Validate Cost Sheet Status - Validated ***");
			CommonFunctions.waitForElementTobeClickable(ContentTableLastModifiedBy);
			GettingText(ContentTableLastModifiedBy);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[220], "Actual and Expected Last Modified By are not matched for Colorway1.Asstion failed.Please Verfiy");
			CommonFunctions.waitForElementTobeClickable(ContentTableLastModifiedBy1);
			GettingText(ContentTableLastModifiedBy1);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[220], "Actual and Expected Last Modified By are not matched for Colorway2.Asstion failed.Please Verfiy");
			log.info(" *** Validate Last Modified By - Validated ***");
			CommonFunctions.waitForElementTobeClickable(ContentTableLastModifiedDate);
			GettingText(ContentTableLastModifiedDate);
			CommonFunctions.AssertTrueVerification(!ActualValue.equals(""), "Condition is not satisfied for Colorway1.Assertion Failed.Please verify");
			log.info("Last modified date for Colorway1 is"+ActualValue);
			CommonFunctions.waitForElementTobeClickable(ContentTableLastModifiedDate1);
			GettingText(ContentTableLastModifiedDate1);
			CommonFunctions.AssertTrueVerification(!ActualValue.equals(""), "Condition is not satisfied for Colorway2.Assertion Failed.Please verify");
			log.info("Last modified date for Colorwa21 is"+ActualValue);
			log.info(" *** Validate Last Modified Date -Validated ***");
			CommonFunctions.waitForElementTobeClickable(ContentTableCostSheetName);
			GettingText(ContentTableCostSheetName);
			//CommonFunctions.AssertEqualsVerification(ActualValue, CopyLinkRetailItem1+data[173]+"  "+data[156]+" "+data[467], "Actual and Expected CostSheetname are not Matched for colorway1.Assertion Failed");
            log.info("Cost Sheet name is "+ActualValue);
			CommonFunctions.waitForElementTobeClickable(ContentTableCostSheetName1);
			GettingText(ContentTableCostSheetName1);
			//CommonFunctions.AssertEqualsVerification(ActualValue, CopyLinkRetailItem2+data[173]+"  "+data[156]+" "+data[467], "Actual and Expected CostSheetname are not Matched for colorway2.Assertion Failed");
            log.info("Cost Sheet name is "+ActualValue);
			log.info(" *** Validate Cost Sheet Name format - validated ***");
			CommonFunctions.waitForElementTobeClickable(VendorTableProductOriginalQuoteCurrency);
			GettingText(VendorTableProductOriginalQuoteCurrency);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[168], "Actual and Expected Product Quote Currecncies are Not matched for Colorway1.Asserion failed.please Verify");
			CommonFunctions.waitForElementTobeClickable(VendorTableProductOriginalQuoteCurrency1);
			GettingText(VendorTableProductOriginalQuoteCurrency1);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[168], "Actual and Expected Product Quote Currecncies are Not matched for Colorway2.Asserion failed.please Verify");
			log.info(" *** Validate Product Quote Currency -Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(VendorTableProductCostTotal);
			GettingText(VendorTableProductCostTotal);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductCostTotal, "VendorTableProductCostTotalColorway1"), "Actual and Expcted VendorTableProductCostTotal are not matched.Assertion Failed.Please verify");
			log.info("VendorTableProductCostTotal For colorway1 is "+ActualValue);
			CommonFunctions.waitForElementTobeClickable(VendorTableProductCostTotal1);
			GettingText(VendorTableProductCostTotal1);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductCostTotal1, "VendorTableProductCostTotalColorway2"), "Actual and Expcted VendorTableProductCostTotal are not matched.Assertion Failed.Please verify");
			log.info("VendorTableProductCostTotal For colorway2 is "+ActualValue);
		    log.info("*** Validate Product Cost Total (Quote Currency) -validated ***");
			
		    CommonFunctions.waitForElementTobeClickable(VendorTableProductCostTotalUSD);
		 	GettingText(VendorTableProductCostTotalUSD);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductCostTotalUSD, "VendorTableProductCostTotalUSDColorway1"), "Actual and Expcted VendorTableProductCostTotal are not matched.Assertion Failed.Please verify");
		 	log.info("VendorTableProductCostTotalUSD For colorway1 is "+ActualValue);
		 	CommonFunctions.waitForElementTobeClickable(VendorTableProductCostTotalUSD1);
		 	GettingText(VendorTableProductCostTotalUSD1);
		 	CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductCostTotalUSD1, "VendorTableProductCostTotalUSDColorway2"), "Actual and Expcted VendorTableProductCostTotal are not matched.Assertion Failed.Please verify");
		    log.info("VendorTableProductCostTotal For colorway2 is "+ActualValue);
		    log.info("*** Validate Product Cost Total (USD) -validated ***");
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVaildationOnContenttableAndVendorCostTable"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVaildationOfCostValues(String [] data){
		try{
		    CommonFunctions.waitForElementTobeClickable(CasePackQuantity);
		    GettingText(CasePackQuantity);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[488], "Actual and Expected case Pack Qunatities are not Matched.Assertion failed.please check");
			log.info("*** Validate Case Pack Quantity - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(Assortment_SolidWeightedAverageUSD);
		    GettingText(Assortment_SolidWeightedAverageUSD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[470], "Actual and Expected case Pack Qunatities are not Matched.Assertion failed.please check");
			log.info("*** Validate Ast/Solid Weighted Average (USD) - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(Assortment_SolidWeightedAverage);
			String assortment_SolidWeightedAverage=driver.findElement(Assortment_SolidWeightedAverage).getText();
		    CommonFunctions.AssertEqualsVerification(assortment_SolidWeightedAverage, ActualValue, "Actual and Expected case Pack Qunatities are not Matched.Assertion failed.please check");
			log.info("*** Validate Ast/Solid Weighted Average - Validated ***");
			

			CommonFunctions.waitForElementTobeClickable(TM_MP_SubTotalUSD);
			GettingText(TM_MP_SubTotalUSD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[471], "Actual and Expected TM_MP_SubTotalUSD are not Matched.Assertion failed.please check");
			log.info("*** Validate TM/BP Sub-total (USD) - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(TM_BP_SubTotal);
			String tM_BP_SubTotal_expected = driver.findElement(TM_BP_SubTotal).getText();
			CommonFunctions.AssertEqualsVerification(tM_BP_SubTotal_expected, ActualValue, "Actual and Expected TM_MP_SubTotalUSD are not Matched.Assertion failed.please check");
			log.info("*** Validate TM/BP Sub-total - Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(ExFactoryCost_USD);
		    GettingText(ExFactoryCost_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[210], "Actual and Expected ExFactoryCost_USD are not Matched.Please Verify");
		    log.info("*** Validate Ex-Factory Cost (SAP Base Price) (USD)- Validated ***");
			
			CommonFunctions.waitForElementTobeClickable(ExFactoryCost_Vendor);
			String ExFactoryCostExpecetd=driver.findElement(ExFactoryCost_Vendor).getText();
		    CommonFunctions.AssertEqualsVerification(ExFactoryCostExpecetd, ActualValue, "Actual and Expected ExFactoryCost_Vendor are not Matched.Please Verify");
		    log.info("*** Validate Ex-Factory Cost (SAP Base Price)- Validated ***");
		    
            CommonFunctions.waitForElementTobeClickable(TotalContentMarkUP_USD);
		    GettingText(TotalContentMarkUP_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[471], "Actual and Expected TotalContentMarkUP are not Matched.Please Verify");
		    log.info("*** Validate Total Overhead & Markup(USD)- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalContentMarkUP);
		    String TotalContentMarkUP_Expected=driver.findElement(TotalContentMarkUP).getText();
		    CommonFunctions.AssertEqualsVerification(TotalContentMarkUP_Expected, ActualValue, "Actual and Expected TotalContentMarkUP are not Matched.Please Verify");
		    log.info("*** Validate Total Overhead & Markup - Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalPlastic_USD);
		    GettingText(TotalPlastic_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[473], "Actual and Expected Total plastic Cost(USD) are not Matched.Please Verify");
		    log.info("*** Validate Total Plastic Cost(USD)- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalPlastic);
		    String TotalPlastic_Expected=driver.findElement(TotalPlastic).getText();
		    CommonFunctions.AssertEqualsVerification(TotalPlastic_Expected, ActualValue, "Actual and Expected Total plastic Cost are not Matched.Please Verify");
		    log.info("*** Validate Total Plastic Cost- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalPurchased_USD);
		    GettingText(TotalPurchased_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[475], "Actual and Expected Total purchased Cost(USD) are not Matched.Please Verify");
		    log.info("*** Validate Total TotalPurchased Cost(USD)- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalPurchased);
		    String TotalPurchased_Expected=driver.findElement(TotalPurchased).getText();
		    CommonFunctions.AssertEqualsVerification(TotalPurchased_Expected, ActualValue, "Actual and Expected Total purchased Cost are not Matched.Please Verify");
		    log.info("*** Validate Total TotalPurchased Cost- Validated ***");
		    
		    
		    CommonFunctions.waitForElementTobeClickable(TotalSoftGoods_USD);
		    GettingText(TotalSoftGoods_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[477], "Actual and Expected Total SoftGood Cost(USD) are not Matched.Please Verify");
		    log.info("*** Validate Total TotalSoftGood Cost(USD)- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalsoftGoods);
		    String TotalSoftGoods_Expected=driver.findElement(TotalsoftGoods).getText();
		    CommonFunctions.AssertEqualsVerification(TotalSoftGoods_Expected, ActualValue, "Actual and Expected Total SoftGood Cost are not Matched.Please Verify");
		    log.info("*** Validate Total TotalSoftGood Cost Cost- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalChemical_USD);
		    GettingText(TotalChemical_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[479], "Actual and Expected Total chemical Cost(USD) are not Matched.Please Verify");
		    log.info("*** Validate Total TotalChemical Cost(USD)- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalChemical);
		    String TotalChemical_Expected=driver.findElement(TotalChemical).getText();
		    CommonFunctions.AssertEqualsVerification(TotalChemical_Expected, ActualValue, "Actual and Expected Total chemical Cost are not Matched.Please Verify");
		    log.info("*** Validate Total TotalChemical Cost Cost- Validated ***");
		    
		    
		    CommonFunctions.waitForElementTobeClickable(GeneralDecoLabor_USD);
		    GettingText(GeneralDecoLabor_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[481], "Actual and Expected Total GeneralDecoLabor Cost(USD) are not Matched.Please Verify");
		    log.info("*** Validate Total TotalGeneralDeco labor Cost(USD)- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(GeneralDecoLabor);
		    String TotalGeneralDeco_Expected=driver.findElement(GeneralDecoLabor).getText();
		    CommonFunctions.AssertEqualsVerification(TotalGeneralDeco_Expected, ActualValue, "Actual and Expected Total GeneralDecoLabor Cost are not Matched.Please Verify");
		    log.info("*** Validate Total TotalGeneralDecoLobor Cost Cost- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalModingLabor_USD);
		    GettingText(TotalModingLabor_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[483], "Actual and Expected Total TotalMoldingLabor Cost(USD) are not Matched.Please Verify");
		    log.info("*** Validate Total TotalModingLabor Cost(USD)- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalModingLabor);
		    String TotalMoldingLabor_Expected=driver.findElement(TotalModingLabor).getText();
		    CommonFunctions.AssertEqualsVerification(TotalMoldingLabor_Expected, ActualValue, "Actual and Expected Total TotalMoldingLabor Cost are not Matched.Please Verify");
		    log.info("*** Validate Total TotalModingLabor  Cost- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalElectronic_USD);
		    GettingText(TotalElectronic_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[485], "Actual and Expected Total TotalElectronic Cost(USD) are not Matched.Please Verify");
		    log.info("*** Validate Total TotalElectronic labor Cost(USD)- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalElectronic);
		    String TotalElectronicLabor_Expected=driver.findElement(TotalElectronic).getText();
		    CommonFunctions.AssertEqualsVerification(TotalElectronicLabor_Expected, ActualValue, "Actual and Expected  TotalElectronic Cost are not Matched.Please Verify");
		    log.info("*** Validate Total TotalElectronic  Cost- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalPackaging_USD);
		    GettingText(TotalPackaging_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[487], "Actual and Expected Total TotalPackaging Cost(USD) are not Matched.Please Verify");
		    log.info("*** Validate Total Packaging labor Cost(USD)- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalPackaging);
		    String TotalpackagingLabor_Expected=driver.findElement(TotalPackaging).getText();
		    CommonFunctions.AssertEqualsVerification(TotalpackagingLabor_Expected, ActualValue, "Actual and Expected  Total Packaging Cost are not Matched.Please Verify");
		    log.info("*** Validate Total Packaging labor Cost- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalOverheadMarkUP_USD);
		    GettingText(TotalOverheadMarkUP_USD);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[471], "Actual and Expected Total TTotalOverheadMarkUP Cost(USD) are not Matched.Please Verify");
		    log.info("*** Validate TotalOverheadMarkUP Cost(USD)- Validated ***");
		    
		    CommonFunctions.waitForElementTobeClickable(TotalOverheadMarkUP);
		    String TotaloverheadAndMarkUp_Expected=driver.findElement(TotalOverheadMarkUP).getText();
		    CommonFunctions.AssertEqualsVerification(TotaloverheadAndMarkUp_Expected, ActualValue, "Actual and Expected  Total TotaloverheadAndMarkUp are not Matched.Please Verify");
		    log.info("*** Validate Total TotalOverheadMarkUP labor Cost- Validated ***");
		}
		
		
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVaildationOfCostValues"+e);
			throw e;
		}
		return true;
	}
	
	
	
	
	
	
	
	
	
	
	
	public static boolean NavigateToRFQ(String [] data) throws Exception{
		try{
			 wait.until(ExpectedConditions.visibilityOfElementLocated(RFQHyperLink));
				CommonFunctions.waitForPageLoaded();
				CommonFunctions.clickButtonOrLink(RFQHyperLink, "HyperLink", "RFQHyperLink");
				//Clicking on RFQ tab
			 CommonFunctions.waitForPageLoaded();
				CloseOpenedExistingCostSheet();
				//Closing the Opened Cost Sheet
				SearchTheCostSheet(data);
				//Searching the Cost Sheet
				
				
				
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToRFQ"+e);
			throw e;
		}
		return true;
	}
	
	
	
/*public static boolean NavigateToTheWhatIfCostSheet(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(WhatIfCostSheetCheckBox));
			CommonFunctions.clickButtonOrLink(WhatIfCostSheetCheckBox, "CheckBox", "WhatIfCostSheetCheckBox");
			//Clicking the Check Box
			CommonFunctions.waitForElementTobeClickable(RunButton);
			CommonFunctions.clickButtonOrLink(RunButton, "Button", "RunButton");
			//Clicking on Run Button
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetUpdateButton));
			CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToTheWhatIfCostSheet"+e);
			throw e;
		}
		//return true;
		}*/
	

	
	public static boolean NavigatingToCostingTab(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingHyperLink));
			CommonFunctions.clickButtonOrLink(SourcingHyperLink, "SourcingHyperLink","Sourcing");
			//Clicking on Sourcing Tab
		
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostingHyperLink));
			//CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(CostingHyperLink, "HyperLink", "Costing");
			//Clicking on Costing Link
		    wait.until(ExpectedConditions.visibilityOfElementLocated(SortOption));
		    CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.visibilityOfElementLocated(Product.detailPageSeasonDD));
			 CommonFunctions.waitForPageLoaded();
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(Product.detailPageSeasonDD, data[3],"Season year");
            //CommonFunctions.handleAlertPopUp1();
            wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
            CommonFunctions.waitForPageLoaded();
            //CommonFunctions.waitForElementTobeClickable(SourcingDropDown);
            Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Source')]//following::select[1]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
   		     String RequiredValue=allOptions.get(i).getText();
   		    // System.out.println(RequiredValue);
   		     if(RequiredValue.contains(data[156]))
   		     {
   		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SourcingDropDown, RequiredValue, "Source DropDown Selection");
   		    	 wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
   		    	 CommonFunctions.waitForPageLoaded();
   		    	 break;
   		     }
   		    
            }
		    
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigatingToCostingTab"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean CreateWhatIFCostSheetForAssortment_Solid(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingHyperLink));
			CommonFunctions.clickButtonOrLink(SourcingHyperLink, "SourcingHyperLink","Sourcing");
			//Clicking on Sourcing Tab
		
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostingHyperLink));
			//CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(CostingHyperLink, "HyperLink", "Costing");
			//Clicking on Costing Link
			CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.visibilityOfElementLocated(SortOption));
			//Waiting for a Sort Button
		    Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Source')]//following::select[1]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
   		     String RequiredValue=allOptions.get(i).getText();
   		    // System.out.println(RequiredValue);
   		     if(RequiredValue.contains(data[156]))
   		     {
   		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SourcingDropDown, RequiredValue, "Source DropDown Selection");
   		    	 wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
   		    	 CommonFunctions.waitForPageLoaded();
   		    	 break;
   		     }
            }
            CommonFunctions.waitForElementTobeClickable(CostingActionDropDown);
			 Select dropdDown1 = new Select(driver.findElement(By.xpath("//select[@id='costingActions']")));
		     List<WebElement> allOptions1=dropdDown1.getOptions();
            for(int j=0;j<allOptions1.size();j++){
		     String RequiredValue1=allOptions1.get(j).getText();
		    // System.out.println(RequiredValue);
		     if(RequiredValue1.contains(data[191]))
		     {
		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostingActionDropDown, RequiredValue1, "Costing Drop down");
		     CommonFunctions.waitForPageLoaded();
		     break;
		     }
		     }
			wait.until(ExpectedConditions.titleIs(data[143]));
			CommonFunctions.waitForPageLoaded();
			CostingType=By.linkText(data[181]);
			CommonFunctions.waitForElementTobeClickable(CostingType);
			CommonFunctions.clickButtonOrLink(CostingType, "HyperLink", "CostingType");
			//Clicking on Costing Type
			wait.until(ExpectedConditions.titleIs(data[456]));
			CommonFunctions.waitForPageLoaded();
			 CommonFunctions.waitForElementTobeClickable(CostSheetWave);
		       CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetWave, data[161], "CostSheetWave");
		        //Selecting wave Value
		        CommonFunctions.waitForElementTobeClickable(CostSheetDomesticOrDIDropDown);
			    CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetDomesticOrDIDropDown, data[188], "DomesticOrDIDropDown");
			    //Selecting Domestic or DI value
			    CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
			    CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "CyrrencyDropDown");
			    //Selecting the Currency Value
			    CommonFunctions.waitForElementTobeClickable(CostSheetComments);
			    CommonFunctions.enterTextInTextboxUpdated(CostSheetComments, data[190], "Comments Text Box");
			    //Entering the Comments inside the Comment Text Box
			    CommonFunctions.waitForElementTobeClickable(ColorWayFirstOption);
			    CommonFunctions.clickButtonOrLink(ColorWayFirstOption, "Option", "ColorwatFirstOption");
			    //Clicking ColorWay First Option
			    CommonFunctions.waitForElementTobeClickable(ColorwayAddButton);
			    CommonFunctions.clickButtonOrLink(ColorwayAddButton, "hyper Link", "Add");
			    //Clicking add  button
			    CommonFunctions.waitForElementTobeClickable(ProductDevelopmentCost);
			    CommonFunctions.enterTextInTextboxUpdated(ProductDevelopmentCost, data[193], "ProductDevelopmentCost");
			    //Entering ProductDevelopmentCost value
			    CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterial);
			    CommonFunctions.enterTextInTextboxUpdated(MasterCartonPackagingMaterial, data[194], "MasterCartonPackagingMaterial");
			    //Entering MasterCartonPackagingMaterial value
			    CommonFunctions.waitForElementTobeClickable(MasterCortonLaborCost);
			    CommonFunctions.enterTextInTextboxUpdated(MasterCortonLaborCost, data[195], "MasterCortonLaborCost");
			    //Entering MasterCortonLaborCost value
			    CommonFunctions.waitForElementTobeClickable(MisCellaneousCost);
			    CommonFunctions.enterTextInTextboxUpdated(MisCellaneousCost, data[196], "MisCellaneousCost");
			    //Entering MisCellaneousCost value
			    CommonFunctions.waitForElementTobeClickable(ProductMarkUp);
			    CommonFunctions.enterTextInTextboxUpdated(ProductMarkUp, data[197], "ProductMarkUp");
			   //Entering ProductMarkUp value
			    CommonFunctions.waitForElementTobeClickable(Discount);
			    CommonFunctions.enterTextInTextboxUpdated(Discount, data[198], "Discount");
			   //Entering Discount value
			    CommonFunctions.waitForElementTobeClickable(Length);
			    CommonFunctions.enterTextInTextboxUpdated(Length, data[199], "Length");
			   //Entering Length value
			    CommonFunctions.waitForElementTobeClickable(Width);
			    CommonFunctions.enterTextInTextboxUpdated(Width, data[200], "Width");
			   //Entering Width value
			    CommonFunctions.waitForElementTobeClickable(Height);
			    CommonFunctions.enterTextInTextboxUpdated(Height, data[201], "Height");
			   //Entering Height value
			    CommonFunctions.waitForElementTobeClickable(FOBHongKongByFCL);
			    CommonFunctions.enterTextInTextboxUpdated(FOBHongKongByFCL, data[202], "FOBHongKongByFCL");
			   //Entering FOBHongKongByFCL value
			    CommonFunctions.waitForElementTobeClickable(FOBHongKongByLCL);
			    CommonFunctions.enterTextInTextboxUpdated(FOBHongKongByLCL, data[203], "FOBHongKongByLCL");
			   //Entering FOBHongKongByLCL value
			    CommonFunctions.waitForElementTobeClickable(FOBChinaByFCL);
			    CommonFunctions.enterTextInTextboxUpdated(FOBChinaByFCL, data[204], "FOBChinaByFCL");
			   //Entering FOBChinaByFCL value
			    CommonFunctions.waitForElementTobeClickable(FOBChinaByLCL);
			    CommonFunctions.enterTextInTextboxUpdated(FOBChinaByLCL, data[205], "FOBChinaByLCL");
			   //Entering FOBChinaByLCL value
			    CommonFunctions.waitForElementTobeClickable(FOBOthersByFCL);
			    CommonFunctions.enterTextInTextboxUpdated(FOBOthersByFCL, data[206], "FOBOthersByFCL");
			   //Entering FOBOthersByFCL value
			    CommonFunctions.waitForElementTobeClickable(FOBOthersByLCL);
			    CommonFunctions.enterTextInTextboxUpdated(FOBOthersByLCL, data[207], "FOBOthersByLCL");
			   //Entering FOBOthersByLCL value
			    CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
			    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "WhatIfCostSheetSaveButton");
			    //Clicking WhatIfCostSheetSaveButton 
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[144]));
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateWhatIFCostSheetForAssortment_Solid"+e);
			throw e;
		}
		return true;
	}
	public static boolean CreateWhatIFCostSheetForAssortment_SolidthroughRFQ(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingHyperLink));
			CommonFunctions.clickButtonOrLink(SourcingHyperLink, "SourcingHyperLink","Sourcing");
			//Clicking on Sourcing Tab
		    CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostingHyperLink));
			//CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(CostingHyperLink, "HyperLink", "Costing");
			//Clicking on Costing Link
			CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.visibilityOfElementLocated(SortOption));
			//Waiting for a Sort Button
		    Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Source')]//following::select[1]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
   		     String RequiredValue=allOptions.get(i).getText();
   		    // System.out.println(RequiredValue);
   		     if(RequiredValue.contains(data[156]))
   		     {
   		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SourcingDropDown, RequiredValue, "Source DropDown Selection");
   		    	 wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
   		    	 CommonFunctions.waitForPageLoaded();
   		    	 break;
   		     }
            }
                CommonFunctions.waitForElementTobeClickable(RFQPageActionDropDown);
    		    Select dropdDown1 = new Select(driver.findElement(By.xpath("//select[@id='prodseasonActions']")));
    		     List<WebElement> allOptions1=dropdDown1.getOptions();
                 for(int i=0;i<allOptions1.size();i++){
        		     String RequiredValue1=allOptions1.get(i).getText();
        		    // System.out.println(RequiredValue);
        		     if(RequiredValue1.contains(data[157]))
        		     {
        		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQPageActionDropDown, RequiredValue1, "Source DropDown Selection");
        		    	 CommonFunctions.waitForPageLoaded();
        		    	 wait.until(ExpectedConditions.titleIs(data[158]));
        		    	 break;
        		     }
                 }
        		     CommonFunctions.waitForElementTobeClickable(AllCheckBox);
        		     vendorCheckBox="//a[contains(text(),'"+data[159]+"')]//preceding::input[1]";
     		    	VendorCheckBox=By.xpath(vendorCheckBox);
        		     try{
        		    	driver.findElement(By.xpath("//input[@id='source_selectAllCheckBox']")).isSelected();
        		    	CommonFunctions.clickButtonOrLink(AllCheckBox, "CheckBox", "AllCheckBox");
        		    	//Unchecking the All cehckBox
        		    	try
        		    	{
        		    	CommonFunctions.waitForElementTobeClickable(VendorCheckBox);
        		    	CommonFunctions.clickButtonOrLink(VendorCheckBox, "CheckBox", "VendorCheckBox");
        		    	log.info(data[159]+" is only checked");
        		    	}
        		    	catch(Exception e){
        		    		fail=true;
        		    		log.error("User Should have Been added the "+data[159]+" as Suuplier");
        		    		throw e; 
        		    	}
        		    	}
        		     catch(Exception e){
        		    	 CommonFunctions.waitForElementTobeClickable(VendorCheckBox);
         		    	 CommonFunctions.clickButtonOrLink(VendorCheckBox, "CheckBox", "VendorCheckBox");
         		    	 log.info(data[158]+" is only checked");
        		     }
            
        		     CommonFunctions.waitForElementTobeClickable(SelectButton);
        		     CommonFunctions.clickButtonOrLink(SelectButton, "Button", "SelectButton");
        		     //Clicking Select Button
        		     CommonFunctions.waitForPageLoaded();
        		     wait.until(ExpectedConditions.visibilityOfElementLocated(RFQColorway));
        		     wait.until(ExpectedConditions.titleIs(data[158]));
        		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQColorway,ColorwayDropdownValue, "ColrwayDropDown");
        		     //Selecting colorway
        		     CommonFunctions.waitForElementTobeClickable(RFQWave);
        		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQWave, data[161], "WaveDropDown");
        		     //Selecting Wave
        		     CommonFunctions.waitForElementTobeClickable(RFQRequestDate);
        		     CommonFunctions.enterTextInTextboxUpdated(RFQRequestDate, data[162], "RFQRequestDate");
        		     //Entering the RFQ Request date
        		     CommonFunctions.waitForElementTobeClickable(RFQCutOffDate);
        		     CommonFunctions.enterTextInTextboxUpdated(RFQCutOffDate, data[163], "RFQ Cut Off date");
        		     //Entering RFQ Cutoff date
        		     CommonFunctions.waitForElementTobeClickable(RFQCreateButton);
        		     CommonFunctions.clickButtonOrLink(RFQCreateButton, "Button", "Create Button");
        		     //clicking Create Button
        		     wait.until(ExpectedConditions.titleIs(data[164]));
        		     CommonFunctions.waitForPageLoaded();
        		     CreateCostSheetTemplate(data);
        			//Create Cost Sheet Template
            
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateWhatIFCostSheetForAssortment_SolidthroughRFQ"+e);
			throw e;
		}
		return true;
		}
	
	
	public static boolean CreateVendorCostSheet_RetailItem(String [] data) throws Exception{
		try{
			NavigatingToCostingTabForRetailItem(data);
			//Navigating to Costing Tab
			CreateWhatIfCostSheetForRetailItemVendor(data);
			//Creating WhatIf Cost Sheet
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetUpdateButton));
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, data[458],"Cost Sheet Update Drop down");
			wait.until(ExpectedConditions.titleIs(data[459]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(PrimaryCostSheetCheckBox);
		    CommonFunctions.clickButtonOrLink(PrimaryCostSheetCheckBox, "Check Box", "Primary Cost Sheet Check Box");
			//Clicking on Primary Cost Sheet Check Box
			CommonFunctions.waitForElementTobeClickable(UpdateCostSheetSaveButton);
			CommonFunctions.clickButtonOrLink(UpdateCostSheetSaveButton, "UpdateCostSheetSaveButton", "UpdateCostSheetSaveButton");
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateVendorCostSheet_RetailItem1"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean NavigatingToCostingTabForRetailItem(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingHyperLink));
			CommonFunctions.clickButtonOrLink(SourcingHyperLink, "SourcingHyperLink","Sourcing");
			//Clicking on Sourcing Tab
		    CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostingHyperLink));
			//CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(CostingHyperLink, "HyperLink", "Costing");
			//Clicking on Costing Link
			CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.visibilityOfElementLocated(SortOption));
	
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigatingToCostingTabForRetailItem"+e);
			throw e;
		}
		return true;
	}
	public static boolean CreateWhatIfCostSheetForRetailItemVendor(String [] data) throws Exception{
		try{
			  wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
		         CommonFunctions.waitForPageLoaded();         
		             //CommonFunctions.waitForElementTobeClickable(SourcingDropDown);
		             Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Source')]//following::select[1]")));
				     List<WebElement> allOptions=dropdDown.getOptions();
		             for(int i=0;i<allOptions.size();i++){
		    		     String RequiredValue=allOptions.get(i).getText();
		    		    // System.out.println(RequiredValue);
		    		     if(RequiredValue.contains(data[156]))
		    		     {
		    		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SourcingDropDown, RequiredValue, "Source DropDown Selection");
		    		    	 wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
		    		    	 CommonFunctions.waitForPageLoaded();
		    		    	 break;
		    		     }
		             }
		    		     CommonFunctions.waitForElementTobeClickable(CostingActionDropDown);
		    			 Select dropdDown1 = new Select(driver.findElement(By.xpath("//select[@id='costingActions']")));
		    		     List<WebElement> allOptions1=dropdDown1.getOptions();
		                 for(int j=0;j<allOptions1.size();j++){
		     		     String RequiredValue1=allOptions1.get(j).getText();
		     		    // System.out.println(RequiredValue);
		     		     if(RequiredValue1.contains(data[190]))
		     		     {
		     		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostingActionDropDown, RequiredValue1, "Costing Drop down");
		     		     CommonFunctions.waitForPageLoaded();
		     		     break;
		     		     }
		     		     }
		    			wait.until(ExpectedConditions.titleIs(data[143]));
		    			CommonFunctions.waitForPageLoaded();
		    			CostingType=By.linkText(data[181]);
		    			CommonFunctions.waitForElementTobeClickable(CostingType);
		    			CommonFunctions.clickButtonOrLink(CostingType, "HyperLink", "CostingType");
		    			//Clicking on Costing Type
		    			wait.until(ExpectedConditions.titleIs(data[190]));
		    			CommonFunctions.waitForPageLoaded();
		    			CreateWhatIfCostSheetForRetailItem(data);
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateWhatIfCostSheet"+e);
			throw e;
		}
		return true;
	}
public static boolean navigateSpecificationThroughSideBar(String [] data) throws Exception{
		try{
			driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
			CommonFunctions.waitForPageLoaded();
			By Specification = By.linkText("Specifications");
			CommonFunctions.waitForElementTobeClickable(Specification);
			CommonFunctions.clickButtonOrLink(Specification, "HyperLink", "Specification");
			//Clicking on Specification Link
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
		    //Navigating to Content Frame 
	             }
		catch(Exception e){
			fail=true;
			log.error("Exception in navigateSpecificationThroughSideBar"+e);
			throw e;
				}
		catch(AssertionError er){
			fail=true;
			log.error("Assertion Error in navigateSpecificationThroughSideBar"+er);
			throw er;
		}
	return true;
	}
	
	
	public static boolean ApproveVendorSource(String [] data) throws Exception{
		try{
			  wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
	         CommonFunctions.waitForPageLoaded();         
	             //CommonFunctions.waitForElementTobeClickable(SourcingDropDown);
	             Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Source')]//following::select[1]")));
			     List<WebElement> allOptions=dropdDown.getOptions();
	             for(int i=0;i<allOptions.size();i++){
	    		     String RequiredValue=allOptions.get(i).getText();
	    		    // System.out.println(RequiredValue);
	    		     if(RequiredValue.contains(data[156]))
	    		     {
	    		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SourcingDropDown, RequiredValue, "Source DropDown Selection");
	    		    	 wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
	    		    	 CommonFunctions.waitForPageLoaded();
	    		    	 break;
	    		     }
	             }
	    		     CommonFunctions.waitForElementTobeClickable(VendorActionDropDown);
	    		     Select dropdDown1 = new Select(driver.findElement(By.xpath("//select[@id='sourcingActions']")));
				     List<WebElement> allOptions1=dropdDown1.getOptions();
		             for(int j=0;j<allOptions1.size();j++){
		    		     String RequiredValue1=allOptions1.get(j).getText();
		    		     System.out.println(RequiredValue1);
		    		     if(RequiredValue1.contains(data[179]))
		    		     {
		    		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(VendorActionDropDown, RequiredValue1, "VendorActionDropDown");
		    		    	 wait.until(ExpectedConditions.titleIs(data[454]));
		    		    	 CommonFunctions.waitForPageLoaded();
		    		    	 break;
		    		     }
		             }
		    		 CommonFunctions.waitForElementTobeClickable(ApproveDropDownSource);
		             CommonFunctions.selectFromDropDownByVisibleTextUpdated(ApproveDropDownSource, data[455], "SourceStatusDropDown");
		             //Selecting as Approved Status
		             CommonFunctions.waitForElementTobeClickable(SaveButtonOfCostSheet);
		             CommonFunctions.clickButtonOrLink(SaveButtonOfCostSheet, "SaveButtonOfCostSheet");
		             //Clicking on Save Button
		             wait.until(ExpectedConditions.titleIs(data[144]));
		             CommonFunctions.waitForPageLoaded();
		             
	             }
		catch(Exception e){
			fail=true;
			log.error("Exception in ApproveVendorSource");
			throw e;
				}
	return true;
	}
	
	public static boolean AddVendorSource(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(SanitySuite1.ActionsDropDown));
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='prodseasonActions']")));
			List<WebElement> allOptions1=dropdDown.getOptions();
            for(int i=0;i<allOptions1.size();i++){
 		     String RequiredValue=allOptions1.get(i).getText();
 		     System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[452]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(SanitySuite1.ActionsDropDown, RequiredValue, "Add Sourcing Configuration");
 		     break;
 		     }
           }
            wait.until(ExpectedConditions.titleIs(data[27]));
            CommonFunctions.waitForPageLoaded();
            CommonFunctions.waitForElementTobeClickable(SourcingLeadDropDown);
            CommonFunctions.selectFromDropDownByIndex(SourcingLeadDropDown, 1);
            //Selecting the Sourcing Lead
            CommonFunctions.waitForElementTobeClickable(SourcingHeadDropDown);
            CommonFunctions.selectFromDropDownByIndex(SourcingHeadDropDown, 1);
            //Selecting Sourcing Head
            CommonFunctions.gettingParentWindow();
            By Supplier =By.linkText("Supplier:");
            CommonFunctions.waitForElementTobeClickable(Supplier);
            CommonFunctions.clickButtonOrLink(Supplier, "Hyperlink", "Supplier");
            //Clicking on Supplier Link
            CommonFunctions.switchingChildWindow();
            CommonFunctions.waitForElementTobeClickable(NameTextBox);
            CommonFunctions.enterTextInTextboxUpdated(NameTextBox, data[453], "Suplier Name");
            //Entering the Vale In Name Text Box
            CommonFunctions.waitForElementTobeClickable(SearchProductButton);
            CommonFunctions.clickButtonOrLink(SearchProductButton, "Button", "Search Button");
            //Clicking Search Button
            wait.until(ExpectedConditions.visibilityOfElementLocated(ChooseColorWay));
            CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseColorWay");
            //Choosing the Source
            CommonFunctions.switchParentWindow();
            driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
		    //Switching Frame
		    CommonFunctions.waitForPageLoaded();
            wait.until(ExpectedConditions.visibilityOfElementLocated(CreateButtonOfSourcing));
            CommonFunctions.clickButtonOrLink(CreateButtonOfSourcing, "Button", "Create Button");
            //Clicking Create Button
            wait.until(ExpectedConditions.titleIs(data[144]));
            CommonFunctions.waitForPageLoaded();
            wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingHyperLink));
			CommonFunctions.clickButtonOrLink(SourcingHyperLink, "SourcingHyperLink","Sourcing");
			 CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AddVendorSource"+e);
			throw e;
				}
		return true;
	}
	
	public static boolean M01_ViewLineSheet(String [] data) throws Exception{
		try{
			AssertionVerification_DevelopmentView_PlaceHolder_HeadersAndOrders(data);
			//Assertion verfication of Developement View_PlaceHolder and Headers
			
		}
		catch(Exception e){
		fail=true;
		log.error("Exception in M01_ViewLineSheet"+e);
		throw e;
		}
		
		return true;
	}
	
	
	public static boolean AssertionVerification_DevelopmentView_PlaceHolder_HeadersAndOrders(String[] data) throws Exception{
		try{
			if(driver.findElements(lineSheetView).size() == 0) {
				driver.switchTo().defaultContent();
				CommonProjectFunctions.clickMySeasonLink();
				//Select Season Year
				CommonFunctions.selectFromDropDownByVisibleText(mySeasonYear, data[3]);
				//Click on Line Sheet link
				CommonFunctions.clickButtonOrLink(lineSheet, "link", "Line Sheet");
				wait.until(ExpectedConditions.titleIs(data[27]));
				CommonFunctions.waitForPageLoaded();
				driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");

				//Select Line sheet view
				CommonFunctions.waitForVisibilityOfElement(lineSheetView);
			}

			CommonFunctions.selectFromDropDownByVisibleText(lineSheetView, data[4]);
	//		if(driver.findElements(lsTable).size() == 0) {
				//click on Filter
				driver.findElement(Filter).click();
				//Select line sheet view filters
				CommonFunctions.selectFromDropDownByVisibleText(Filterdropdown, data[6]);
				//Again click on Filter
				CommonFunctions.clickButtonOrLink(Filter, "link", "Filter");

				//Put if condition , where it should select colorway only for 5 BU Views
				if(data[4].contains("Business Unit Forecast - ASIA")||(data[4].contains("Business Unit Forecast - EU"))||(data[2].contains("Business Unit Forecast - LAM"))||(data[2].contains("Business Unit Forecast - NA"))||(data[2].contains("Business Unit Forecast - PACIFIC")))
					//click on options link to select colorway option
				{
					CommonFunctions.clickButtonOrLink(options, "link", "options");
					//select colorway option from level dropdown
					CommonFunctions.selectFromDropDownByVisibleText(level, data[7]);
					//again click on options 
					CommonFunctions.clickButtonOrLink(options, "link", "options");
				}
				//select region 
				CommonFunctions.selectFromDropDownByVisibleText(ddRegion , data[8]);
				//select business unit
				CommonFunctions.selectFromDropDownByVisibleText(ddBU , data[9]);
	//		}
			//for Development plan view
			if(data[4].contains("Development Plan"))
			{
				CommonFunctions.clickButtonOrLink(options, "link", "options");
				//select product and placeholders from placeholders dropdown
				CommonFunctions.selectFromDropDownByVisibleText(placeholders, data[10]);
				//again click on options 
				CommonFunctions.clickButtonOrLink(options, "link", "options");
			}
			
			//for what if analyasis placeholder view
			if(data[4].contains("What-If Analysis - Placeholder"))
			{
				CommonFunctions.clickButtonOrLink(options, "link", "options");
				//select product and placeholders from placeholders dropdown
				CommonFunctions.selectFromDropDownByVisibleText(placeholders, data[11]);
				//again click on options 
				CommonFunctions.clickButtonOrLink(options, "link", "options");
			}
			//
			//for what if analysis product view
			if(data[4].contains("What-If Analysis - Product"))
			{
				CommonFunctions.clickButtonOrLink(options, "link", "options");
				//select product and placeholders from placeholders dropdown
				CommonFunctions.selectFromDropDownByVisibleText(placeholders, data[12]);
				//again click on options 
				CommonFunctions.clickButtonOrLink(options, "link", "options");
			}
			
			//click on Run
			CommonFunctions.clickButtonOrLink(Run, "link", "Run");
		//}
	

	}catch(Exception e){
		fail=true;
		log.error("Exception in Linesheetview()", e);
		throw e;
	}
	return true ;
}
	public static boolean verifyUserGroup(String[] data) throws Exception{
		try {
			if(!data[3].equalsIgnoreCase("(-- None --)")) {
				//Click on update table layout icon
				CommonFunctions.clickButtonOrLink(updateTableLayout, "Icon", "update table layout");
				wait.until(ExpectedConditions.titleIs("Update Report View"));
				CommonFunctions.waitForPageLoaded();
				strViewOwner = driver.findElement(viewOwner).getText();
				Assert.assertEquals(strViewOwner, data[3]);
				log.info("Owner Group verified for : "+strViewOwner);
				//Click on Cancel
				CommonFunctions.clickButtonOrLink(CostsheetExternalProduct.btnCancel, "btn", "Cancel");
			}
			else {
				Assert.assertEquals(driver.findElements(updateTableLayoutHidden).size(),1);
				log.info("For None Update icon is not present");
			}
		}catch(Exception e){
			fail=true;
			log.error("Exception in verifyUserGroup()", e);
			throw e;
		}
		return true;
	}
	
	public static boolean verifySequence(String[] data) throws Exception{
		try {
			int colIndex=1;
			int i=13;
			int j=1;
			CommonFunctions.waitForPageLoaded();
		    List<WebElement> col1=driver.findElements(By.xpath("//a[contains(@id,'COL')]"));
			
			//a[contains(text(),'Hide/Show columns')]//following::table[5]/tbody/tr[1]/td/a[2]
			
			System.out.println(col1.size());
			for(WebElement e: col1){
				colIndex=colIndex+1;
				System.out.println("UI data: "+ e.getText());
				System.out.println("excel data: "+data[i]);
				if(data[i].equalsIgnoreCase("NA")){
					break;
				}
				Assert.assertEquals(e.getText().trim(), data[i]);
				log.info("Col"+j+" :matched for "+ e.getText());
				i++;
				j++;
			}
			log.info("*****Sequence verified for: "+ data[2]+"*****"); 
		}catch(Exception e){
			fail=true;
			log.error("Exception in verifySequence()", e);
			return false;
		}
		return true;
	}

	public static boolean TC_28_viewLineSheet(String [] data) throws Exception{
		try{
			
			
			
			
			
			
			
			
			
			
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("M01 - View Line Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("M01 - View Line Sheet TEST CASE FAILED.PLEASE CHECK");
			 }
		
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_28_viewLineSheet"+e);
			throw e;
		}
	return true;
	}
	
	
	public static boolean TC_27_ValidateBOMChangesOnVendorRetailItemCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchRetailItemProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchTheCostSheet(data);
			//Searching the Cost Sheet
			getRetailItemInternalVendorCostSheetAttributeValues(data);
			//get Internal Retail Item Cost Sheet Values
			navigateToMaterialTabThroughSideBar(data);
			//Navigate To materials tab
			UpdateBOMValueRetailItemVendor(data);
			//updating the BOM value
			AssertionVerificationOfBOMValuesandCostSheetValues(data);
			//Assertion Verification of BOM Values and cost Sheet Values 
			
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC58 - Validate BOM Changes on Vendor Retail Item Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC58 - Validate BOM Changes on Vendor Retail Item Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			 }
		
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_26_ValidateBOMChangesOnVendorProductCostSheet"+e);
			throw e;
		}
	return true;
	}
	
	public static boolean AssertionVerificationOfBOMValuesandCostSheetValues(String [] data) throws Exception{
		try{
			 wait.until(ExpectedConditions.visibilityOfElementLocated(HeaderAttributesPlusIcon));
	            CommonFunctions.clickButtonOrLink(HeaderAttributesPlusIcon, "Image", "HeaderAttributesPlusIcon");
	            //Clicking on Header Attribute + Icon
	            CommonFunctions.waitForElementTobeClickable(CurrencyInBOM);
	            String BOM_Currency=driver.findElement(CurrencyInBOM).getText();
	            log.info("Currency in BOM is "+BOM_Currency);
	            //BOm Currency
	            CommonFunctions.waitForElementTobeClickable(TotalPlastic);
	            String TotalPlasticCost_BOM=driver.findElement(TotalPlastic).getText();
	            log.info("Total Platic Cost value in BOM is "+TotalPlasticCost_BOM);
	            //getting Total Plastic Cost
	            CommonFunctions.waitForElementTobeClickable(TotalPurchasedParts);
	            String TotalPurchasedPartsCost_BOM=driver.findElement(TotalPurchasedParts).getText();
	            log.info("Total Purchased Parts Cost value in BOM is "+TotalPurchasedPartsCost_BOM);
	            //getting Total Purchased Cost
	            CommonFunctions.waitForElementTobeClickable(TotalsoftGoods);
	            String TotalSoftGoodsCost_BOM=driver.findElement(TotalsoftGoods).getText();
	            log.info("Total soft Goods Cost value in BOM is "+TotalSoftGoodsCost_BOM);
	            //getting Total Soft Goods Cost
	            CommonFunctions.waitForElementTobeClickable(TotalChemicalsCost);
	            String TotalChemicalCost_BOM=driver.findElement(TotalChemicalsCost).getText();
	            log.info("Total Chemical Cost value in BOM is "+TotalChemicalCost_BOM);
	            //getting Total Chemical Cost
	            CommonFunctions.waitForElementTobeClickable(TotalGeneral_DecoLaborCost);
	            String TotalGeneralLaborCost_BOM=driver.findElement(TotalGeneral_DecoLaborCost).getText();
	            log.info("Total General Deco Labor Cost value in BOM is "+TotalGeneralLaborCost_BOM);
	            //getting Total GeneralDecoLabor Cost
	            CommonFunctions.waitForElementTobeClickable(TotalMoldingLaborCost);
	            String TotalMoldingLaborCost_BOM=driver.findElement(TotalMoldingLaborCost).getText();
	            log.info("Total Molding Labor Cost value in BOM is "+TotalMoldingLaborCost_BOM);
	            //getting Total Molding Labor Cost
	            CommonFunctions.waitForElementTobeClickable(TotalElectronicCost);
	            String TotalElectronicCost_BOM=driver.findElement(TotalElectronicCost).getText();
	            log.info("Total Electronic Cost value in BOM is "+TotalElectronicCost_BOM);
	            //getting Total Electronic Labor Cost
	            CommonFunctions.waitForElementTobeClickable(TotalPackagingCost);
	            String TotalPackagingCost_BOM=driver.findElement(TotalPackagingCost).getText();
	            log.info("Total Packaging Cost value in BOM is "+TotalPackagingCost_BOM);
	            //getting Total Packaging Labor Cost
	            CommonFunctions.waitForElementTobeClickable(TotalMarkUpCost);
	            String TotalMarkUpCost_BOM=driver.findElement(TotalMarkUpCost).getText();
	            log.info("Total Mark Up Cost is "+TotalMarkUpCost_BOM);
	            //Getting Total Mark Up Values
	            NavigateToCostSheetThroughSideBar(data);
				//Navigating to Costing side Bar
	            CloseOpenedExistingCostSheet();
				//Closing the Opened Cost Sheet
				SearchTheCostSheet(data);
				//Searching the Cost Sheet
				
				CommonFunctions.waitForElementTobeClickable(CurrencyType);
				String QuoteCurrency_CostSheet=driver.findElement(CurrencyType).getText();
				log.info("CostSheetQuoteCurrency is "+CostSheetQuoteCurrency);
				CommonFunctions.AssertEqualsVerification(QuoteCurrency_CostSheet, BOM_Currency, "BOM and Cost Sheet Currencies are not matched.Assertion failed.Please Verify");
				log.info("*** Validate Quote Currency - validated ***");
				//Assertion verification of BOM and Cost Sheet Currency Verification
				
				CommonFunctions.waitForElementTobeClickable(RetailItemInternal_PackagingMaterialvalue);
				String CostSheet_PackagingCostValue=driver.findElement(RetailItemInternal_PackagingMaterialvalue).getText();
				log.info("RetailItemInternal_PackagingMaterialvalue is "+TotalPackagingCostValue);
				CommonFunctions.AssertEqualsVerification(TotalPackagingCost_BOM, CostSheet_PackagingCostValue, "BOM and Cost Sheet Packaging Costs are not matched.Assertion failed.Please Verify");
				log.info("*** Validate Packaging Material - validated ***");
				//Assertion verification of BOM and Cost Sheet Packaging Verification
				
				CommonFunctions.waitForElementTobeClickable(RetailItemInternal_PlasticMaterialvalue);
				String CostSheet_PlasticCostValue=driver.findElement(RetailItemInternal_PlasticMaterialvalue).getText();
				log.info("RetailItemInternal_PlasticMaterialvalue is "+CostSheet_PlasticCostValue);
				CommonFunctions.AssertEqualsVerification(CostSheet_PlasticCostValue, TotalPlasticCost_BOM, "BOM and Cost Sheet Plastic Costs are not matched.Assertion failed.Please Verify");
				log.info("*** Validate Plastic Material - validated ***");
				//Assertion verification of BOM and Cost Sheet Plastic Verification
				
				CommonFunctions.waitForElementTobeClickable(RetailItemInternal_GeneralDecovalue);
				String GeneralOrDeco_CostSheetValue=driver.findElement(RetailItemInternal_GeneralDecovalue).getText();
				log.info("RetailItemInternal_GeneralDecovalue is "+GeneralOrDeco_CostSheetValue);
				CommonFunctions.AssertEqualsVerification(GeneralOrDeco_CostSheetValue, TotalGeneralLaborCost_BOM, "BOM and Cost Sheet GeneralOrDeco Costs are not matched.Assertion failed.Please Verify");
				log.info("*** Validate General / Deco Labor Cost ***");
				//Assertion verification of BOM and Cost Sheet general Deco Verification
				
				CommonFunctions.waitForElementTobeClickable(RetailItemInternal_ChemicalMaterialvalue);
				String CostSheet_ChemicalCostValue=driver.findElement(RetailItemInternal_ChemicalMaterialvalue).getText();
				log.info("RetailItemInternal_ChemicalMaterialvalue is "+CostSheet_ChemicalCostValue);
				CommonFunctions.AssertEqualsVerification(CostSheet_ChemicalCostValue, TotalChemicalCost_BOM, "BOM and Cost Sheet Chemical Material Costs are not matched.Assertion failed.Please Verify");
				log.info("*** Validate Chemical Material - validated");
				//Assertion verification of BOM and Cost Sheet chemical Verification
				
				CommonFunctions.waitForElementTobeClickable(RetailItemInternal_MoldingLaborCostvalue);
				String CostSheet_MoldingLaborCostValue=driver.findElement(RetailItemInternal_MoldingLaborCostvalue).getText();
				log.info("RetailItemInternal_MoldingLaborCostvalue is "+CostSheet_MoldingLaborCostValue);
				CommonFunctions.AssertEqualsVerification(CostSheet_MoldingLaborCostValue, TotalMoldingLaborCost_BOM, "BOM and Cost Sheet Molding labor Costs are not matched.Assertion failed.Please Verify");
				log.info("*** Validate Molding Labor Cost - validated ***");
				//Assertion verification of BOM and Cost Sheet Molding labor Verification 
				
				CommonFunctions.waitForElementTobeClickable(RetailItemInternal_PurchasedMaterialvalue);
				String CostSheet_PurchasedCostValue=driver.findElement(RetailItemInternal_PurchasedMaterialvalue).getText();
				log.info("RetailItemInternal_PurchasedMaterialvalue is "+CostSheet_PurchasedCostValue);
				CommonFunctions.AssertEqualsVerification(CostSheet_PurchasedCostValue, TotalPurchasedPartsCost_BOM, "BOM and Cost Sheet Purchased Material Costs are not matched.Assertion failed.Please Verify");
				log.info("*** Validate Purchased Material - validated ***");
				//Assertion verification of BOM and Cost Sheet Purchased material Verification 
				
				CommonFunctions.waitForElementTobeClickable(RetailItemInternal_OverHeadAndMarkUpvalue);
				String CostSheet_ContentAndOverHeadMarkupCostValue=driver.findElement(RetailItemInternal_OverHeadAndMarkUpvalue).getText();
				log.info("RetailItemInternal_OverHeadAndMarkUpvalue is "+CostSheet_ContentAndOverHeadMarkupCostValue);
				CommonFunctions.AssertEqualsVerification(CostSheet_ContentAndOverHeadMarkupCostValue, TotalMarkUpCost_BOM, "BOM and Cost Sheet OverHead and markUp are not matched.Assertion failed.Please Verify");
				log.info("*** Validate Markup - validated");
				//Assertion verification of BOM and Cost Sheet Mark Up Material Verification 
				
				CommonFunctions.waitForElementTobeClickable(RetailItemInternal_SoftGoodsMaterialvalue);
				String CostSheet_SoftGoodsCostValue=driver.findElement(RetailItemInternal_SoftGoodsMaterialvalue).getText();
				log.info("RetailItemInternal_SoftGoodsMaterialvalue is "+CostSheet_SoftGoodsCostValue);
				CommonFunctions.AssertEqualsVerification(CostSheet_SoftGoodsCostValue, TotalSoftGoodsCost_BOM, "BOM and Cost Sheet SoftGoods are not matched.Assertion failed.Please Verify");
				log.info("*** Validate Soft Goods Material - validated ***");
				//Assertion verification of BOM and Cost Sheet Soft Goods Material Verification 
				
				CommonFunctions.waitForElementTobeClickable(RetailItemInternal_ElectronicMaterialValue);
				String CostSheet_ElectronicCostValue=driver.findElement(RetailItemInternal_ElectronicMaterialValue).getText();
				log.info("RetailItemInternal_ElectronicMaterialValue is "+CostSheet_ElectronicCostValue);
				CommonFunctions.AssertEqualsVerification(CostSheet_ElectronicCostValue, TotalElectronicCost_BOM, "BOM and Cost Sheet Electronic Costs are not matched.Assertion failed.Please Verify");
				log.info("*** Validate Electronic Material - validated ***");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in getRetailItemBOMValues"+e);
			throw e;
		}
		return true;
	}
	public static boolean UpdateBOMValueRetailItemVendor(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(BOMid);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='bomId']")));
			List<WebElement> allOptions1=dropdDown.getOptions();
            for(int i=0;i<allOptions1.size();i++){
 		     String RequiredValue=allOptions1.get(i).getText();
 		     System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[389]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMid, RequiredValue, "BOM Id selection");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
           }
            CommonFunctions.waitForElementTobeClickable(BOMUpdateButton);
            CommonFunctions.clickButtonOrLink(BOMUpdateButton, "Button", "Update Button");
            //Clicking on Update Button
            wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
            CommonFunctions.waitForPageLoaded();
            wait.until(ExpectedConditions.visibilityOfElementLocated(AddRowsButton));
            CommonFunctions.waitForPageLoaded();
			
            CommonFunctions.waitForElementTobeClickable(MasterCarton_MOQPer_K);
            CommonFunctions.clickButtonOrLink(MasterCarton_MOQPer_K, "Table", "MasterCarton_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(MasterCarton_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(MasterCarton_MOQPer_K_InnerTextBox, "MasterCarton_MOQPer_K_InnerTextBoxMasterCarton_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(MasterCarton_MOQPer_K_InnerTextBox, data[390], "MasterCarton_MOQPer_K_InnerTextBox");
            //Entering the value in PlasticsMQQPerK
            
           CommonFunctions.waitForElementTobeClickable(MasterCarton_LeadTime);
            CommonFunctions.clickButtonOrLink(MasterCarton_LeadTime, "Table", "MasterCarton_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(MasterCarton_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(MasterCarton_LeadTme_InnerTextBox, "MasterCarton_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(MasterCarton_LeadTme_InnerTextBox, data[390], "MasterCarton_LeadTme_InnerTextBox");
            //Entering the value in MasterCarton_LeadTme_InnerTextBox 
            
            CommonFunctions.waitForElementTobeClickable(MasterCarton_UnitPrice);
            CommonFunctions.clickButtonOrLink(MasterCarton_UnitPrice, "Table", "MasterCarton_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(MasterCarton_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(MasterCarton_UnitPrice_InnerTextBox, "MasterCarton_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(MasterCarton_UnitPrice_InnerTextBox, data[390], "MasterCarton_UnitPrice_InnerTextBox");
            //Entering the value in PlasticsUnitPrice
            
            CommonFunctions.waitForElementTobeClickable(MasterCarton_UsagePerK);
            CommonFunctions.clickButtonOrLink(MasterCarton_UsagePerK, "Table", "MasterCarton_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(MasterCarton_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(MasterCarton_UsagePerK_InnerTextBox, "MasterCarton_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(MasterCarton_UsagePerK_InnerTextBox, data[390], "MasterCarton_UsagePerK_InnerTextBox");
            //Entering the value in PlasticsUsagePerK
            
            CommonFunctions.waitForElementTobeClickable(MasterCarton_MarkUp);
            CommonFunctions.clickButtonOrLink(MasterCarton_MarkUp, "Table", "MasterCarton_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Mastercarton_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(Mastercarton_MarkUP_InnerTextBox, "Mastercarton_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Mastercarton_MarkUP_InnerTextBox, data[390], "Mastercarton_MarkUP_InnerTextBox");
            //Entering the value in PlasticsMarkUP
            
            CommonFunctions.waitForElementTobeClickable(MasterCarton_Unit);
            CommonFunctions.clickButtonOrLink(MasterCarton_Unit, "Table", "MasterCarton_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(MasterCarton_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(MasterCarton_Unit_InnerDropDown, data[391], "MasterCarton_Unit_InnerDropDown");
            //Selecting the Unit in Plastics
            
            
            
            CommonFunctions.waitForElementTobeClickable(Labor_MOQPer_K);
            CommonFunctions.clickButtonOrLink(Labor_MOQPer_K, "Table", "Labor_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(Labor_MOQPer_K_InnerTextBox, "Labor_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Labor_MOQPer_K_InnerTextBox, data[392], "Labor_MOQPer_K_InnerTextBox");
            //Entering the value in Chemical_MQQPerK 
            
            CommonFunctions.waitForElementTobeClickable(Labor_LeadTime);
            CommonFunctions.clickButtonOrLink(Labor_LeadTime, "Table", "Labor_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(Labor_LeadTme_InnerTextBox, "Labor_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Labor_LeadTme_InnerTextBox, data[392], "Labor_LeadTme_InnerTextBox");
            //Entering the value in Labor_LeadTme_InnerTextBox 
            
            CommonFunctions.waitForElementTobeClickable(Labor_UnitPrice);
            CommonFunctions.clickButtonOrLink(Labor_UnitPrice, "Table", "Labor_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(Labor_UnitPrice_InnerTextBox, "Labor_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Labor_UnitPrice_InnerTextBox, data[392], "Labor_UnitPrice_InnerTextBox");
            //Entering the value in Chemical_UnitPrice
            
            CommonFunctions.waitForElementTobeClickable(Labor_UsagePerK);
            CommonFunctions.clickButtonOrLink(Labor_UsagePerK, "Table", "Labor_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(Labor_UsagePerK_InnerTextBox, "Labor_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Labor_UsagePerK_InnerTextBox, data[392], "Labor_UsagePerK_InnerTextBox");
            //Entering the value in Chemical_UsagePerK
            
            CommonFunctions.waitForElementTobeClickable(Labor_MarkUp);
            CommonFunctions.clickButtonOrLink(Labor_MarkUp, "Table", "Labor_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(Labor_MarkUP_InnerTextBox, "Labor_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Labor_MarkUP_InnerTextBox, data[392], "Labor_MarkUP_InnerTextBox");
            //Entering the value in Chemical_MarkUp
            
            CommonFunctions.waitForElementTobeClickable(Labor_Unit);
            CommonFunctions.clickButtonOrLink(Labor_Unit, "Table", "Labor_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(Labor_Unit_InnerDropDown, data[393], "Labor_Unit_InnerDropDown");
            //Selecting the Chemical_Unit
            
            
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_MOQPer_K);
            CommonFunctions.clickButtonOrLink(Miscellaneous_MOQPer_K, "Table", "Miscellaneous_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(Miscellaneous_MOQPer_K_InnerTextBox, "Miscellaneous_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Miscellaneous_MOQPer_K_InnerTextBox, data[394], "Miscellaneous_MOQPer_K_InnerTextBox");
            //Entering the value in PurchasedParts_MQQPER_K 
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_LeadTime);
            CommonFunctions.clickButtonOrLink(Miscellaneous_LeadTime, "Table", "Miscellaneous_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(Miscellaneous_LeadTme_InnerTextBox, "Miscellaneous_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Miscellaneous_LeadTme_InnerTextBox, data[394], "Miscellaneous_LeadTme_InnerTextBox");
            //Entering the value in Labor_LeadTme_InnerTextBox 
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_UnitPrice);
            CommonFunctions.clickButtonOrLink(Miscellaneous_UnitPrice, "Table", "Miscellaneous_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(Miscellaneous_UnitPrice_InnerTextBox, "Miscellaneous_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Miscellaneous_UnitPrice_InnerTextBox, data[394], "Miscellaneous_UnitPrice_InnerTextBox");
            //Entering the value in PurchasedParts_UnitPrice
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_UsagePerK);
            CommonFunctions.clickButtonOrLink(Miscellaneous_UsagePerK, "Table", "Miscellaneous_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(Miscellaneous_UsagePerK_InnerTextBox, "Miscellaneous_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Miscellaneous_UsagePerK_InnerTextBox, data[394], "Miscellaneous_UsagePerK_InnerTextBox");
            //Entering the value in PurchasedParts_UsagePerk
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_MarkUp);
            CommonFunctions.clickButtonOrLink(Miscellaneous_MarkUp, "Table", "Miscellaneous_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(Miscellaneous_MarkUP_InnerTextBox, "Miscellaneous_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Miscellaneous_MarkUP_InnerTextBox, data[394], "Miscellaneous_MarkUP_InnerTextBox");
            //Entering the value in PurchasedParts_MarkUp
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_Unit);
            CommonFunctions.clickButtonOrLink(Miscellaneous_Unit, "Table", "Miscellaneous_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(Miscellaneous_Unit_InnerDropDown, data[395], "Miscellaneous_Unit_InnerDropDown");
            //Selecting the PurchasedParts_Unit Drop Down Value
            
            
            CommonFunctions.waitForElementTobeClickable(FourthRow_MOQPer_K);
            CommonFunctions.clickButtonOrLink(FourthRow_MOQPer_K, "Table", "FourthRow_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FourthRow_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(FourthRow_MOQPer_K_InnerTextBox, "FourthRow_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(FourthRow_MOQPer_K_InnerTextBox, data[396], "FourthRow_MOQPer_K_InnerTextBox");
            //Entering the value in Electronics_MOQPer_K 
            
            CommonFunctions.waitForElementTobeClickable(FourthRow_LeadTime);
            CommonFunctions.clickButtonOrLink(FourthRow_LeadTime, "Table", "FourthRow_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FourthRow_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(FourthRow_LeadTme_InnerTextBox, "FourthRow_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(FourthRow_LeadTme_InnerTextBox, data[396], "FourthRow_LeadTme_InnerTextBox");
            //Entering the value in Electronics_LeadTme_InnerTextBox 
            
            CommonFunctions.waitForElementTobeClickable(FourthRow_UnitPrice);
            CommonFunctions.clickButtonOrLink(FourthRow_UnitPrice, "Table", "FourthRow_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FourthRow_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(FourthRow_UnitPrice_InnerTextBox, "FourthRow_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(FourthRow_UnitPrice_InnerTextBox, data[396], "FourthRow_UnitPrice_InnerTextBox");
            //Entering the value in Electronics_UnitPrice
            
            CommonFunctions.waitForElementTobeClickable(FourthRow_UsagePerK);
            CommonFunctions.clickButtonOrLink(FourthRow_UsagePerK, "Table", "FourthRow_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FourthRow_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(FourthRow_UsagePerK_InnerTextBox, "FourthRow_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(FourthRow_UsagePerK_InnerTextBox, data[396], "FourthRow_UsagePerK_InnerTextBox");
            //Entering the value in Electronics_UsagePerk
            
            CommonFunctions.waitForElementTobeClickable(FourthRow_MarkUp);
            CommonFunctions.clickButtonOrLink(FourthRow_MarkUp, "Table", "FourthRow_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FourthRow_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(FourthRow_MarkUP_InnerTextBox, "FourthRow_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(FourthRow_MarkUP_InnerTextBox, data[396], "FourthRow_MarkUP_InnerTextBox");
            //Entering the value in Electronics_MarkUp
            
            CommonFunctions.waitForElementTobeClickable(FourthRow_Unit);
            CommonFunctions.clickButtonOrLink(FourthRow_Unit, "Table", "FourthRow_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FourthRow_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(FourthRow_Unit_InnerDropDown, data[395], "FourthRow_Unit_InnerDropDown");
            //Selecting the FourthRow_Unit Drop Down Value
            
            CommonFunctions.waitForElementTobeClickable(FifthRow_MOQPer_K);
            CommonFunctions.clickButtonOrLink(FifthRow_MOQPer_K, "Table", "FifthRow_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FifthRow_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(FifthRow_MOQPer_K_InnerTextBox, "FifthRow_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(FifthRow_MOQPer_K_InnerTextBox, data[397], "FifthRow_MOQPer_K_InnerTextBox");
            //Entering the value in SoftGoods__MOQPer_K 
            
            CommonFunctions.waitForElementTobeClickable(FifthRow_LeadTime);
            CommonFunctions.clickButtonOrLink(FifthRow_LeadTime, "Table", "FifthRow_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FifthRow_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(FifthRow_LeadTme_InnerTextBox, "FifthRow_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(FifthRow_LeadTme_InnerTextBox, data[397], "FifthRow_LeadTme_InnerTextBox");
            //Entering the value in softGoods_LeadTme_InnerTextBox */
            
            CommonFunctions.waitForElementTobeClickable(FifthRow_UnitPrice);
            CommonFunctions.clickButtonOrLink(FifthRow_UnitPrice, "Table", "FifthRow_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FifthRow_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(FifthRow_UnitPrice_InnerTextBox, "FifthRow_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(FifthRow_UnitPrice_InnerTextBox, data[397], "FifthRow_UnitPrice_InnerTextBox");
            //Entering the value in SoftGoods_UnitPrice
            
            CommonFunctions.waitForElementTobeClickable(FifthRow_UsagePerK);
            CommonFunctions.clickButtonOrLink(FifthRow_UsagePerK, "Table", "FifthRow_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FifthRow_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(FifthRow_UsagePerK_InnerTextBox, "FifthRow_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(FifthRow_UsagePerK_InnerTextBox, data[397], "FifthRow_UsagePerK_InnerTextBox");
            //Entering the value in SoftGoods__UsagePerk
            
            CommonFunctions.waitForElementTobeClickable(FifthRow_MarkUp);
            CommonFunctions.clickButtonOrLink(FifthRow_MarkUp, "Table", "FifthRow_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FifthRow_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(FifthRow_MarkUP_InnerTextBox, "FifthRow_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(FifthRow_MarkUP_InnerTextBox, data[397], "FifthRow_MarkUP_InnerTextBox");
            //Entering the value in SoftGoods__MarkUp
            
            CommonFunctions.waitForElementTobeClickable(FifthRow_Unit);
            CommonFunctions.clickButtonOrLink(FifthRow_Unit, "Table", "FifthRow_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(FifthRow_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(FifthRow_Unit_InnerDropDown, data[395], "FifthRow_Unit_InnerDropDown");
            //Selecting the SoftGoods__Unit Drop Down Value
            
            
            CommonFunctions.waitForElementTobeClickable(SixthRow_MOQPer_K);
            CommonFunctions.clickButtonOrLink(SixthRow_MOQPer_K, "Table", "SixthRow_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SixthRow_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(SixthRow_MOQPer_K_InnerTextBox, "SixthRow_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(SixthRow_MOQPer_K_InnerTextBox, data[398], "SixthRow_MOQPer_K_InnerTextBox");
            //Entering the value in Packaging__MOQPer_K 
            
            CommonFunctions.waitForElementTobeClickable(SixthRow_LeadTime);
            CommonFunctions.clickButtonOrLink(SixthRow_LeadTime, "Table", "SixthRow_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SixthRow_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(SixthRow_LeadTme_InnerTextBox, "SixthRow_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(SixthRow_LeadTme_InnerTextBox, data[398], "SixthRow_LeadTme_InnerTextBox");
            //Entering the value in Packaging_LeadTme_InnerTextBox 
            
            CommonFunctions.waitForElementTobeClickable(SixthRow_UnitPrice);
            CommonFunctions.clickButtonOrLink(SixthRow_UnitPrice, "Table", "SixthRow_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SixthRow_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(SixthRow_UnitPrice_InnerTextBox, "SixthRow_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(SixthRow_UnitPrice_InnerTextBox, data[398], "SixthRow_UnitPrice_InnerTextBox");
            //Entering the value in Packaging_UnitPrice
            
            CommonFunctions.waitForElementTobeClickable(SixthRow_UsagePerK);
            CommonFunctions.clickButtonOrLink(SixthRow_UsagePerK, "Table", "SixthRow_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SixthRow_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(SixthRow_UsagePerK_InnerTextBox, "SixthRow_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(SixthRow_UsagePerK_InnerTextBox, data[398], "SixthRow_UsagePerK_InnerTextBox");
            //Entering the value in Packaging__UsagePerk
            
            CommonFunctions.waitForElementTobeClickable(SixthRow_MarkUp);
            CommonFunctions.clickButtonOrLink(SixthRow_MarkUp, "Table", "SixthRow_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SixthRow_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(SixthRow_MarkUP_InnerTextBox, "SixthRow_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(SixthRow_MarkUP_InnerTextBox, data[398], "SixthRow_MarkUP_InnerTextBox");
            //Entering the value in Packaging__MarkUp
            
            CommonFunctions.waitForElementTobeClickable(SixthRow_Unit);
            CommonFunctions.clickButtonOrLink(SixthRow_Unit, "Table", "SixthRow_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SixthRow_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(SixthRow_Unit_InnerDropDown, data[395], "SixthRow_Unit_InnerDropDown");
            //Selecting the Packaging__Unit Drop Down Value
            
            
            CommonFunctions.waitForElementTobeClickable(SeventhRow_MOQPer_K);
            CommonFunctions.clickButtonOrLink(SeventhRow_MOQPer_K, "Table", "SeventhRow_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SeventhRow_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(SeventhRow_MOQPer_K_InnerTextBox, "SeventhRow_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(SeventhRow_MOQPer_K_InnerTextBox, data[399], "SeventhRow_MOQPer_K_InnerTextBox");
            //Entering the value in General/DecoLabor_MOQPer_K 
            
            CommonFunctions.waitForElementTobeClickable(SeventhRow_LeadTime);
            CommonFunctions.clickButtonOrLink(SeventhRow_LeadTime, "Table", "SeventhRow_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SeventhRow_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(SeventhRow_LeadTme_InnerTextBox, "SeventhRow_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(SeventhRow_LeadTme_InnerTextBox, data[399], "SeventhRow_LeadTme_InnerTextBox");
            //Entering the value in Labor_LeadTme_InnerTextBox 
            
            CommonFunctions.waitForElementTobeClickable(SeventhRow_UnitPrice);
            CommonFunctions.clickButtonOrLink(SeventhRow_UnitPrice, "Table", "SeventhRow_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SeventhRow_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(SeventhRow_UnitPrice_InnerTextBox, "SeventhRow_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(SeventhRow_UnitPrice_InnerTextBox, data[399], "SeventhRow_UnitPrice_InnerTextBox");
            //Entering the value in General/DecoLabor_UnitPrice
            
            CommonFunctions.waitForElementTobeClickable(SeventhRow_UsagePerK);
            CommonFunctions.clickButtonOrLink(SeventhRow_UsagePerK, "Table", "SeventhRow_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SeventhRow_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(SeventhRow_UsagePerK_InnerTextBox, "SeventhRow_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(SeventhRow_UsagePerK_InnerTextBox, data[399], "SeventhRow_UsagePerK_InnerTextBox");
            //Entering the value in General/DecoLabor__UsagePerk
            
            CommonFunctions.waitForElementTobeClickable(SeventhRow_MarkUp);
            CommonFunctions.clickButtonOrLink(SeventhRow_MarkUp, "Table", "SeventhRow_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SeventhRow_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(SeventhRow_MarkUP_InnerTextBox, "SeventhRow_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(SeventhRow_MarkUP_InnerTextBox, data[399], "SeventhRow_MarkUP_InnerTextBox");
            //Entering the value in General/DecoLabor__MarkUp
            
            CommonFunctions.waitForElementTobeClickable(SeventhRow_Unit);
            CommonFunctions.clickButtonOrLink(SeventhRow_Unit, "Table", "SeventhRow_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(SeventhRow_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(SeventhRow_Unit_InnerDropDown, data[395], "SeventhRow_Unit_InnerDropDown");
            //Selecting the General/DecoLabor__Unit Drop Down Value
            
            CommonFunctions.waitForElementTobeClickable(EighthRow_MOQPer_K);
            CommonFunctions.clickButtonOrLink(EighthRow_MOQPer_K, "Table", "EighthRow_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(EighthRow_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(EighthRow_MOQPer_K_InnerTextBox, "EighthRow_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(EighthRow_MOQPer_K_InnerTextBox, data[400], "EighthRow_MOQPer_K_InnerTextBox");
            //Entering the value in MoldingLabor_MOQPer_K 
            
            CommonFunctions.waitForElementTobeClickable(EighthRow_LeadTime);
            CommonFunctions.clickButtonOrLink(EighthRow_LeadTime, "Table", "EighthRow_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(EighthRow_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(EighthRow_LeadTme_InnerTextBox, "EighthRow_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(EighthRow_LeadTme_InnerTextBox, data[400], "EighthRow_LeadTme_InnerTextBox");
            //Entering the value in Labor_LeadTme_InnerTextBox 
            
            CommonFunctions.waitForElementTobeClickable(EighthRow_UnitPrice);
            CommonFunctions.clickButtonOrLink(EighthRow_UnitPrice, "Table", "EighthRow_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(EighthRow_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(EighthRow_UnitPrice_InnerTextBox, "EighthRow_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(EighthRow_UnitPrice_InnerTextBox, data[400], "EighthRow_UnitPrice_InnerTextBox");
            //Entering the value in MoldingLabor_UnitPrice
            
            CommonFunctions.waitForElementTobeClickable(EighthRow_UsagePerK);
            CommonFunctions.clickButtonOrLink(EighthRow_UsagePerK, "Table", "EighthRow_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(EighthRow_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(EighthRow_UsagePerK_InnerTextBox, "EighthRow_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(EighthRow_UsagePerK_InnerTextBox, data[400], "EighthRow_UsagePerK_InnerTextBox");
            //Entering the value in MoldingLabor_UsagePerk
            
            CommonFunctions.waitForElementTobeClickable(EighthRow_MarkUp);
            CommonFunctions.clickButtonOrLink(EighthRow_MarkUp, "Table", "EighthRow_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(EighthRow_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(EighthRow_MarkUP_InnerTextBox, "EighthRow_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(EighthRow_MarkUP_InnerTextBox, data[400], "EighthRow_MarkUP_InnerTextBox");
            //Entering the value in MoldingLabor_MarkUp
            
            CommonFunctions.waitForElementTobeClickable(EighthRow_Unit);
            CommonFunctions.clickButtonOrLink(EighthRow_Unit, "Table", "EighthRow_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(EighthRow_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(EighthRow_Unit_InnerDropDown, data[395], "EighthRow_Unit_InnerDropDown");
            //Selecting the MoldingLabor_Unit Drop Down Value
            
            CommonFunctions.waitForElementTobeClickable(HeaderAttributes);
            CommonFunctions.clickButtonOrLink(HeaderAttributes, "Button", "HeaderAttributes");
            //Clicking Header Attributes
            wait.until(ExpectedConditions.visibilityOfElementLocated(BOMCurrencyDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMCurrencyDropDown, data[168], "BOMCurrencyDropDown");
            //Selecting the Currency Value
            
            
            CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.btnSaveAndCheckIn);
			CommonFunctions.clickButtonOrLink(InternalBOMSoftG.btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			//Clicking on Save And Check In Button
			CommonFunctions.handleAlertPopUp1();
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			wait.until(ExpectedConditions.titleIs(data[222]));
			CommonFunctions.waitForPageLoaded();
		
            
			
			
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateBOMValueReatilItemVendor"+e);
			throw e;
		}
		return true;
	}
	
	
	
	
	public static boolean getRetailItemInternalVendorCostSheetAttributeValues(String [] data){
		try{
			CommonFunctions.waitForElementTobeClickable(CurrencyType);
			CostSheetQuoteCurrency=driver.findElement(CurrencyType).getText();
			log.info("CostSheetQuoteCurrency is "+CostSheetQuoteCurrency);
			//Cost Sheet Quote Currency
			CommonFunctions.waitForElementTobeClickable(RetailItemInternal_PackagingMaterialvalue);
			TotalPackagingCostValue=driver.findElement(RetailItemInternal_PackagingMaterialvalue).getText();
			log.info("RetailItemInternal_PackagingMaterialvalue is "+TotalPackagingCostValue);
			//RetailItemInternal_PackagingMaterialvalue 
			
			CommonFunctions.waitForElementTobeClickable(RetailItemInternal_PlasticMaterialvalue);
			TotalPlasticCostValue=driver.findElement(RetailItemInternal_PlasticMaterialvalue).getText();
			log.info("RetailItemInternal_PlasticMaterialvalue is "+TotalPlasticCostValue);
			//RetailItemInternal_PlasticMaterialvalue 
			
			CommonFunctions.waitForElementTobeClickable(RetailItemInternal_GeneralDecovalue);
			TotalGeneralOrDecoCostValue=driver.findElement(RetailItemInternal_GeneralDecovalue).getText();
			log.info("RetailItemInternal_GeneralDecovalue is "+TotalGeneralOrDecoCostValue);
			//RetailItemInternal_GeneralDecovalue 
			
			CommonFunctions.waitForElementTobeClickable(RetailItemInternal_ChemicalMaterialvalue);
			TotalChemicalCostValue=driver.findElement(RetailItemInternal_ChemicalMaterialvalue).getText();
			log.info("RetailItemInternal_ChemicalMaterialvalue is "+TotalChemicalCostValue);
			//RetailItemInternal_ChemicalMaterialvalue 
			
			CommonFunctions.waitForElementTobeClickable(RetailItemInternal_MoldingLaborCostvalue);
			TotalMoldingLaborCostValue=driver.findElement(RetailItemInternal_MoldingLaborCostvalue).getText();
			log.info("RetailItemInternal_MoldingLaborCostvalue is "+TotalMoldingLaborCostValue);
			//RetailItemInternal_MoldingLaborCostvalue 
			
			CommonFunctions.waitForElementTobeClickable(RetailItemInternal_PurchasedMaterialvalue);
			TotalPurchasedCostValue=driver.findElement(RetailItemInternal_PurchasedMaterialvalue).getText();
			log.info("RetailItemInternal_PurchasedMaterialvalue is "+TotalPurchasedCostValue);
			//RetailItemInternal_PurchasedMaterialvalue 
			
			CommonFunctions.waitForElementTobeClickable(RetailItemInternal_OverHeadAndMarkUpvalue);
			TotalContentAndOverHeadMarkupCostValue=driver.findElement(RetailItemInternal_OverHeadAndMarkUpvalue).getText();
			log.info("RetailItemInternal_OverHeadAndMarkUpvalue is "+TotalContentAndOverHeadMarkupCostValue);
			//RetailItemInternal_OverHeadAndMarkUpvalue
			
			CommonFunctions.waitForElementTobeClickable(RetailItemInternal_SoftGoodsMaterialvalue);
			TotalSoftGoodsCostValue=driver.findElement(RetailItemInternal_SoftGoodsMaterialvalue).getText();
			log.info("RetailItemInternal_SoftGoodsMaterialvalue is "+TotalSoftGoodsCostValue);
			//RetailItemInternal_SoftGoodsMaterialvalue
			
			CommonFunctions.waitForElementTobeClickable(RetailItemInternal_ElectronicMaterialValue);
			TotalElectronicCostValue=driver.findElement(RetailItemInternal_ElectronicMaterialValue).getText();
			log.info("RetailItemInternal_ElectronicMaterialValue is "+RetailItemInternal_ElectronicMaterialValue);
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in getRetailItemInternalVendorCostSheetAttributeValues"+e);
			throw e;
		}
	return true;	
	}
	
	
	
	
	
	
	
	
	
	
	public static boolean TC_26_ValidateBOMChangesOnVendorProductCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchTheCostSheet(data);
			//Searching the Cost Sheet
			getVendorCostSheetDetails(data);
			//get Vendor Cost Sheet Details
			navigateToMaterialTabThroughSideBar(data);
			//Navigate To materials tab
			UpdateBOMValue(data);
			//Updating the BOM value
			getBOMValues(data);
			//Getting a BOM Values
			NavigateToCostSheetThroughSideBar(data);
			//Navigating to Costing side Bar
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchTheCostSheet(data);
			//Searching the Cost Sheet
			//UpdateCurrenCyConversionRate_TC_24(data);
			//Update Currency Conversion rate
			//AddBOMInAssortmentVendorCostSheet(data);
			//Add BOM in Assortment Cost values
			AssertionVerficationOfVendorCostSheetValues(data);
			//Assertion Verification Of Cost values
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC57 - Validate BOM Changes on Vendor Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC57 - Validate BOM Changes on Vendor Product Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			 }
		
			
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_26_ValidateBOMChangesOnVendorProductCostSheet"+e);
			throw e;
		}
	return true;
	}
	
	public static boolean UpdateBOMValue(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(BOMid);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='bomId']")));
			List<WebElement> allOptions1=dropdDown.getOptions();
            for(int i=0;i<allOptions1.size();i++){
 		     String RequiredValue=allOptions1.get(i).getText();
 		     System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[389]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMid, RequiredValue, "BOM Id selection");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
           }
            CommonFunctions.waitForElementTobeClickable(BOMUpdateButton);
            CommonFunctions.clickButtonOrLink(BOMUpdateButton, "Button", "Update Button");
            //Clicking on Update Button
            wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
            CommonFunctions.waitForPageLoaded();
            wait.until(ExpectedConditions.visibilityOfElementLocated(AddRowsButton));
            CommonFunctions.waitForPageLoaded();
            CommonFunctions.waitForElementTobeClickable(MasterCarton_MOQPer_K);
            CommonFunctions.clickButtonOrLink(MasterCarton_MOQPer_K, "Table", "MasterCarton_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(MasterCarton_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(MasterCarton_MOQPer_K_InnerTextBox, "MasterCarton_MOQPer_K_InnerTextBoxMasterCarton_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(MasterCarton_MOQPer_K_InnerTextBox, data[390], "MasterCarton_MOQPer_K_InnerTextBox");
            //Entering the value in PlasticsMQQPerK
            
           CommonFunctions.waitForElementTobeClickable(MasterCarton_LeadTime);
            CommonFunctions.clickButtonOrLink(MasterCarton_LeadTime, "Table", "MasterCarton_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(MasterCarton_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(MasterCarton_LeadTme_InnerTextBox, "MasterCarton_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(MasterCarton_LeadTme_InnerTextBox, data[390], "MasterCarton_LeadTme_InnerTextBox");
            //Entering the value in MasterCarton_LeadTme_InnerTextBox 
            
            CommonFunctions.waitForElementTobeClickable(MasterCarton_UnitPrice);
            CommonFunctions.clickButtonOrLink(MasterCarton_UnitPrice, "Table", "MasterCarton_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(MasterCarton_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(MasterCarton_UnitPrice_InnerTextBox, "MasterCarton_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(MasterCarton_UnitPrice_InnerTextBox, data[390], "MasterCarton_UnitPrice_InnerTextBox");
            //Entering the value in PlasticsUnitPrice
            
            CommonFunctions.waitForElementTobeClickable(MasterCarton_UsagePerK);
            CommonFunctions.clickButtonOrLink(MasterCarton_UsagePerK, "Table", "MasterCarton_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(MasterCarton_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(MasterCarton_UsagePerK_InnerTextBox, "MasterCarton_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(MasterCarton_UsagePerK_InnerTextBox, data[390], "MasterCarton_UsagePerK_InnerTextBox");
            //Entering the value in PlasticsUsagePerK
            
            CommonFunctions.waitForElementTobeClickable(MasterCarton_MarkUp);
            CommonFunctions.clickButtonOrLink(MasterCarton_MarkUp, "Table", "MasterCarton_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Mastercarton_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(Mastercarton_MarkUP_InnerTextBox, "Mastercarton_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Mastercarton_MarkUP_InnerTextBox, data[390], "Mastercarton_MarkUP_InnerTextBox");
            //Entering the value in PlasticsMarkUP
            
            CommonFunctions.waitForElementTobeClickable(MasterCarton_Unit);
            CommonFunctions.clickButtonOrLink(MasterCarton_Unit, "Table", "MasterCarton_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(MasterCarton_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(MasterCarton_Unit_InnerDropDown, data[391], "MasterCarton_Unit_InnerDropDown");
            //Selecting the Unit in Plastics
            
            
            
            CommonFunctions.waitForElementTobeClickable(Labor_MOQPer_K);
            CommonFunctions.clickButtonOrLink(Labor_MOQPer_K, "Table", "Labor_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(Labor_MOQPer_K_InnerTextBox, "Labor_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Labor_MOQPer_K_InnerTextBox, data[392], "Labor_MOQPer_K_InnerTextBox");
            //Entering the value in Chemical_MQQPerK 
            
            CommonFunctions.waitForElementTobeClickable(Labor_LeadTime);
            CommonFunctions.clickButtonOrLink(Labor_LeadTime, "Table", "Labor_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(Labor_LeadTme_InnerTextBox, "Labor_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Labor_LeadTme_InnerTextBox, data[392], "Labor_LeadTme_InnerTextBox");
            //Entering the value in Labor_LeadTme_InnerTextBox 
            
            CommonFunctions.waitForElementTobeClickable(Labor_UnitPrice);
            CommonFunctions.clickButtonOrLink(Labor_UnitPrice, "Table", "Labor_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(Labor_UnitPrice_InnerTextBox, "Labor_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Labor_UnitPrice_InnerTextBox, data[392], "Labor_UnitPrice_InnerTextBox");
            //Entering the value in Chemical_UnitPrice
            
            CommonFunctions.waitForElementTobeClickable(Labor_UsagePerK);
            CommonFunctions.clickButtonOrLink(Labor_UsagePerK, "Table", "Labor_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(Labor_UsagePerK_InnerTextBox, "Labor_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Labor_UsagePerK_InnerTextBox, data[392], "Labor_UsagePerK_InnerTextBox");
            //Entering the value in Chemical_UsagePerK
            
            CommonFunctions.waitForElementTobeClickable(Labor_MarkUp);
            CommonFunctions.clickButtonOrLink(Labor_MarkUp, "Table", "Labor_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(Labor_MarkUP_InnerTextBox, "Labor_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Labor_MarkUP_InnerTextBox, data[392], "Labor_MarkUP_InnerTextBox");
            //Entering the value in Chemical_MarkUp
            
            CommonFunctions.waitForElementTobeClickable(Labor_Unit);
            CommonFunctions.clickButtonOrLink(Labor_Unit, "Table", "Labor_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Labor_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(Labor_Unit_InnerDropDown, data[393], "Labor_Unit_InnerDropDown");
            //Selecting the Chemical_Unit
            
            
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_MOQPer_K);
            CommonFunctions.clickButtonOrLink(Miscellaneous_MOQPer_K, "Table", "Miscellaneous_MOQPer_K");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_MOQPer_K_InnerTextBox));
            CommonFunctions.clearTextBox(Miscellaneous_MOQPer_K_InnerTextBox, "Miscellaneous_MOQPer_K_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Miscellaneous_MOQPer_K_InnerTextBox, data[394], "Miscellaneous_MOQPer_K_InnerTextBox");
            //Entering the value in PurchasedParts_MQQPER_K 
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_LeadTime);
            CommonFunctions.clickButtonOrLink(Miscellaneous_LeadTime, "Table", "Miscellaneous_LeadTime");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_LeadTme_InnerTextBox));
            CommonFunctions.clearTextBox(Miscellaneous_LeadTme_InnerTextBox, "Miscellaneous_LeadTme_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Miscellaneous_LeadTme_InnerTextBox, data[394], "Miscellaneous_LeadTme_InnerTextBox");
            //Entering the value in Labor_LeadTme_InnerTextBox 
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_UnitPrice);
            CommonFunctions.clickButtonOrLink(Miscellaneous_UnitPrice, "Table", "Miscellaneous_UnitPrice");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_UnitPrice_InnerTextBox));
            CommonFunctions.clearTextBox(Miscellaneous_UnitPrice_InnerTextBox, "Miscellaneous_UnitPrice_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Miscellaneous_UnitPrice_InnerTextBox, data[394], "Miscellaneous_UnitPrice_InnerTextBox");
            //Entering the value in PurchasedParts_UnitPrice
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_UsagePerK);
            CommonFunctions.clickButtonOrLink(Miscellaneous_UsagePerK, "Table", "Miscellaneous_UsagePerK");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_UsagePerK_InnerTextBox));
            CommonFunctions.clearTextBox(Miscellaneous_UsagePerK_InnerTextBox, "Miscellaneous_UsagePerK_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Miscellaneous_UsagePerK_InnerTextBox, data[394], "Miscellaneous_UsagePerK_InnerTextBox");
            //Entering the value in PurchasedParts_UsagePerk
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_MarkUp);
            CommonFunctions.clickButtonOrLink(Miscellaneous_MarkUp, "Table", "Miscellaneous_MarkUp");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_MarkUP_InnerTextBox));
            CommonFunctions.clearTextBox(Miscellaneous_MarkUP_InnerTextBox, "Miscellaneous_MarkUP_InnerTextBox");
            CommonFunctions.enterTextInTextboxUpdated(Miscellaneous_MarkUP_InnerTextBox, data[394], "Miscellaneous_MarkUP_InnerTextBox");
            //Entering the value in PurchasedParts_MarkUp
            
            CommonFunctions.waitForElementTobeClickable(Miscellaneous_Unit);
            CommonFunctions.clickButtonOrLink(Miscellaneous_Unit, "Table", "Miscellaneous_Unit");
            wait.until(ExpectedConditions.visibilityOfElementLocated(Miscellaneous_Unit_InnerDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(Miscellaneous_Unit_InnerDropDown, data[395], "Miscellaneous_Unit_InnerDropDown");
            //Selecting the PurchasedParts_Unit Drop Down Value
            
            
            CommonFunctions.waitForElementTobeClickable(HeaderAttributes);
            CommonFunctions.clickButtonOrLink(HeaderAttributes, "Button", "HeaderAttributes");
            //Clicking Header Attributes
            wait.until(ExpectedConditions.visibilityOfElementLocated(BOMCurrencyDropDown));
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMCurrencyDropDown, data[168], "BOMCurrencyDropDown");
            //Selecting the Currency Value
            CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.btnSaveAndCheckIn);
			CommonFunctions.clickButtonOrLink(InternalBOMSoftG.btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			//Clicking on Save And Check In Button
			CommonFunctions.handleAlertPopUp1();
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			wait.until(ExpectedConditions.titleIs(data[222]));
			CommonFunctions.waitForPageLoaded();
		
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateBOMValue "+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean getVendorCostSheetDetails(String [] data){
		try{
		CommonFunctions.waitForElementTobeClickable(QuoteCurrencyInCostSheet);
		String ActualQuoteCurrency = driver.findElement(QuoteCurrencyInCostSheet).getText();
		log.info("The Value of Quote currency is "+ActualQuoteCurrency);
		//Getting Quote Currency Value
		CommonFunctions.waitForElementTobeClickable(TotalMasterCartonPackagingCostInCostSheet);
		String ActualTotalMasterCartonPackagingCostInCostSheet =driver.findElement(TotalMasterCartonPackagingCostInCostSheet).getText();
		log.info("The Value of Total Master Carton Packaging Cost In Cost Sheet is "+ActualTotalMasterCartonPackagingCostInCostSheet);
		//Getting Total Master Carton Packaging Cost
		CommonFunctions.waitForElementTobeClickable(TotalMasterCartonLaborCostInCostSheet);
		String ActualTotalMasterCartonLaborCostInCostSheet =driver.findElement(TotalMasterCartonLaborCostInCostSheet).getText();
		log.info("The Value of Total Master Carton Labor Cost In Cost Sheet is "+ActualTotalMasterCartonLaborCostInCostSheet);
	    //Assertion Verification of totalMasterCartonLaborCost
		CommonFunctions.waitForElementTobeClickable(TotalMiscellaneousCostInCostSheet);
		String ActualTotalMiscellaneousCostInCostSheet =driver.findElement(TotalMiscellaneousCostInCostSheet).getText();
		log.info("The Value of Total Miscellaneous Cost In Cost Sheet In Cost Sheet is "+ActualTotalMiscellaneousCostInCostSheet);
		//Assertion Verification of totalMiscellaneousCostInBOM
		CommonFunctions.waitForElementTobeClickable(TotalProductMarkUpInCostSheet);
		String ActualTotalProductMarkUpInCostSheet =driver.findElement(TotalProductMarkUpInCostSheet).getText();
		//Assertion Verification of totalMarkUpCost
		log.info("The Value of Total Product Mark up In Cost Sheet In Cost Sheet is "+ActualTotalProductMarkUpInCostSheet);
		
	}
	catch(Exception e){
		fail=true;
		log.error("Exception in getVendorCostSheetDetails"+e);
		throw e;
	}
	return true;
}
	public static boolean TC_25_AssociateBOMToInternalProductCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			SelectBOMandGetBOMValues(data);
			//Getting a BOM Values
			NavigateToCostSheetThroughSideBar(data);
			//Navigating to Costing side Bar
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchTheCostSheet(data);
			//Searching the Cost Sheet
			UpdateCurrenCyConversionRate_TC_24(data);
			//Update Currency Conversion rate
			AddBOMInAssortmentCostSheet(data);
			//Add BOM in Assortment Cost values
			AssertionVerficationOfCostValues(data);
			//Assertion Verification Of Cost values
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC47- Associate BOM to Internal Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC47- Associate BOM to Internal Product Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			 }
			MakeDefaultValuesOfCostSheet(data);
			
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_25_AssociateBOMToInternalProductCostSheet"+e);
			throw e;
		}
	return true;
	}
	
	public static boolean  AssertionVerficationOfCostValues(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(BOMIterationInCostSheet);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(BOMIterationInCostSheet, "BOMIertaion"), "BOM Iteration is Not Present.Please Verify.Assertion Failed");
			String BOMItertion=driver.findElement(BOMIterationInCostSheet).getText();
			log.info("BOM ieration is "+BOMIterationInCostSheet);
			log.info("*** Validate BOM Iteration- validated ***");
			//verifying BOM Iteration
			
			CommonFunctions.waitForElementTobeClickable(QuoteCurrencyInCostSheet);
			String ActualQuoteCurrency = driver.findElement(QuoteCurrencyInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualQuoteCurrency, QuoteCurrencyInBOM, "Actual and Expected Quote currencied are Not Matched.Assertion failed.Please Check");
			//Verifying the Quote Currency in BOM
			log.info("*** Validate Quote Currency -validated ***");
			
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRateInCostSheet);
			String ActualCurrencyConversionRateInCostSheet= driver.findElement(CurrencyConversionRateInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualCurrencyConversionRateInCostSheet, data[175], "Actual and expected Quote Currencied are not Matched.Assertion failed.Please Verify");
			log.info("*** Validate Currency Conversion Rate - validated ***");
			//Validating the Currency Conversion Rate
			CommonFunctions.waitForElementTobeClickable(TotalMasterCartonPackagingCostInCostSheet);
			String ActualTotalMasterCartonPackagingCostInCostSheet =driver.findElement(TotalMasterCartonPackagingCostInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualTotalMasterCartonPackagingCostInCostSheet, totalMasterCartonPackagingCostInBOM, "Actual and Expected TotalMasterCartonPackagingCostInCostSheet are not Mactched.Assertion failed.Please Verify");
			log.info("*** Validate Master Carton Packaging Material - validated ***");
			//Assertion Verification of TotalMasterCartonPackagingCostInCostSheet
			CommonFunctions.waitForElementTobeClickable(TotalMasterCartonLaborCostInCostSheet);
			String ActualTotalMasterCartonLaborCostInCostSheet =driver.findElement(TotalMasterCartonLaborCostInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualTotalMasterCartonLaborCostInCostSheet, totalMasterCartonLaborCost, "Actual and Expected TotalMasterCartonLaborCostInCostSheet are not Mactched.Assertion failed.Please Verify");
			log.info("*** Validate Master Carton Packaging Labor Cost - validated ***");
			//Assertion Verification of totalMasterCartonLaborCost
			CommonFunctions.waitForElementTobeClickable(TotalMiscellaneousCostInCostSheet);
			String ActualTotalMiscellaneousCostInCostSheet =driver.findElement(TotalMiscellaneousCostInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualTotalMiscellaneousCostInCostSheet, totalMiscellaneousCostInBOM, "Actual and Expected TotalMiscellaneousCostInCostSheet are not Mactched.Assertion failed.Please Verify");
			log.info("*** Validate Miscellaneous Material - validated ***");
			//Assertion Verification of totalMiscellaneousCostInBOM
			CommonFunctions.waitForElementTobeClickable(TotalProductMarkUpInCostSheet);
			String ActualTotalProductMarkUpInCostSheet =driver.findElement(TotalProductMarkUpInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualTotalProductMarkUpInCostSheet, totalMarkUpCost, "Actual and Expected TotalProductMarkUpInCostSheet are not Mactched.Assertion failed.Please Verify");
			log.info("*** Validate Product Markup - validated ***");
			//Assertion Verification of totalMarkUpCost
			
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfCostValues"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean  AssertionVerficationOfVendorCostSheetValues(String [] data){
		try{
			CommonFunctions.waitForElementTobeClickable(QuoteCurrencyInCostSheet);
			String ActualQuoteCurrency = driver.findElement(QuoteCurrencyInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualQuoteCurrency, QuoteCurrencyInBOM, "Actual and Expected Quote currencied are Not Matched.Assertion failed.Please Check");
			//Verifying the Quote Currency in BOM
			log.info("*** Validate Quote Currency -validated ***");
			CommonFunctions.waitForElementTobeClickable(TotalMasterCartonPackagingCostInCostSheet);
			String ActualTotalMasterCartonPackagingCostInCostSheet =driver.findElement(TotalMasterCartonPackagingCostInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualTotalMasterCartonPackagingCostInCostSheet, totalMasterCartonPackagingCostInBOM, "Actual and Expected TotalMasterCartonPackagingCostInCostSheet are not Mactched.Assertion failed.Please Verify");
			log.info("*** Validate Master Carton Packaging Material - validated ***");
			//Assertion Verification of TotalMasterCartonPackagingCostInCostSheet
			CommonFunctions.waitForElementTobeClickable(TotalMasterCartonLaborCostInCostSheet);
			String ActualTotalMasterCartonLaborCostInCostSheet =driver.findElement(TotalMasterCartonLaborCostInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualTotalMasterCartonLaborCostInCostSheet, totalMasterCartonLaborCost, "Actual and Expected TotalMasterCartonLaborCostInCostSheet are not Mactched.Assertion failed.Please Verify");
			log.info("*** Validate Master Carton Packaging Labor Cost - validated ***");
			//Assertion Verification of totalMasterCartonLaborCost
			CommonFunctions.waitForElementTobeClickable(TotalMiscellaneousCostInCostSheet);
			String ActualTotalMiscellaneousCostInCostSheet =driver.findElement(TotalMiscellaneousCostInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualTotalMiscellaneousCostInCostSheet, totalMiscellaneousCostInBOM, "Actual and Expected TotalMiscellaneousCostInCostSheet are not Mactched.Assertion failed.Please Verify");
			log.info("*** Validate Miscellaneous Material - validated ***");
			//Assertion Verification of totalMiscellaneousCostInBOM
			CommonFunctions.waitForElementTobeClickable(TotalProductMarkUpInCostSheet);
			String ActualTotalProductMarkUpInCostSheet =driver.findElement(TotalProductMarkUpInCostSheet).getText();
			CommonFunctions.AssertEqualsVerification(ActualTotalProductMarkUpInCostSheet, totalMarkUpCost, "Actual and Expected TotalProductMarkUpInCostSheet are not Mactched.Assertion failed.Please Verify");
			log.info("*** Validate Product Markup - validated ***");
			//Assertion Verification of totalMarkUpCost
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfVendorCostSheetValues"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean SelectBOMandGetBOMValues(String [] data) throws Exception{
		try{
			driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
		    CommonFunctions.waitForElementTobeClickable(MaterialTabThroughSideBar);
			CommonFunctions.clickButtonOrLink(MaterialTabThroughSideBar, "HyperLink", "MaterialTabThroughSideBar");
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(BOMid);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='bomId']")));
			List<WebElement> allOptions1=dropdDown.getOptions();
            for(int i=0;i<allOptions1.size();i++){
 		     String RequiredValue=allOptions1.get(i).getText();
 		     //System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[389]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMid, RequiredValue, "BOM Id selection");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
           }
            
            wait.until(ExpectedConditions.visibilityOfElementLocated(HeaderAttributesPlusIcon));
            CommonFunctions.clickButtonOrLink(HeaderAttributesPlusIcon, "Image", "HeaderAttributesPlusIcon");
            //Clicking on Header Attribute + Icon
            wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMasterCartonPackagingCostInBOM));
            totalMasterCartonPackagingCostInBOM =driver.findElement(TotalMasterCartonPackagingCostInBOM).getText();
            log.info("totalMasterCartonPackagingCostInBOM is "+totalMasterCartonPackagingCostInBOM);
            //getting totalMasterCartonPackagingCostInBOM in BOM to Compare
            wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMiscellaneousCostInBOM));
            totalMiscellaneousCostInBOM =driver.findElement(TotalMiscellaneousCostInBOM).getText();
            log.info("totalMiscellaneousCostInBOM is "+totalMiscellaneousCostInBOM);
            //getting totalMiscellaneousCostInBOM in BOM to Compare
            wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMasterCartonLaborCostInBOM));
            totalMasterCartonLaborCost =driver.findElement(TotalMasterCartonLaborCostInBOM).getText();
            log.info("totalMasterCartonLaborCost is "+totalMasterCartonLaborCost);
            //getting totalMasterCartonLaborCost in BOM to Compare
            wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMarkUpCostInBOM));
            totalMarkUpCost =driver.findElement(TotalMarkUpCostInBOM).getText();
            log.info("TotalMarkUpCost is "+totalMarkUpCost);
            //getting totalMarkUpCost in BOM to Compare
            wait.until(ExpectedConditions.visibilityOfElementLocated(CurrencyInBOM));
            QuoteCurrencyInBOM=driver.findElement(CurrencyInBOM).getText();
            log.info("QuoteCurrencyInBOM is "+QuoteCurrencyInBOM);
            }
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectBOMandGetBOMValues"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean getBOMValues(String [] data) throws Exception{
		try{
		    wait.until(ExpectedConditions.visibilityOfElementLocated(HeaderAttributesPlusIcon));
            CommonFunctions.clickButtonOrLink(HeaderAttributesPlusIcon, "Image", "HeaderAttributesPlusIcon");
            //Clicking on Header Attribute + Icon
            wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMasterCartonPackagingCostInBOM));
            totalMasterCartonPackagingCostInBOM =driver.findElement(TotalMasterCartonPackagingCostInBOM).getText();
            log.info("totalMasterCartonPackagingCostInBOM is "+totalMasterCartonPackagingCostInBOM);
            //getting totalMasterCartonPackagingCostInBOM in BOM to Compare
            wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMiscellaneousCostInBOM));
            totalMiscellaneousCostInBOM =driver.findElement(TotalMiscellaneousCostInBOM).getText();
            log.info("totalMiscellaneousCostInBOM is "+totalMiscellaneousCostInBOM);
            //getting totalMiscellaneousCostInBOM in BOM to Compare
            wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMasterCartonLaborCostInBOM));
            totalMasterCartonLaborCost =driver.findElement(TotalMasterCartonLaborCostInBOM).getText();
            log.info("totalMasterCartonLaborCost is "+totalMasterCartonLaborCost);
            //getting totalMasterCartonLaborCost in BOM to Compare
            wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMarkUpCostInBOM));
            totalMarkUpCost =driver.findElement(TotalMarkUpCostInBOM).getText();
            log.info("TotalMarkUpCost is "+totalMarkUpCost);
            //getting totalMarkUpCost in BOM to Compare
            wait.until(ExpectedConditions.visibilityOfElementLocated(CurrencyInBOM));
            QuoteCurrencyInBOM=driver.findElement(CurrencyInBOM).getText();
            log.info("QuoteCurrencyInBOM is "+QuoteCurrencyInBOM);
            }
		catch(Exception e){
			fail=true;
			log.error("Exception in getBOMValues"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean TC_23_CreateRFQ(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			CloseOpenedExistingRFQ();
			//Closing the Opened Cost Sheet 
			CreateRFQ_Vendor(data);
			//Creating RFQ
			CreateCostSheetTemplate(data);
			//Create Cost Sheet Template
			AddContentTableValuesThroughRFQHyperLinkForTC_23(data);
			//Submit the request to vendor
			SubmitRequestThroughCostSheet(data);
			//Submitting the Request Through Vendors
			NavigateToRFQThroughSideBar(data);
			//Clicking RFQ
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			SubmitRequestStatusCheck(data);
			//Checking the status of Request Sent
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[220],data[221]);
			//launching the URL
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			navigateToMaterialTab(data);
			//Navigating to materials tab
			CreateBOM(data);
			//Creating a BOM
			NavigateToRFQThroughSideBar(data);
			//Navigate To RFQ through Side Bar
			CloseOpenedExistingRFQ();
			//Closing the Opened Cost Sheet 
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			getValues(data);
			//getting Product Number,Specification and Color way
			UpdateContentTable_VendorUser(data);
			//Updating contents table
			AddSpecificationAndBOMInCostSheet(data);
			// Adding Specification and BOM
			AssertionVerificationOfCostSheetNameAppearnce(data);
			//Assertion Verification Of Cost Sheet Appearance
			CreateVendorBOM_RetailItem(data);
			//Creating a Vendor BOM
			driver.navigate().refresh();
			CommonFunctions.waitForPageLoaded();
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			CloseOpenedExistingRFQ();
			//Closing the Opened Cost Sheet 
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			AssertionVerificationOfSubmitQuoteForReview(data);
			//Assertion verification of Quote Status After Submission
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("TC_23_CreateRFQ TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("TC_23_CreateRFQ TEST CASE FAILED.PLEASE CHECK");
			 }
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_23_CreateRFQ"+e);
			throw e;
		}
	return true;
	}
	
	public static boolean AssertionVerificationOfSubmitQuoteForReview(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection));
			  CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "Cost Sheet HyperLink");
			  //Clicking on CostSheet HyperLink
			 CommonFunctions.waitForPageLoaded();
			 CommonFunctions.waitForElementTobeClickable(RFQUpdateDropDown);
			 CommonFunctions.waitForElementTobeClickable(SubmitQuoteRequestDropDown);
			 //CommonFunctions.selectFromDropDownByVisibleTextUpdated(SubmitQuoteRequestDropDown, data[320], "Submit Quote For Review");
			 //Submitting a Quote For a Review
			 Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'Quote Status')]//preceding::select[1]")));
		     List<WebElement> allOptions1=dropdDown1.getOptions();
           for(int i=0;i<allOptions1.size();i++){
 		     String RequiredValue=allOptions1.get(i).getText();
 		     //System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[320]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(SubmitQuoteRequestDropDown, RequiredValue, "Source DropDown Selection");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
           }
             wait.until(ExpectedConditions.visibilityOfElementLocated(ViewReferenceNumber));
             CommonFunctions.waitForPageLoaded();
 		     CommonFunctions.waitForElementTobeClickable(QuoteSubmission);
 		     GettingText(QuoteSubmission);
 		     CommonFunctions.AssertEqualsVerification(ActualValue, data[321], "Actual and Expected statuses are not mached after Submitting the quote.Assertion failed.please Verify ");
		//Verifying the status of Quote After Submission
           
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SubmitQuoteForReview"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean CreateVendorBOM_RetailItem(String [] data) throws Exception
	{
		try{
			driver.navigate().refresh();
			CommonFunctions.waitForPageLoaded();
			navigateToProduct(data);
			//Navigating to product page
			SearchRetailItemProduct(data);
			//Search Retail Item Product
			navigateToMaterialTab(data);
			//Navigating to materials tab
			CreateBOM_RetailItem(data);
			//Creating a Retail item BOM
			NavigateToCostSheetThroughSideBar(data);
			//Navigating to Costing side Bar
			CloseOpenedExistingCostSheet();
			//Close the Opened the Existing Cost Sheet
			SearchTheCostSheet(data);
			//Search the Cost Sheet
			AddBOMInRetailItemCostSheet(data);
			//Adding Retail Item BOM  in Cost Sheet
			
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateVndorBOM_RetailItem"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerificationOfCostSheetNameAppearnce(String [] data) throws Exception
	{
		try{
		CommonFunctions.waitForElementTobeClickable(ContentTableCostSheetName);
		CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableCostSheetName, "ContentTableCostSheetName"),"Cost Sheet name Of Content table is not appearing.Assertion Failed.Please Verify");
		ContentTableCostSheetNameValue=driver.findElement(ContentTableCostSheetName).getText();
		log.info("Cost Sheet Name is "+ContentTableCostSheetNameValue);
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOfCostSheetNameAppearnce"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean AddBOMInRetailItemCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton,data[179], "CostSheetDropDown");
			//Selecting Update Option
			wait.until(ExpectedConditions.titleIs(data[180]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(BOMInCostSheet);
			CommonFunctions.clickButtonOrLink(BOMInCostSheet, "DropDown", "BOM");
			CommonFunctions.waitForPageLoaded();
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'Vendor Cost Details:')]//following::select[1]")));
		     List<WebElement> allOptions1=dropdDown1.getOptions();
           for(int i=0;i<allOptions1.size();i++){
 		     String RequiredValue=allOptions1.get(i).getText();
 		     //System.out.println(RequiredValue);
 		     if(RequiredValue.contains(BOMId.trim()))
 		     {
 		     CommonFunctions.waitForPageLoaded();
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMInCostSheet, RequiredValue, "Source DropDown Selection");
 		     break;
 		     }
           }
			//Selecting a BOM
			 CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
				CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "Save Button");
				//Clicking save Button
				wait.until(ExpectedConditions.titleIs(data[144]));
				CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AddBOMIn"
					+ "RetailItemCostSheet"+e);
			throw e;
		}
	return true;	
	}
	
	public static boolean AddBOMInAssortmentVendorCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton,data[179], "CostSheetDropDown");
			//Selecting Update Option
			wait.until(ExpectedConditions.titleIs(data[180]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(BOMVendorCostSheet);
			CommonFunctions.clickButtonOrLink(BOMVendorCostSheet, "DropDown", "BOM");
			CommonFunctions.waitForPageLoaded();
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'Vendor Cost Details:')]/following::select[1]")));
		     List<WebElement> allOptions1=dropdDown1.getOptions();
            for(int i=0;i<allOptions1.size();i++){
 		     String RequiredValue=allOptions1.get(i).getText();
 		     //System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[389]))
 		     {
 		   CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMVendorCostSheet, RequiredValue, "Source DropDown Selection");
 		   break;
 		     }
           }
			//Selecting a BOM
			 CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
				CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "Save Button");
				//Clicking save Button
				wait.until(ExpectedConditions.titleIs(data[144]));
				CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AddBOMIn"
					+ "RetailItemCostSheet"+e);
			throw e;
		}
	return true;	
	}
	public static boolean AddBOMInAssortmentCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton,data[179], "CostSheetDropDown");
			//Selecting Update Option
			wait.until(ExpectedConditions.titleIs(data[180]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(BOMInInternalCostSheet);
			CommonFunctions.clickButtonOrLink(BOMInInternalCostSheet, "DropDown", "BOM");
			CommonFunctions.waitForPageLoaded();
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'BOM')]//following::select[1]")));
		     List<WebElement> allOptions1=dropdDown1.getOptions();
            for(int i=0;i<allOptions1.size();i++){
 		     String RequiredValue=allOptions1.get(i).getText();
 		     //System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[389]))
 		     {
 		   CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMInInternalCostSheet, RequiredValue, "Source DropDown Selection");
 		   break;
 		     }
           }
			//Selecting a BOM
			 CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
				CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "Save Button");
				//Clicking save Button
				wait.until(ExpectedConditions.titleIs(data[144]));
				CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AddBOMIn"
					+ "RetailItemCostSheet"+e);
			throw e;
		}
	return true;	
	}
	
	public static boolean AddSpecificationAndBOMInCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
		    Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		     //System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[179]))
  		     {
  		     CommonFunctions.waitForPageLoaded();
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  			wait.until(ExpectedConditions.titleIs(data[180]));
			CommonFunctions.waitForPageLoaded();
			//Selecting Update Option
  		     break;
  		     }
            }
	        CommonFunctions.waitForElementTobeClickable(SpecificationInCostSheet);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(SpecificationInCostSheet, data[318], "Specification");
			//Selecting the Specification
			CommonFunctions.waitForElementTobeClickable(BOMInCostSheet);
			CommonFunctions.clickButtonOrLink(BOMInCostSheet, "DropDown", "BOM");
			CommonFunctions.waitForPageLoaded();
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'Vendor Cost Details:')]//following::select[1]")));
		     List<WebElement> allOptions1=dropdDown1.getOptions();
            for(int i=0;i<allOptions1.size();i++){
  		     String RequiredValue=allOptions1.get(i).getText();
  		     //System.out.println(RequiredValue);
  		     if(RequiredValue.contains(BOMId.trim()))
  		     {
  		     CommonFunctions.waitForPageLoaded();
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMInCostSheet, RequiredValue, "Source DropDown Selection");
  		     break;
  		     }
            }
			//CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMInCostSheet, BOMId.trim(), "BOMvalue");
			//selecting the BOM Value
			CommonFunctions.gettingParentWindow();
			CommonFunctions.waitForElementTobeClickable(FactoryCodeInUpdateCostSheet);
			CommonFunctions.clickButtonOrLink(FactoryCodeInUpdateCostSheet, "HyperLink", "FactoryCode");
			//Clicking on the factory Code
			CommonFunctions.switchingChildWindow();
			  CommonFunctions.waitForElementTobeClickable(SearchButton);
			    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
			    //Clicking Search Button
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
			    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
			    //Clicking on Choose Button
			    CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
				CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "Save Button");
				//Clicking save Button
				wait.until(ExpectedConditions.titleIs(data[144]));
				CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AddSpecificationAndBOMInCostSheet"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean UpdateContentTable_VendorUser(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CreateCostSheetsFromTemplate);
			CommonFunctions.clickButtonOrLink(CreateCostSheetsFromTemplate, "Button", "CreateCostSheetFromTemplate");
			//Clicking Create Cost SheetS from Template
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetCreatedFromTemplate));
			CommonFunctions.clickButtonOrLink(CostSheetCreatedFromTemplate, "HyperLink", "Cost Sheet");
			//Clicking the Created Cost Sheet
			CommonFunctions.waitForPageLoaded();
			 wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(ProductSource);
				CommonFunctions.clickButtonOrLink(ProductSource, "table", "Product Source");
				CommonFunctions.waitForPageLoaded();
				CommonFunctions.waitForElementTobeClickable(ProductSourceDropDown);
				CommonFunctions.clickButtonOrLink(ProductSourceDropDown, "Drop-Down", "ProductSourceDropDown");
				Thread.sleep(2000);
				Select dropdDown = new Select(driver.findElement(By.xpath("//td[@id='r1_hbProductSourceCostingMOA']/div/select[1]")));
			     List<WebElement> allOptions=dropdDown.getOptions();
	             for(int i=0;i<allOptions.size();i++){
	   		     String RequiredValue=allOptions.get(i).getText();
	   		     //System.out.println(RequiredValue);
	   		     if(RequiredValue.contains(data[178]))
	   		     {
	   		     CommonFunctions.waitForPageLoaded();
	   		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ProductSourceDropDown, RequiredValue, "Source DropDown Selection");
	   		     break;
	   		     }
	             }
	   		     CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
	   		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
	   		     //Clicking Done Button
	   		     CommonFunctions.waitForPageLoaded();
	   		     wait.until(ExpectedConditions.titleIs(data[144]));
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateContentTable_VendorUser"+e);
			throw e;
		}
		return true;
	}
	public static boolean UpdateContentTable_VendorUserforTC_30(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CreateCostSheetsFromTemplate);
			CommonFunctions.clickButtonOrLink(CreateCostSheetsFromTemplate, "Button", "CreateCostSheetFromTemplate");
			//Clicking Create Cost SheetS from Template
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetCreatedFromTemplate));
			CommonFunctions.clickButtonOrLink(CostSheetCreatedFromTemplate, "HyperLink", "Cost Sheet");
			//Clicking the Created Cost Sheet
			CommonFunctions.waitForPageLoaded();
			 wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(ProductSource);
				CommonFunctions.clickButtonOrLink(ProductSource, "table", "Product Source");
				CommonFunctions.waitForPageLoaded();
				CommonFunctions.waitForElementTobeClickable(ProductSourceDropDown);
				CommonFunctions.clickButtonOrLink(ProductSourceDropDown, "Drop-Down", "ProductSourceDropDown");
				Thread.sleep(2000);
				Select dropdDown = new Select(driver.findElement(By.xpath("//td[@id='r1_hbProductSourceCostingMOA']/div/select[1]")));
			     List<WebElement> allOptions=dropdDown.getOptions();
	             for(int i=0;i<allOptions.size();i++){
	   		     String RequiredValue=allOptions.get(i).getText();
	   		     //System.out.println(RequiredValue);
	   		     if(RequiredValue.contains(data[178]))
	   		     {
	   		     CommonFunctions.waitForPageLoaded();
	   		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ProductSourceDropDown, RequiredValue, "Source DropDown Selection");
	   		     break;
	   		     }
	             }
	             CommonFunctions.waitForElementTobeClickable(ProductSource1);
	 			CommonFunctions.clickButtonOrLink(ProductSource1, "Drop-Down", "ProductSourceDropDown");
	 			wait.until(ExpectedConditions.visibilityOfElementLocated(ProductSourceDropDown1));
	 			CommonFunctions.clickButtonOrLink(ProductSourceDropDown1, "DropDown", "Product Source");
	 			Thread.sleep(2000);
	 			Select dropdDown2 = new Select(driver.findElement(By.xpath("//td[@id='r2_hbProductSourceCostingMOA']/div/select[1]")));
	 		     List<WebElement> allOptions2=dropdDown2.getOptions();
	              for(int i=0;i<allOptions2.size();i++){
	    		     String RequiredValue3=allOptions2.get(i).getText();
	    		     //System.out.println(RequiredValue);
	    		     if(RequiredValue3.contains(data[178]))
	    		     {
	    		     CommonFunctions.waitForPageLoaded();
	    		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ProductSourceDropDown1, RequiredValue3, "Source DropDown Selection");
	    		     break;
	    		     }}
	             CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
	   		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
	   		     //Clicking Done Button
	   		     CommonFunctions.waitForPageLoaded();
	   		     wait.until(ExpectedConditions.titleIs(data[144]));
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateContentTable_VendorUser"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean navigateToMaterialTab(String [] data) throws Exception{
		try{
			//Click on Specification
			clickSpecificationTab(data);
			InternalBOMSoftG.strSpec=AddSpecification(data);
			//Click on Material tab
			CommonProjectFunctions.clickMaterialsTab();
		//	getPageTitle();
			//Assert.assertEquals(pageTitle, data[7]);
			return true;
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in navigateToMaterialTab()", e);
			throw e;
		}
	}
	
	public static boolean navigateToMaterialTabThroughSideBar(String [] data) throws Exception{
		try{
			driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
			CommonFunctions.waitForPageLoaded();
		    CommonFunctions.waitForElementTobeClickable(MaterialTabThroughSideBar);
		    CommonFunctions.clickButtonOrLink(MaterialTabThroughSideBar, "Hyper-Link", "MaterialsTab");
			CommonFunctions.handleAlertPopUp1();
		    driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
		    CommonFunctions.waitForPageLoaded();
		
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in navigateToMaterialTab()", e);
			throw e;
		}
		catch(AssertionError er){
			fail=true;
			log.error("Assertion Error in navigateToMaterialTabThroughSideBar"+er);
			throw er;
		}
		return true;
	}
	
	public static boolean CreateBOM(String [] data) throws Exception
	{
		try{
			CommonFunctions.clickButtonOrLink(addNewbomTab, "btn", "Add New bom tab");
			//Enter bom Type
			CommonFunctions.enterTextInTextbox(bomtypeid, data[317]);
			//Click Initialize bom
			CommonFunctions.clickButtonOrLink(initializebom,"btn", "Initialize bom");
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[143]));
			fillCreateBOM(data);
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateBOM" +e);
			throw e;
		}
		return true;
	}
	
	
	
	public static boolean CreateBOM_RetailItem(String [] data) throws Exception
	{
		try{
			CommonFunctions.clickButtonOrLink(addNewbomTab, "btn", "Add New bom tab");
			//Enter bom Type
			CommonFunctions.enterTextInTextbox(bomtypeid, data[319]);
			//Click Initialize bom
			CommonFunctions.clickButtonOrLink(initializebom,"btn", "Initialize bom");
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[143]));
			fillCreateBOM(data);
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateBOM_RetailItem" +e);
			throw e;
		}
		return true;
	}
	public static boolean CreateBOM_RetailItemforTC_33(String [] data) throws Exception
	{
		try{
			CommonFunctions.clickButtonOrLink(addNewbomTab, "btn", "Add New bom tab");
			//Enter bom Type
			CommonFunctions.enterTextInTextbox(bomtypeid, data[319]);
			//Click Initialize bom
			CommonFunctions.clickButtonOrLink(initializebom,"btn", "Initialize bom");
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[143]));
			AssertionBOMVerificationAndfillCreateBOMforTC_33(data);
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateBOM_RetailItem" +e);
			throw e;
		}
		return true;
	}
	public static String fillCreateBOM(String[] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(InternalBOMSoftG.headingCreateBOM));
			CommonFunctions.waitForVisibilityOfElement(InternalBOMSoftG.headingCreateBOM);
		
			//Select colorway
			CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.colorway);
			CommonFunctions.selectFromDropDownByIndex(InternalBOMSoftG.colorway, 1);
			//Select Wave
			CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.wave);
			CommonFunctions.selectFromDropDownByVisibleText(InternalBOMSoftG.wave, data[161]);
			//Select Currency
			CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.currency);
			CommonFunctions.selectFromDropDownByVisibleText(InternalBOMSoftG.currency, data[168]);
			//click on Create
			CommonFunctions.gettingParentWindow();
			CommonFunctions.waitForElementTobeClickable(BOMFactoryValue);
			CommonFunctions.clickButtonOrLink(BOMFactoryValue, "Factory");
			//Clicking on Factory Link
			CommonFunctions.switchingChildWindow();
			 CommonFunctions.waitForElementTobeClickable(SearchButton);
			    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Search Button");
			    //Clicking Search Button
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ProductVendorName);
			    GettingText(ProductVendorName);
			    CommonFunctions.AssertEqualsVerification(ActualValue, data[159], "Actual and Expected Product vendors names Are Matched.Assetion failed.Please Verify");
			    log.info("***Verify that the search results include  factory selected in the Product - validated***");
			    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
			    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
			    //Clicking on Choose Button
			    CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(Product.createBtn, "btn", "Create");
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(AddRowsButton));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.btnSaveAndCheckIn);
			CommonFunctions.clickButtonOrLink(InternalBOMSoftG.btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			//Clicking on Save And Check In Button
			CommonFunctions.handleAlertPopUp1();
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			wait.until(ExpectedConditions.titleIs(data[222]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(BOMid);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='bomId']")));
			BOMId=dropdDown.getFirstSelectedOption().getText();
		    log.info("Recently Created BOMID is " +BOMId);
			
	        }
		  catch(Exception e)
		  {
			fail=true;
			log.error("Exception in fillCreateBOM()", e);
			throw e;
		}
	  return BOMId;
	}
	
	public static String AssertionBOMVerificationAndfillCreateBOMforTC_33(String[] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(InternalBOMSoftG.headingCreateBOM));
			CommonFunctions.waitForVisibilityOfElement(InternalBOMSoftG.headingCreateBOM);
		    CommonFunctions.waitForElementTobeClickable(VendorRetailItemBOMtype);
		    GettingText(VendorRetailItemBOMtype);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[317], "Actual and expected BOM Types are not Mathed.Assertion failed.Please Verify");
			log.info("***Verify that the Type field is derived so that the value is BOM-Materials-Retail Item-Vendor-Validated ***");
			//Select colorway
			CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.colorway);
			CommonFunctions.selectFromDropDownByIndex(InternalBOMSoftG.colorway, 1);
			//Select Wave
			CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.wave);
			CommonFunctions.selectFromDropDownByVisibleText(InternalBOMSoftG.wave, data[161]);
			//Select Currency
			CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.currency);
			CommonFunctions.selectFromDropDownByVisibleText(InternalBOMSoftG.currency, data[168]);
			//click on Create
			CommonFunctions.gettingParentWindow();
			CommonFunctions.waitForElementTobeClickable(BOMFactoryValue);
			CommonFunctions.clickButtonOrLink(BOMFactoryValue, "Factory");
			//Clicking on Factory Link
			CommonFunctions.switchingChildWindow();
			 CommonFunctions.waitForElementTobeClickable(SearchButton);
			    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Search Button");
			    //Clicking Search Button
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ProductVendorName);
			    GettingText(ProductVendorName);
			    CommonFunctions.AssertEqualsVerification(ActualValue, data[159], "Actual and Expected Product vendors names Are Matched.Assetion failed.Please Verify");
			    log.info("***Verify that the search results include  factory selected in the Product - validated***");
			    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
			    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
			    //Clicking on Choose Button
			    CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(Product.createBtn, "btn", "Create");
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mainFrame"));
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(AddRowsButton));
			CommonFunctions.waitForPageLoaded();
			AssertionVerificationOfGeneralAttributeSectionAndBOMSections(data);
			   //Assertion verification of BOm Attribute
	
			CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.btnSaveAndCheckIn);
			CommonFunctions.clickButtonOrLink(InternalBOMSoftG.btnSaveAndCheckIn,"btn", "btnSaveAndCheckIn");
			//Clicking on Save And Check In Button
			CommonFunctions.handleAlertPopUp1();
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			wait.until(ExpectedConditions.titleIs(data[222]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(BOMid);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='bomId']")));
			BOMId=dropdDown.getFirstSelectedOption().getText();
		    log.info("Recently Created BOMID is " +BOMId);
			
	        }
		  catch(Exception e)
		  {
			fail=true;
			log.error("Exception in fillCreateBOM()", e);
			throw e;
		}
	  return BOMId;
	}
	
	public static boolean AssertionVerificationOfGeneralAttributeSectionAndBOMSections(String [] data) throws Exception{
		try{
		    wait.until(ExpectedConditions.visibilityOfElementLocated(HeaderAttributes));
		    CommonFunctions.clickButtonOrLink(HeaderAttributes, "Button", "HeaderAttributesButton");
		    //Clicking the Header Attribute
		    wait.until(ExpectedConditions.visibilityOfElementLocated(CountryOfOriginInsideGeneralAttribute));
		    GettingText(CountryOfOriginInsideGeneralAttribute);
		    CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[208], "Actual and Expected Country origin text are not matched.Assertion failed.please Check");
		    //Comparing COO text
		    CommonFunctions.waitForElementTobeClickable(CountryOfOriginTDTAGInsideGeneralAttribute);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CountryOfOriginTDTAGInsideGeneralAttribute, "CountryOfOriginTDTAGInsideGeneralAttribute"), "COO is Editable.Condition failed.Assertion failed.Please Check");
		    log.info("Since COO value is a 'td' tag .it is Not editable");
		    GettingText(CountryOfOriginTDTAGInsideGeneralAttribute);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[207], "COO is Not Defaulty blank.Assertion failed.Please Check");
		    log.info("*** Verify that Country of Origin is present in General Attribute table group. By default they are blank and not editable - validated ***");
		    
		    wait.until(ExpectedConditions.visibilityOfElementLocated(FactoryRegionInsdieGeneralAttribute));
		    GettingText(FactoryRegionInsdieGeneralAttribute);
		    CommonFunctions.AssertEqualsVerification(ActualValue.trim(), data[490], "Actual and Expected Factory Region text are not matched.Assertion failed.please Check");
		    //Comparing COO text
		    CommonFunctions.waitForElementTobeClickable(FactoryRegionTDTAGInsdieGeneralAttribute);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(FactoryRegionTDTAGInsdieGeneralAttribute, "FactoryRegionTDTAGInsdieGeneralAttribute"), "Factory Region is Editable.Condition failed.Assertion failed.Please Check");
		    log.info("Since Factory Region value is a 'td' tag .it is Not editable");
		    GettingText(FactoryRegionTDTAGInsdieGeneralAttribute);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[207], "Factory region is Not Defaulty blank.Assertion failed.Please Check");
		    log.info("Verify that Factory Region is present in General Attribute table group. By default they are blank and not editable");
		    
		    CommonFunctions.waitForElementTobeClickable(PlasticSectionIdentification);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PlasticSectionIdentification, "PlasticSectionIdentification"), "Plastic Section is Not found First.condition Failed.Assertion failed");
		    log.info("Plastic Section is found First");
		    
		    CommonFunctions.waitForElementTobeClickable(ChemicalSectionIdentification);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ChemicalSectionIdentification, "ChemicalSectionIdentification"), "Chemical Section is Not found after Plastic Setion.condition Failed.Assertion failed");
		    log.info("Chemical Section is found after Plastic Section");
		    
		    CommonFunctions.waitForElementTobeClickable(PurchasedSectionIdentification);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PurchasedSectionIdentification, "PurchasedSectionIdentification"), "Purchased Section is  not found after chemical Setion.condition Failed.Assertion failed");
		    log.info("Purchased Section is found after Chemical Section");
		    
		    CommonFunctions.waitForElementTobeClickable(ElectronicSectionIdentification);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ElectronicSectionIdentification, "ElectronicSectionIdentification"), "Electronic Section is Not found after Purchased Section.condition Failed.Assertion failed");
		    log.info("Electronic Section is found after Purchased Section");
		    
		    CommonFunctions.waitForElementTobeClickable(SoftGoodsIdentification);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(SoftGoodsIdentification, "SoftGoodsIdentification"), "Soft good Section is Not found after Electronic Section.condition Failed.Assertion failed");
		    log.info("Soft Goods Section is found after Electronic Section");
		    
		    CommonFunctions.waitForElementTobeClickable(PackagingIdentification);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PackagingIdentification, "PackagingIdentification"), "Packaging Section is Not found after Soft Goods Section.condition Failed.Assertion failed");
		    log.info("Packaging Section is found after Soft goods Section");
		    
		    CommonFunctions.waitForElementTobeClickable(GeneralDecoIdentification);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(GeneralDecoIdentification, "GeneralDecoIdentification"), "General/Deco Section is Not found after Packaging Section.condition Failed.Assertion failed");
		    log.info("General/Deco Section is found after Packaging Section");
		    
		    CommonFunctions.waitForElementTobeClickable(ModingLaborIdentification);
		    CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ModingLaborIdentification, "ModingLaborIdentification"), "Molding labor Section is Not found after general/Deco Section.condition Failed.Assertion failed");
		    log.info("Molding Section is found after General/Deco Section");
		    
		    log.info("***Verify that the system displays the following sections in the following order: - validated ***");
			
		    CommonFunctions.waitForElementTobeClickable(PlasticSectionView);
		    GettingText(PlasticSectionView);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[491], "Actual and expected view are not matched for Plastic section.Assertion failed.Please Check");
		    log.info(" ***Verify that the system displays the View = 'Full' view on the Plastic section - validated***");
		    
		    CommonFunctions.waitForElementTobeClickable(ChemicalSectionView);
		    GettingText(ChemicalSectionView);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[491], "Actual and expected view are not matched for chemical section.Assertion failed.Please Check");
		    log.info(" ***Verify that the system displays the View = 'Full' view on the Chemical section - validated***");
		    
		    CommonFunctions.waitForElementTobeClickable(PurchasedPartsSectionView);
		    GettingText(PurchasedPartsSectionView);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[491], "Actual and expected view are not matched for purchased section.Assertion failed.Please Check");
		    log.info(" ***Verify that the system displays the View = 'Full' view on the Purchased section - validated***");
		    
		    CommonFunctions.waitForElementTobeClickable(ElectronicSectionView);
		    GettingText(ElectronicSectionView);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[491], "Actual and expected view are not matched for Electronic section.Assertion failed.Please Check");
		    log.info(" ***Verify that the system displays the View = 'Full' view on the Electronic section - validated***");
		    
		    CommonFunctions.waitForElementTobeClickable(SoftGoodsSectionView);
		    GettingText(SoftGoodsSectionView);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[491], "Actual and expected view are not matched for SoftGoods section.Assertion failed.Please Check");
		    log.info(" ***Verify that the system displays the View = 'Full' view on the SoftGoods section - validated***");
		    
		    CommonFunctions.waitForElementTobeClickable(PackagingSectionView);
		    GettingText(PackagingSectionView);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[491], "Actual and expected view are not matched for Packaging section.Assertion failed.Please Check");
		    log.info(" ***Verify that the system displays the View = 'Full' view on the Packaging section - validated***");
		    
		    CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborView);
		    GettingText(GeneralDecoLaborView);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[491], "Actual and expected view are not matched for GeneralDecoLabor section.Assertion failed.Please Check");
		    log.info(" ***Verify that the system displays the View = 'Full' view on the GeneralDecoLabor section - validated***");
		    
		    CommonFunctions.waitForElementTobeClickable(MoldingLaborView);
		    GettingText(MoldingLaborView);
		    CommonFunctions.AssertEqualsVerification(ActualValue, data[491], "Actual and expected view are not matched for MoldingLabor section.Assertion failed.Please Check");
		    log.info(" ***Verify that the system displays the View = 'Full' view on the MoldingLabor section - validated***");
		    
			EnterValuesInBOM(data);
			//Entering values in BOM
			
		    
		}catch(Exception e){
			fail=true;
			log.error("Exception in clickSpecificationTab()", e);
			throw e;
	}
		return true;
	}
	
	public static boolean clickSpecificationTab(String [] data) throws Exception{
		try{
		
			SeleniumDriver.driver.switchTo().defaultContent();
			SeleniumDriver.driver.switchTo().frame("contentframe");
			wait.until(ExpectedConditions.visibilityOfElementLocated(Specifications.specificationsTablink));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(Specifications.specificationsTablink);
				CommonFunctions.clickButtonOrLink(Specifications.specificationsTablink, "link", "specifications tab");
                CommonFunctions.waitForPageLoaded();
               CommonFunctions.waitForElementTobeClickable(Product.detailPageSeasonDD);
                CommonFunctions.selectFromDropDownByVisibleTextUpdated(Product.detailPageSeasonDD, data[3],"Season year");
                CommonFunctions.handleAlertPopUp1();
                CommonFunctions.waitForPageLoaded();
           //   CommonFunctions.clickButtonOrLink(Product.detailPageSeasonDD, "Season dropdown");
			//System.out.println(By.xpath("//*[@id='splId']/option[contains(text(),'"+dataYear+"')]"));
			//SeleniumDriver.driver.findElement(By.xpath("//*[@id='splId']/option[contains(text(),'"+dataYear+"')]")).click();
		}catch(Exception e){
			fail=true;
			log.error("Exception in clickSpecificationTab()", e);
			throw e;
	}
		return true;
	}
	
	public static boolean getValues(String [] data){
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection));
			  CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "Cost Sheet HyperLink");
			  //Clicking on CostSheet HyperLink
			 CommonFunctions.waitForPageLoaded();
			 CommonFunctions.waitForElementTobeClickable(RFQUpdateDropDown);
			CommonFunctions.waitForElementTobeClickable(RFQColorwayValue);
			colorwayValue=driver.findElement(RFQColorwayValue).getText();
			log.info("The Selected ColoWay Value is "+colorwayValue);
			//getting the Color way Value
			log.info("The Specification Value is "+InternalBOMSoftG.strSpec);
			log.info("The Product Number is "+data[155]);
			
		}
		catch(Exception e)
		{
			
		}
		return true;
	}
	
	public static boolean SubmitRequestThroughCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(RFQHyperLinkOnCostSheet);
			CommonFunctions.clickButtonOrLink(RFQHyperLinkOnCostSheet, "RFQHyperLink");
			//Clicking RFQ Link
			wait.until(ExpectedConditions.titleIs(data[463]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(RFQActionDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQActionDropDown, data[5], "Action drop down");
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(RFQActionDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQActionDropDown, data[63], "Action Drop down value");
			//Clicking on Submit Request To vendors
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(RFQSelectButton));
			CommonFunctions.clickButtonOrLink(RFQSelectButton, "Button", "Select");
			//clicking on Select Button
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CloseButton));
			//Clicking on Close Button
			CommonFunctions.clickButtonOrLink(CloseButton, "HyperLink", "Close");
		}
			

		catch(Exception e){
			fail=true;
			log.error("Exception in SubmitRequestThroughCostSheet"+e);
			throw e;
		}
		return true;
	}
	public static boolean SubmitRequestThroughCostSheet_TC30(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(RFQHyperLinkOnCostSheet);
			CommonFunctions.clickButtonOrLink(RFQHyperLinkOnCostSheet, "RFQHyperLink");
			//Clicking RFQ Link
			wait.until(ExpectedConditions.titleIs(data[463]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(RFQActionDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQActionDropDown, data[465], "Action drop down");
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(RFQActionDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQActionDropDown, data[464], "Action Drop down value");
			//Clicking on Submit Request To vendors
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(RFQSelectButton));
			CommonFunctions.clickButtonOrLink(RFQSelectButton, "Button", "Select");
			//clicking on Select Button
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CloseButton));
			//Clicking on Close Button
			CommonFunctions.clickButtonOrLink(CloseButton, "HyperLink", "Close");
		}
			

		catch(Exception e){
			fail=true;
			log.error("Exception in SubmitRequestThroughCostSheet"+e);
			throw e;
		}
		return true;
	}
	public static boolean TC_21_UpdateContentTableForVendorProductCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchTheCostSheet(data);
			//Seraching Cost SHeet
			//SelectCostSheet1VendorUser(data);
			//Selecting the First cost Sheet
			getContentableValues();
			//get Content table Values
			getCostValues();
			//get cost values
			driver.navigate().refresh();
			//Refreshing the screen
			CommonFunctions.waitForPageLoaded();
			navigateToProduct(data);
			//Navigating to product page
			SearchRetailItemProduct(data);
			//navigate To Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchTheCostSheet(data);
			//Seraching Cost SHeet
			//SelectRetailItemCostSheetVendorUser(data);
			//Selecting the First Retail Item cost Sheet
			UpdateVendorRetailItemCostSheet(data);
			//Update Vendor Retail Item Cost Sheet
			driver.navigate().refresh();
			//Refreshing the screen
			CommonFunctions.waitForPageLoaded();
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchTheCostSheet(data);
			//Seraching the Cost SHeet
			//SelectCostSheet1VendorUser(data);
			//Selecting the First cost Sheet
			UpdateContentTable(data);
			//Updating the Contents Table
			BlankUpdate(data);
			//Blank Update on Cost Sheet 
			AssertionVerificationOfContentTableUpdation_Vendor(data);
			//Assertion Verification of Content table Elements
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC40 - Update Contents Table for Vendor Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC40 - Update Contents Table for Vendor Product Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			 }
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_21_UpdateContentTableForVendorProductCostSheet"+e);
			throw e;
		}
	return true;
	}
	public static boolean TC_22_UpdateContentTableForInternalProductCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SelectCostSheet1CostingUser(data);
			//Selecting the First cost Sheet
			getContentableValues();
			//get Content table Values
			getCostValuesRetailItem();
			//get cost values
			driver.navigate().refresh();
			//Refreshing the screen
			CommonFunctions.waitForPageLoaded();
			navigateToProduct(data);
			//Navigating to product page
			SearchRetailItemProduct(data);
			//navigate To Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SelectRetailItemCostSheetCostingUser(data);
			//Selecting the First Retail Item cost Sheet
			UpdateInternalRetailItemCostSheet(data);
			//Update Vendor Retail Item Cost Sheet
			driver.navigate().refresh();
			//Refreshing the screen
			CommonFunctions.waitForPageLoaded();
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SelectCostSheet1CostingUser(data);
			//Selecting the First cost Sheet
			UpdateContentTable(data);
			//Updating the Contents Table
			BlankUpdate(data);
			//Blank Update on Cost Sheet 
			AssertionVerificationOfContentTableUpdation_Internal(data);
			//Assertion Verification of Content table Elements
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC39 - Update Contents Table for Internal Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC39 - Update Contents Table for Internal Product Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			 }
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_22_UpdateContentTableForInternalProductCostSheet"+e);
			throw e;
		}
	return true;
	}
	public static boolean TC_24_SaveContentsTableforInternalProductCostSheet(String [] data) throws Exception{
		try{
			CreateProdFromLineSheetForSanitySuite_TC24(data);
			//Create a Product
			CreateSpecificationAndColorway(data);
			//Create a Specification and Color way
			CopyLinkProductRetailItem1(data);
			//Copy Retail Item 1
			SearchAssortmentProduct(data);
			//Searching Assortment or Solid Product
			CopyLinkProductRetailItem2(data);
			//Copy Retail Item 2
			CreateCostSheetForRetailItem1(data);
			//Creating a First Retail Item Cost Sheet
			CreateCostSheetForRetailItem2(data);
			//Creating a Second Retail Item Cost Sheet
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[220],data[221]);
			//launching the URL
			navigateToProduct_TC_24(data);
			//Navigating to product page
			SearchProduct_TC_24(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			AssertionVerficationOfCostSheetTypeforWhatIf_TC_24(data);
			//Assertion Verification Of Cost Sheet Type
			CreateInternalCostSheetForAssortmentProduct(data);
			//Creating a Internal Cost Sheet
			FillColorwayAndDetailsInContentTable_TC_24(data);
			//Filling Content table and Details Value
			BlankUpdate_TC24(data);
			//Doing a Blank Update
			AssertionVerificationOfContentTableValues(data);
			//Assertion verification of Content table values
			AssertionVerficationOfproductCostValues(data);
			//Assertion Verfication Of Product Cost Values
			
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC45 - Save Contents Table for Internal Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC45 - Save Contents Table for Internal Product Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			 }
			}
		
		
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_24_SaveContentsTableforInternalProductCostSheet"+e);
			throw e;
		}
	return true;
	}
	
	public static boolean TC_28_CreateVendorProductCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet 
			AssertionVerficationOTypeOfCostSheetforAssortmentType(data);
			//Assertion Verification Of Cost Sheet Type
			CreateCostSheetForAssortmentProduct(data);
			//Creating a CostSheet For Assortment or Solid
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[220],data[221]);
			//launching the URL
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet 
			UpdatingPrimaryCostSheetCheckBox(data);
			//Checking the Primary CostSheet Check Box
			AddRetailItemColorWayForCostSheetForBusinessAdmin(data);
			//Adding a Retail Item color way1
			FillingContentTable(data);
			//Filling a Content table data
			BlankUpdate(data);
			//Blank Update
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[0],data[1]);
			//launching the URL
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet 
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			CloseOpenedExistingCostSheet();
			//Close Opened Cost Sheet
			SelectTheCostSheetInVendor(data);
			//Selecting the Vendor Cost Sheet
			AssertionVerificationOfCostSheetElements(data);
			//Assertion Verification Of Cost Sheet Elements
			UpdateCurrenCyConversionRate(data);
			//Update Currency Conversion rate
			AssertionVerficationAfterUpdation(data);
			//Assertion Verification after the Updation of Currency Conversion Rate
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[273],data[274]);
			//Launching the URL
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			CloseOpenedExistingCostSheet();
			//Close Opened Cost Sheet
			SelectTheCostSheetInVendor(data);
			//Selecting the Vendor Cost Sheet
			AssertionVerficationOfCostingUser_CreateVendorCostSheet(data);
			//Assertion Verfitication of Content an Vendor table in Costing User
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[275],data[276]);
			//Launching the URL
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			CloseOpenedExistingCostSheet();
			//Close Opened Cost Sheet
			SelectTheCostSheetInVendor(data);
			//Selecting the Vendor Cost Sheet
			AssertionVerficationOfEngineerUser_CreateVendorCostSheet(data);
			//Assertion Verification of Engineer user
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[220],data[221]);
			//launching the URL
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet 
			delete_CreatedCostSheet(data);
			//Delete The Created Cost Sheet
		
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC36 - Create Vendor Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC36 - Create Vendor Product Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			 }
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_28_SubmitIncompleteVendorProductCostSheet"+e);
			throw e;
		}
		return true;
	}
	public static boolean delete_CreatedCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ImageIconOfCostSheet);
			CommonFunctions.clickButtonOrLink(ImageIconOfCostSheet, "img", "ImageIconOfCostSheet");
			//Clicking on Image Icon
			wait.until(ExpectedConditions.visibilityOfElementLocated(ImageIconOfCostSheet));
			By DeleteCostSheet = By.linkText("Delete");
			CommonFunctions.waitForElementTobeClickable(DeleteCostSheet);
			CommonFunctions.clickButtonOrLink(DeleteCostSheet, "DeleteCostSheet");
			CommonFunctions.handleAlertPopUp1();
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in delete_CreatedCostSheet"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean AssertionVerificationOfContentTableValues(String [] data) throws Exception{
		try{
			for(int i=1;i<2;i++){
				costSheetValueInContentTable="//a[contains(text(),'Last Modified Date')]//following::a["+i+"]";
				CostSheetValueInContentTable=By.xpath(costSheetValueInContentTable);
				CommonFunctions.waitForElementTobeClickable(CostSheetValueInContentTable);
				GettingText(CostSheetValueInContentTable);
				log.info("Prduct Colorway is: "+ActualValue);
				String ExpectedProductWithIteration1=CopyLinkRetailItem1+data[336];
				CommonFunctions.AssertEqualsVerification(ActualValue.trim(), ExpectedProductWithIteration1, "Actual and Expeted Product Values are not Matched.Assertion failed.Please Verify");
				//Verification of First Product With iteration
				i=i+1;
				costSheetValueInContentTable="//a[contains(text(),'Last Modified Date')]//following::a["+i+"]";
				CostSheetValueInContentTable=By.xpath(costSheetValueInContentTable);
				CommonFunctions.waitForElementTobeClickable(CostSheetValueInContentTable);
				GettingText(CostSheetValueInContentTable);
				log.info("Prduct Colorway is: "+ActualValue);
				String ExpectedProductWithIteration2=CopyLinkRetailItem2+data[336];
				CommonFunctions.AssertEqualsVerification(ActualValue.trim(), ExpectedProductWithIteration2, "Actual and Expeted Product Values are not Matched.Assertion failed.Please Verify");
				//Verification of Second Product With iteration
			}
			String unitRatioOfFirstCostSheet="//a[contains(text(),'Last Modified Date')]//following::td[5]";
			By UnitRatioOfFirstCostSheet=By.xpath(unitRatioOfFirstCostSheet);
			GettingText(UnitRatioOfFirstCostSheet);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[172], "Actual and Expected Unit raio Value are not Mtached.Assertion Failed.Please Verify");
			//Unit ratio Verification for First Cost Sheet	
			String costSheetStstusOfFirstCostSheet="//a[contains(text(),'Last Modified Date')]//following::td[8]";
			By CostSheetStstusOfFirstCostSheet=By.xpath(costSheetStstusOfFirstCostSheet);
			GettingText(CostSheetStstusOfFirstCostSheet);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[182], "Actual and Expected Unit raio Value are not Mtached.Assertion Failed.Please Verify");
			//Cost Sheet Status Verification for First Cost Sheet
			String lastModifiedByOfFirstCostSheet="//a[contains(text(),'Last Modified Date')]//following::td[9]";
			By LastModifiedByOfFirstCostSheet=By.xpath(lastModifiedByOfFirstCostSheet);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(LastModifiedByOfFirstCostSheet, "Last Modified By"), "Last ModiFied By Element Is not present.Assertion failed.Please verify");
			GettingText(LastModifiedByOfFirstCostSheet);
			log.info("Last Modified By is "+ActualValue);
			//Last Modified By Verification for First Cost Sheet
			String lastModifiedDateOfFirstCostSheet="//a[contains(text(),'Last Modified Date')]//following::td[10]";
			By LastModifiedDateOfFirstCostSheet=By.xpath(lastModifiedDateOfFirstCostSheet);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(LastModifiedDateOfFirstCostSheet, "Last Modified Date"), "Last ModiFied Date Element Is not present.Assertion failed.Please verify");
			GettingText(LastModifiedDateOfFirstCostSheet);
			log.info("Last Modified By is "+ActualValue);
			//Last Modified By Verification for First Cost Sheet
			String unitRatioOfSecondCostSheet="//a[contains(text(),'Last Modified Date')]//following::td[15]";
			By UnitRatioOfSecondCostSheet=By.xpath(unitRatioOfSecondCostSheet);
			GettingText(UnitRatioOfSecondCostSheet);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[172], "Actual and Expected Unit raio Value are not Matched.Assertion Failed.Please Verify");
			//Unit ratio Verification for Second Cost Sheet	
			String costSheetStstusOfSecondCostSheet="//a[contains(text(),'Last Modified Date')]//following::td[18]";
			By CostSheetStstusOfSecondCostSheet=By.xpath(costSheetStstusOfSecondCostSheet);
			GettingText(CostSheetStstusOfSecondCostSheet);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[182], "Actual and Expected Unit raio Value are not Mtached.Assertion Failed.Please Verify");
			//Cost Sheet Status Verification for Second Cost Sheet
			String lastModifiedByOfSecondCostSheet="//a[contains(text(),'Last Modified Date')]//following::td[19]";
			By LastModifiedByOfSecondCostSheet=By.xpath(lastModifiedByOfSecondCostSheet);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(LastModifiedByOfSecondCostSheet, "Last Modified By"), "Last ModiFied By Element Is not present.Assertion failed.Please verify");
			GettingText(LastModifiedByOfSecondCostSheet);
			log.info("Last Modified By is "+ActualValue);
			//Last Modified By Verification for Second Cost Sheet
			String lastModifiedDateOfSecondCostSheet="//a[contains(text(),'Last Modified Date')]//following::td[20]";
			By LastModifiedDateOfSecondCostSheet=By.xpath(lastModifiedDateOfSecondCostSheet);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(LastModifiedDateOfSecondCostSheet, "Last Modified Date"), "Last ModiFied Date Element Is not present.Assertion failed.Please verify");
			GettingText(LastModifiedDateOfSecondCostSheet);
			log.info("Last Modified By is "+ActualValue);
			//Last Modified By Verification for Second Cost Sheet	
			String productOriginalQuoteCurrencyCostSheet="//td[contains(text(),'Cost Table:')]//following::td[11]";
			By ProductOriginalQuoteCurrencyOfFirstCostSheet=By.xpath(productOriginalQuoteCurrencyCostSheet);
			GettingText(ProductOriginalQuoteCurrencyOfFirstCostSheet);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[168], "Actual and Expected Product Original Quote Currency Of First Cost Sheet are Not matched.Assertion Failed.please Verify");
			//Verifying the Product Original first Quote Currency
			String productOriginalQuoteCurrencySecondCostSheet="//td[contains(text(),'Cost Table:')]//following::td[16]";
			By ProductOriginalQuoteCurrencyOfSecondCostSheet=By.xpath(productOriginalQuoteCurrencySecondCostSheet);
			GettingText(ProductOriginalQuoteCurrencyOfSecondCostSheet);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[168], "Actual and Expected Product Original Quote Currency Of Second Cost Sheet are Not matched.Assertion Failed.please Verify");
			//Verifying the Product Original Second Quote Currency
			String productCostTotalQuoteCurrency="//td[contains(text(),'Cost Table:')]//following::td[12]";
			By ProductCostTotalQuoteCurrency=By.xpath(productCostTotalQuoteCurrency);
			GettingText(ProductCostTotalQuoteCurrency);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[388], "Actual and Expected Product Original Quote Currency Of First Cost Sheet are Not matched.Assertion Failed.please Verify");
			//Verifying the Product Cost Total first Quote Currency
			String productCostTotalQuoteCurrencySecondCostSHeet="//td[contains(text(),'Cost Table:')]//following::td[17]";
			By ProductCostTotalQuoteCurrencySecondCostSheet=By.xpath(productCostTotalQuoteCurrencySecondCostSHeet);
			GettingText(ProductCostTotalQuoteCurrencySecondCostSheet);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[388], "Actual and Expected Product Original Quote Currency Of First Cost Sheet are Not matched.Assertion Failed.please Verify");
			//Verifying the Product Cost Total Second Quote Currency 
			String productCostTotalUSD="//td[contains(text(),'Cost Table:')]//following::td[13]";
			By ProductCostTotalUSD=By.xpath(productCostTotalUSD);
			GettingText(ProductCostTotalUSD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[388], "Actual and Expected Product Original Quote Currency Of First Cost Sheet are Not matched.Assertion Failed.please Verify");
			//Verifying the Product Cost (USD)
			String productCostTotalUSDSecondCostSheet="//td[contains(text(),'Cost Table:')]//following::td[18]";
			By ProductCostTotalUSDSecondCostSheet=By.xpath(productCostTotalUSDSecondCostSheet);
			GettingText(ProductCostTotalUSDSecondCostSheet);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[388], "Actual and Expected Product Original Quote Currency Of First Cost Sheet are Not matched.Assertion Failed.please Verify");
			//Verifying the Product Cost (USD) Second Cost Sheet
			CommonFunctions.waitForElementTobeClickable(CasePackQunatityValue);
			GettingText(CasePackQunatityValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[339], "Case Pack Quantity Values ");
			CommonFunctions.waitForElementTobeClickable(Assortment_SolidWeightedAverageUSD);
			GettingText(Assortment_SolidWeightedAverageUSD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[341], "Actual and expected Ast/Solid Weighted average(USD) value are not Mached.Assertion failed.please Verify");
			//Assertion verification of Assortment/Solid Weighted Average (USD)
			CommonFunctions.waitForElementTobeClickable(Assortment_SolidWeightedAverage);
			String assortment_SolidWeightedAverageExpectedValue=driver.findElement(Assortment_SolidWeightedAverage).getText();
			CommonFunctions.AssertEqualsVerification(ActualValue, assortment_SolidWeightedAverageExpectedValue, "Actual and expected Ast/Solid Weighted average value are not Mached.Assertion failed.please Verify");
			log.info("Assortment /Solid Weighted average value is "+assortment_SolidWeightedAverageExpectedValue);
			//Assertion verification of Assortment/Solid Weighted Average (USD)
			CommonFunctions.waitForElementTobeClickable(TM_MP_SubTotalUSD);
			GettingText(TM_MP_SubTotalUSD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[337], "Actual and Expected TM_MP_SubTotal(USD) values Are Not matched.Assertion failed.please Verify");
			//Assertion verification of  TM_MP_SubTotalUSD
			CommonFunctions.waitForElementTobeClickable(TM_BP_SubTotal);
			String TM_BP_SubTotal_expectedValue=driver.findElement(TM_BP_SubTotal).getText();
			CommonFunctions.AssertEqualsVerification(ActualValue, TM_BP_SubTotal_expectedValue, "Actual and Expected TM_MP_SubTotal values Are Not matched.Assertion failed.please Verify");
			//Assertion verification of TM_BP_SubTotal
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOfCostValues"+e);
			throw e;
			}
		return true;
	}
	
	
	public static boolean AssertionVerficationOfproductCostValues(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ExFactoryCost_USD);
			String ExFactoryCostUSD=driver.findElement(ExFactoryCost_USD).getText();
			CommonFunctions.AssertEqualsVerification(ExFactoryCostUSD, data[343], "Actual and expected ExFactoryCostUSD are not Matched.Assertion failed.please verify");
			//Verifying Ex-Factory Cost USD
			CommonFunctions.waitForElementTobeClickable(TotalMarkUp_USD);
			String TotalMarkUp_USDValue=driver.findElement(TotalMarkUp_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalMarkUp_USDValue, data[345], "Actual and expected TotalMarkUp_USD values are not Matched.Please verify.Assertion failed");
			//Verifying the TotalMarkUp_USD
			CommonFunctions.waitForElementTobeClickable(TotalPackaging_USD);
			String TotalPackagingUSD= driver.findElement(TotalPackaging_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalPackagingUSD, data[347], "Actual and expected TotalPackaging_USD values are not Matched.Please verify.Assertion failed");
			//verifying Total Packaging USD
			CommonFunctions.waitForElementTobeClickable(TotalPlastic_USD);
			String TotalPlasticUSD= driver.findElement(TotalPlastic_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalPlasticUSD, data[349], "Actual and expected TotalPlasticUSD values are not Matched.Please verify.Assertion failed");
			//verifying Total Plastic USD
			CommonFunctions.waitForElementTobeClickable(TotalPurchased_USD);
			String TotalPurchasedUSD= driver.findElement(TotalPurchased_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalPurchasedUSD, data[353], "Actual and expected TotalPurchasedUSD values are not Matched.Please verify.Assertion failed");
			//verifying Total Purchased USD
			CommonFunctions.waitForElementTobeClickable(TotalSoftGoods_USD);
			String TotalSoftGoodsUSD= driver.findElement(TotalSoftGoods_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalSoftGoodsUSD, data[357], "Actual and expected TotalSoftGoodsUSD values are not Matched.Please verify.Assertion failed");
			//verifying Total Soft Goods USD
			CommonFunctions.waitForElementTobeClickable(TotalChemical_USD);
			String TotalChemicalUSD= driver.findElement(TotalChemical_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalChemicalUSD, data[351], "Actual and expected TotalChemicalUSD values are not Matched.Please verify.Assertion failed");
			//verifying Total Chemical USD
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLabor_USD);
			String TotalGeneralDecoLaborUSD= driver.findElement(GeneralDecoLabor_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalGeneralDecoLaborUSD, data[359], "Actual and expected TotalGeneralDecoLaborUSD values are not Matched.Please verify.Assertion failed");
			//verifying Total General/Deco labor USD
			CommonFunctions.waitForElementTobeClickable(TotalModingLabor_USD);
			String TotalMoldingLaborUSD= driver.findElement(TotalModingLabor_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalMoldingLaborUSD, data[361], "Actual and expected TotalMoldingLaborUSD values are not Matched.Please verify.Assertion failed");
			//verifying Total TotalMolding labor USD
			CommonFunctions.waitForElementTobeClickable(TotalElectronic_USD);
			String TotalElectronicUSD= driver.findElement(TotalElectronic_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalElectronicUSD, data[355], "Actual and expected TotalElectronicUSD values are not Matched.Please verify.Assertion failed");
			//verifying Total TotalElectronicUSD labor USD
			CommonFunctions.waitForElementTobeClickable(TotalContentMarkUP_USD);
			String TotalContentMarkUpUSD= driver.findElement(TotalContentMarkUP_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalContentMarkUpUSD, data[363], "Actual and expected Total Content Mark Up USD values are not Matched.Please verify.Assertion failed");
			//verifying Total TotalContentMarkUpUSD labor USD
			
			
			CommonFunctions.waitForElementTobeClickable(ExFactoryCost);
			String ExFactoryCostValue=driver.findElement(ExFactoryCost).getText();
			CommonFunctions.AssertEqualsVerification(ExFactoryCostValue, ExFactoryCostUSD, "Actual and expected ExFactoryCost are not Matched.Assertion failed.please verify");
			//Verifying Ex-Factory Cost
			CommonFunctions.waitForElementTobeClickable(TotalMarkUpElement);
			String TotalMarkUp_value=driver.findElement(TotalMarkUpElement).getText();
			CommonFunctions.AssertEqualsVerification(TotalMarkUp_value, TotalMarkUp_USDValue, "Actual and expected TotalMarkUp values are not Matched.Please verify.Assertion failed");
			//Verifying the TotalMarkUp
			CommonFunctions.waitForElementTobeClickable(TotalPackaging);
			String TotalPackagingValue= driver.findElement(TotalPackaging).getText();
			CommonFunctions.AssertEqualsVerification(TotalPackagingValue, TotalPackagingUSD, "Actual and expected TotalPackaging values are not Matched.Please verify.Assertion failed");
			//verifying Total Packaging
			CommonFunctions.waitForElementTobeClickable(TotalPlastic);
			String TotalPlasticValue= driver.findElement(TotalPlastic).getText();
			CommonFunctions.AssertEqualsVerification(TotalPlasticValue, TotalPlasticUSD, "Actual and expected TotalPlastic values are not Matched.Please verify.Assertion failed");
			//verifying Total Plastic
			CommonFunctions.waitForElementTobeClickable(TotalPurchased);
			String TotalPurchasedValue= driver.findElement(TotalPurchased).getText();
			CommonFunctions.AssertEqualsVerification(TotalPurchasedValue, TotalPurchasedUSD, "Actual and expected TotalPurchased values are not Matched.Please verify.Assertion failed");
			//verifying Total Purchased
			CommonFunctions.waitForElementTobeClickable(TotalSoftGoods_USD);
			String TotalSoftGoodsValue= driver.findElement(TotalSoftGoods_USD).getText();
			CommonFunctions.AssertEqualsVerification(TotalSoftGoodsValue, TotalSoftGoodsUSD, "Actual and expected TotalSoftGoodsUSD values are not Matched.Please verify.Assertion failed");
			//verifying Total Soft Goods
			CommonFunctions.waitForElementTobeClickable(TotalChemical);
			String TotalChemicalUSDValue= driver.findElement(TotalChemical).getText();
			CommonFunctions.AssertEqualsVerification(TotalChemicalUSDValue, TotalChemicalUSD, "Actual and expected TotalChemical values are not Matched.Please verify.Assertion failed");
			//verifying Total Chemical
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLabor);
			String TotalGeneralDecoLaborValue= driver.findElement(GeneralDecoLabor).getText();
			CommonFunctions.AssertEqualsVerification(TotalGeneralDecoLaborValue, TotalGeneralDecoLaborUSD, "Actual and expected general/Deco labor values are not Matched.Please verify.Assertion failed");
			//verifying Total General/Deco labor USD
			CommonFunctions.waitForElementTobeClickable(TotalModingLabor);
			String TotalMoldingLaborValue= driver.findElement(TotalModingLabor).getText();
			CommonFunctions.AssertEqualsVerification(TotalMoldingLaborValue, TotalMoldingLaborUSD, "Actual and expected TotalMoldingLabor values are not Matched.Please verify.Assertion failed");
			//verifying Total TotalMolding labor USD
			CommonFunctions.waitForElementTobeClickable(TotalElectronic);
			String TotalElectronicValue= driver.findElement(TotalElectronic).getText();
			CommonFunctions.AssertEqualsVerification(TotalElectronicValue, TotalElectronicUSD, "Actual and expected TotalElectronic values are not Matched.Please verify.Assertion failed");
			//verifying Total TotalElectronicUSD labor USD
			CommonFunctions.waitForElementTobeClickable(TotalContentMarkUP);
			String TotalContentMarkUpvalue= driver.findElement(TotalContentMarkUP).getText();
			CommonFunctions.AssertEqualsVerification(TotalContentMarkUpvalue, TotalContentMarkUpUSD, "Actual and expected Total Content mark Up values are not Matched.Please verify.Assertion failed");
			//verifying Total TotalContentMarkUpUSD labor USD
			UpdateCurrenCyConversionRate_TC_24(data);
			//Update Currency Conversion rate
			CommonFunctions.waitForElementTobeClickable(Assortment_SolidWeightedAverage);
			String assortment_SolidWeightedAverageExpectedValue=driver.findElement(Assortment_SolidWeightedAverage).getText();
			CommonFunctions.AssertEqualsVerification(assortment_SolidWeightedAverageExpectedValue, data[365], "Actual and expected Ast/Solid Weighted average value are not Mached.Assertion failed.please Verify");
			log.info("Assortment /Solid Weighted average value in HKD is "+assortment_SolidWeightedAverageExpectedValue);
			//Verifying the Assortment/Solid weighted Average
			CommonFunctions.waitForElementTobeClickable(ExFactoryCost);
			GettingText(ExFactoryCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[367], "Actual and expected Ex-factory values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Ex-factory Cost
			CommonFunctions.waitForElementTobeClickable(TotalMarkUpElement);
			GettingText(TotalMarkUpElement);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[369], "Actual and expected Total Mark Up values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Total Mark Up Cost
			CommonFunctions.waitForElementTobeClickable(TotalPlastic);
			GettingText(TotalPlastic);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[373], "Actual and expected Total Plastic values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Total Plastic Cost
			CommonFunctions.waitForElementTobeClickable(TotalPurchased);
			GettingText(TotalPurchased);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[377], "Actual and expected Total Purchased values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Total Purchased Cost
			CommonFunctions.waitForElementTobeClickable(TotalsoftGoods);
			GettingText(TotalsoftGoods);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[381], "Actual and expected Total SoftGoods values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Total SoftGoods Cost
			CommonFunctions.waitForElementTobeClickable(TotalChemical);
			GettingText(TotalChemical);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[375], "Actual and expected Total Chemical values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Total Chemical Cost
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLabor);
			GettingText(GeneralDecoLabor);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[383], "Actual and expected Total GeneralDeco values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Total generalDeco Cost
			CommonFunctions.waitForElementTobeClickable(TotalModingLabor);
			GettingText(TotalModingLabor);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[385], "Actual and expected Total Molding values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Total Molding Cost
			CommonFunctions.waitForElementTobeClickable(TotalElectronic);
			GettingText(TotalElectronic);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[379], "Actual and expected Total Electronic values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Total Electronic Cost
			CommonFunctions.waitForElementTobeClickable(TotalPackaging);
			GettingText(TotalPackaging);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[371], "Actual and expected Total Packaging values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Total Packaging Cost
			CommonFunctions.waitForElementTobeClickable(TotalContentMarkUP);
			GettingText(TotalContentMarkUP);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[387], "Actual and expected Total Content mark Up values are not Mached.Assertion failed.please Verify");
            //Verifying the HKD Total Content Mark up Cost
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception while productCostValue"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean SearchAssortmentProduct(String [] data) throws Exception{
		try{
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("headerframe");
		      //Switching into Header Frame
		      CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.searchProduct);
			  SeleniumDriver.driver.findElement(CommonProjectFunctions.searchProduct).clear();
			  CommonFunctions.enterTextInTextbox(CommonProjectFunctions.searchProduct,prodNumberForTC24);
			  CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.searchIcon);
			  CommonFunctions.clickButtonOrLink(CommonProjectFunctions.searchIcon, "Btn", "SearchButton");
			  //Clicking Search Button
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("contentframe");
		      CommonFunctions.waitForPageLoaded();
			 NavigateToDetailsTab(data);
				//Navigating to details Tab
			  CommonFunctions.waitForElementTobeClickable(Product.detailPageSeasonDD);
	          CommonFunctions.selectFromDropDownByVisibleTextUpdated(Product.detailPageSeasonDD, data[3],"Season year");
	          //CommonFunctions.handleAlertPopUp1();
	          CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SearchAssortmentProduct"+e);
			throw e;
		}
		return true;
	}
	public static boolean SearchRetailItemProduct1(String [] data) throws Exception{
		try{
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("headerframe");
		      //Switching into Header Frame
		      CommonFunctions.waitForPageLoaded();
		      CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.searchProduct);
			  SeleniumDriver.driver.findElement(CommonProjectFunctions.searchProduct).clear();
			  CommonFunctions.enterTextInTextbox(CommonProjectFunctions.searchProduct,CopyLinkRetailItem1);
			  CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.searchIcon);
			  CommonFunctions.clickButtonOrLink(CommonProjectFunctions.searchIcon, "Btn", "SearchButton");
			  //Clicking Search Button
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("contentframe");
		      CommonFunctions.waitForPageLoaded();
			  NavigateToDetailsTab(data);
				//Navigating to details Tab
			  CommonFunctions.waitForElementTobeClickable(Product.detailPageSeasonDD);
	          CommonFunctions.selectFromDropDownByVisibleTextUpdated(Product.detailPageSeasonDD, data[3],"Season year");
	          //CommonFunctions.handleAlertPopUp1();
	          CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SearchAssortmentProduct"+e);
			throw e;
		}
		return true;
	}
	public static boolean SearchRetailItemProduct2(String [] data) throws Exception{
		try{
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("headerframe");
		      //Switching into Header Frame
		      CommonFunctions.waitForPageLoaded();
		      CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.searchProduct);
			  SeleniumDriver.driver.findElement(CommonProjectFunctions.searchProduct).clear();
			  CommonFunctions.enterTextInTextbox(CommonProjectFunctions.searchProduct,CopyLinkRetailItem2);
			  CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.searchIcon);
			  CommonFunctions.clickButtonOrLink(CommonProjectFunctions.searchIcon, "Btn", "SearchButton");
			  //Clicking Search Button
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("contentframe");
		      CommonFunctions.waitForPageLoaded();
			  NavigateToDetailsTab(data);
				//Navigating to details Tab
			  CommonFunctions.waitForElementTobeClickable(Product.detailPageSeasonDD);
	          CommonFunctions.selectFromDropDownByVisibleTextUpdated(Product.detailPageSeasonDD, data[3],"Season year");
	          //CommonFunctions.handleAlertPopUp1();
	          CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SearchAssortmentProduct"+e);
			throw e;
		}
		return true;
	}
	public static boolean CreateCostSheetForRetailItem1(String [] data) throws Exception{
		try{
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("headerframe");
		      //Switching into Header Frame
		      CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.searchProduct);
			  SeleniumDriver.driver.findElement(CommonProjectFunctions.searchProduct).clear();
			  CommonFunctions.enterTextInTextbox(CommonProjectFunctions.searchProduct,CopyLinkRetailItem1);
			  CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.searchIcon);
			  CommonFunctions.clickButtonOrLink(CommonProjectFunctions.searchIcon, "Btn", "SearchButton");
			  //Clicking Search Button
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("contentframe");
		      CommonFunctions.waitForPageLoaded();
			  NavigateToDetailsTab(data);
			  CommonFunctions.waitForPageLoaded();
	          ClickSeasonAndSource(data);
			 //Selecting Season and Source
			  NavigateToCostingTab(data);
			 //Navigating to Costing Tab
			  AssertionVerficationOTypeOfInternalCostSheetforRetailItem(data);
			  //Assertion Verification Of Retail Item Internal
			  CreateInternalCostSheetForRetailItemInternal(data);
			  //Creating a Cost sheet
			  UpdationOfCostSheet_TC_24(data);
			  //Update Cost Sheet as Primary
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateCostSheetForRetailItem1"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean CreateCostSheetForRetailItem2(String [] data) throws Exception{
		try{
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("headerframe");
		      //Switching into Header Frame
		      CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.searchProduct);
			  SeleniumDriver.driver.findElement(CommonProjectFunctions.searchProduct).clear();
			  CommonFunctions.enterTextInTextbox(CommonProjectFunctions.searchProduct,CopyLinkRetailItem2);
			  CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.searchIcon);
			  CommonFunctions.clickButtonOrLink(CommonProjectFunctions.searchIcon, "Btn", "SearchButton");
			  //Clicking Search Button
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("contentframe");
		      CommonFunctions.waitForPageLoaded();
			  NavigateToDetailsTab(data);
			  CommonFunctions.waitForPageLoaded();
	          ClickSeasonAndSource(data);
			 //Selecting Season and Source
			  NavigateToCostingTab(data);
			 //Navigating to Costing Tab
			  AssertionVerficationOTypeOfInternalCostSheetforRetailItem(data);
			  //Assertion Verification Of Retail Item Internal
			  CreateInternalCostSheetForRetailItemInternal(data);
			  //Creating a Cost sheet
			  UpdationOfCostSheet_TC_24(data);
			  //Update Cost Sheet as Primary
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateCostSheetForRetailItem1"+e);
			throw e;
		}
		return true;
	}
	public static String CopyLinkProductRetailItem1(String [] data) throws Exception{
		try{
			UnSelectSource(data);
			CommonFunctions.waitForElementTobeClickable(RFQPageActionDropDown);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='prodseasonActions']")));
		     List<WebElement> allOptions=dropdDown.getOptions();
	      for(int i=0;i<allOptions.size();i++){
		     String RequiredValue=allOptions.get(i).getText();
		    // System.out.println(RequiredValue);
		     if(RequiredValue.contains(data[141]))
		     {
		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQPageActionDropDown, RequiredValue, "Source DropDown Selection");
		     wait.until(ExpectedConditions.titleIs(data[222]));
		    CommonFunctions.waitForPageLoaded();
		     break;
		     }
	      }
	     CommonFunctions.waitForElementTobeClickable(ProductTypeInCopyLink);
	     Select dropdDown1 = new Select(driver.findElement(By.xpath("//select[@id='productTypedata']")));
	     List<WebElement> allOptions1=dropdDown1.getOptions();
         for(int i=0;i<allOptions1.size();i++){
	     String RequiredValue=allOptions1.get(i).getText();
	     System.out.println(RequiredValue);
	     if(RequiredValue.contains(data[322]))
	     {
	     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ProductTypeInCopyLink, data[322], "product Type");
	     break;
	     }
         }
	     //Selecting the Product Type
	     CommonFunctions.waitForElementTobeClickable(RelationShipType);
	     Select dropdDown2 = new Select(driver.findElement(By.xpath("//select[@id='copyModedata']")));
	     List<WebElement> allOptions2=dropdDown2.getOptions();
         for(int i=0;i<allOptions2.size();i++){
	     String RequiredValue=allOptions2.get(i).getText();
	     System.out.println(RequiredValue);
	     if(RequiredValue.contains(data[323]))
	     {
	      CommonFunctions.selectFromDropDownByVisibleTextUpdated(RelationShipType, data[323], "RelationShipType");
		   //Selecting a RelationShip Type
	     break;
	     }
         }
	
	     CommonFunctions.waitForElementTobeClickable(ColorwayCheckBox);
	     CommonFunctions.clickButtonOrLink(ColorwayCheckBox, "Check Box", "ColorWay Check Box");
	     //Selecting the Colorway Check box
	     CommonFunctions.waitForElementTobeClickable(CopyLinkNextButton);
	     CommonFunctions.clickButtonOrLink(CopyLinkNextButton, "Button", "Next");
	     //Clicking Next Button
	     wait.until(ExpectedConditions.visibilityOfElementLocated(SoftGoodsIncluded));
	     CommonFunctions.waitForPageLoaded();
	     CommonFunctions.selectFromDropDownByVisibleTextUpdated(SoftGoodsIncluded, data[324], "SoftGoodIncluded");
	     //Selecting the SoftGoods Value
	     wait.until(ExpectedConditions.visibilityOfElementLocated(ElectronicsIncluded));
	     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ElectronicsIncluded, data[325], "ElectronicsIncluded");
	     //Selecting the Electronics Included Value
	     CommonFunctions.waitForElementTobeClickable(CopyLinkNextButton);
	     CommonFunctions.clickButtonOrLink(CopyLinkNextButton, "Button", "Next");
	     //Clicking Next Button
	     wait.until(ExpectedConditions.titleIs(data[144]));
	     CommonFunctions.waitForPageLoaded();
	     wait.until(ExpectedConditions.visibilityOfElementLocated(ViewProductButton));
	     CommonFunctions.clickButtonOrLink(ViewProductButton, "Button", "view Product");
	    CommonFunctions.waitForPageLoaded();
	     wait.until(ExpectedConditions.visibilityOfElementLocated(RetailItemIdentification));
	     CopyLinkRetailItem1=driver.findElement(RetailItemIdentification).getText();
	     log.info("Created Copy/Link Product RetailItem Value is "+CopyLinkRetailItem1);
           
	}
		catch(Exception e){
			fail=true;
			log.error("Exception in CopyLinkProductRetailItem1"+e);
			throw e;
		}
	 return CopyLinkRetailItem1;
	}
	
	public static String CopyLinkProductRetailItem2(String [] data) throws Exception{
		try{
			UnSelectSource(data);
			CommonFunctions.waitForElementTobeClickable(RFQPageActionDropDown);
			Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='prodseasonActions']")));
		     List<WebElement> allOptions=dropdDown.getOptions();
	      for(int i=0;i<allOptions.size();i++){
		     String RequiredValue=allOptions.get(i).getText();
		    // System.out.println(RequiredValue);
		     if(RequiredValue.contains(data[141]))
		     {
		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQPageActionDropDown, RequiredValue, "Source DropDown Selection");
		     wait.until(ExpectedConditions.titleIs(data[222]));
		    CommonFunctions.waitForPageLoaded();
		     break;
		     }
	      }
	     CommonFunctions.waitForElementTobeClickable(ProductTypeInCopyLink);
	     Select dropdDown1 = new Select(driver.findElement(By.xpath("//select[@id='productTypedata']")));
	     List<WebElement> allOptions1=dropdDown1.getOptions();
         for(int i=0;i<allOptions1.size();i++){
	     String RequiredValue=allOptions1.get(i).getText();
	     System.out.println(RequiredValue);
	     if(RequiredValue.contains(data[322]))
	     {
	     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ProductTypeInCopyLink, data[322], "product Type");
	     break;
	     }
         }
	     //Selecting the Product Type
	     CommonFunctions.waitForElementTobeClickable(RelationShipType);
	     Select dropdDown2 = new Select(driver.findElement(By.xpath("//select[@id='copyModedata']")));
	     List<WebElement> allOptions2=dropdDown2.getOptions();
         for(int i=0;i<allOptions2.size();i++){
	     String RequiredValue=allOptions2.get(i).getText();
	     System.out.println(RequiredValue);
	     if(RequiredValue.contains(data[323]))
	     {
	      CommonFunctions.selectFromDropDownByVisibleTextUpdated(RelationShipType, data[323], "RelationShipType");
		   //Selecting a RelationShip Type
	     break;
	     }
         }
	
	     CommonFunctions.waitForElementTobeClickable(ColorwayCheckBox);
	     CommonFunctions.clickButtonOrLink(ColorwayCheckBox, "Check Box", "ColorWay Check Box");
	     //Selecting the Colorway Check box
	     CommonFunctions.waitForElementTobeClickable(CopyLinkNextButton);
	     CommonFunctions.clickButtonOrLink(CopyLinkNextButton, "Button", "Next");
	     //Clicking Next Button
	     wait.until(ExpectedConditions.visibilityOfElementLocated(SoftGoodsIncluded));
	     CommonFunctions.waitForPageLoaded();
	     CommonFunctions.selectFromDropDownByVisibleTextUpdated(SoftGoodsIncluded, data[324], "SoftGoodIncluded");
	     //Selecting the SoftGoods Value
	     wait.until(ExpectedConditions.visibilityOfElementLocated(ElectronicsIncluded));
	     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ElectronicsIncluded, data[325], "ElectronicsIncluded");
	     //Selecting the Electronics Included Value
	     CommonFunctions.waitForElementTobeClickable(CopyLinkNextButton);
	     CommonFunctions.clickButtonOrLink(CopyLinkNextButton, "Button", "Next");
	     //Clicking Next Button
	     wait.until(ExpectedConditions.titleIs(data[144]));
	     CommonFunctions.waitForPageLoaded();
	     wait.until(ExpectedConditions.visibilityOfElementLocated(ViewProductButton));
	     CommonFunctions.clickButtonOrLink(ViewProductButton, "Button", "view Product");
	     CommonFunctions.waitForPageLoaded();
	     wait.until(ExpectedConditions.visibilityOfElementLocated(RetailItemIdentification));
	     CopyLinkRetailItem2=driver.findElement(RetailItemIdentification).getText();
	     log.info("Created Copy/Link Product RetailItem Value is "+CopyLinkRetailItem2);
           
	}
		catch(Exception e){
			fail=true;
			log.error("Exception in CopyLinkProductRetailItem2"+e);
			throw e;
		}
	 return CopyLinkRetailItem2;
	}
	
	public static boolean UnSelectSource(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
            //CommonFunctions.waitForElementTobeClickable(SourcingDropDown);
            Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Source')]//following::select[1]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
   		     String RequiredValue=allOptions.get(i).getText();
   		    // System.out.println(RequiredValue);
   		     if(RequiredValue.contains(data[146]))
   		     {
   		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SourcingDropDown, RequiredValue, "Source DropDown Selection");
   		    	 wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
   		    	 CommonFunctions.waitForPageLoaded();
   		    	 break;
   		     }
   		    
            }
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UnSelectSource"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean CreateSpecificationAndColorway(String [] data) throws Exception{
		try{
		wait.until(ExpectedConditions.visibilityOfElementLocated(Specification));
		CommonFunctions.waitForPageLoaded();
		CommonFunctions.clickButtonOrLink(Specification, "HyperLink", "Specification");
		
		//Clicking Specification Tab
		ClickSeasonAndSource(data);
		//Sdding Source and Season
		CreateColorway(data);
		//Creating a Colorway
		CreateSpecification(data);
		//Creating a Specification
		
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateSpecification"+e);
			throw e;
		}
		return true;
	}
	
	public static String CreateColorway(String [] data) throws Exception{
		try{
		CommonFunctions.waitForElementTobeClickable(ActionDropDownOfSpecicationTab);
		Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='prodseasonActions']")));
	     List<WebElement> allOptions=dropdDown.getOptions();
	    
      for(int i=0;i<allOptions.size();i++){
	     String RequiredValue=allOptions.get(i).getText();
	    // System.out.println(RequiredValue);
	     if(RequiredValue.contains(data[63]))
	     {
	     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ActionDropDownOfSpecicationTab, RequiredValue, "Source DropDown Selection");
	     wait.until(ExpectedConditions.titleIs(data[180]));
	     CommonFunctions.waitForPageLoaded();
	     break;
	     }
      }
      CommonFunctions.gettingParentWindow();
		CommonFunctions.waitForElementTobeClickable(SuffixColorwayHyperLink);
		CommonFunctions.clickButtonOrLink(SuffixColorwayHyperLink, "HyperLink", "Suffix");
		//Clicking on Suffix Hyperlink
		CommonFunctions.switchingChildWindow();
		CommonFunctions.waitForElementTobeClickable(SearchButton);
	    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
	    //Clicking Search Button
	    CommonFunctions.waitForPageLoaded();
	    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
	    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
	    //Clicking on Choose Button
	    CommonFunctions.switchParentWindow();
	    driver.switchTo().defaultContent();
		driver.switchTo().frame("contentframe");
	    //Switching Frame
	    CommonFunctions.waitForPageLoaded();	
		CommonFunctions.waitForElementTobeClickable(SaveButtonOfCostSheet);
		CommonFunctions.clickButtonOrLink(SaveButtonOfCostSheet, "Button", "Save");
		//Clicking Save Button
		wait.until(ExpectedConditions.titleIs(data[144]));
		CommonFunctions.waitForPageLoaded();
		CommonFunctions.waitForElementTobeClickable(ViewProductButton);
		CommonFunctions.clickButtonOrLink(ViewProductButton, "Button", "View Product");
		//Clicking view Product Button
		CommonFunctions.waitForPageLoaded();
		wait.until(ExpectedConditions.visibilityOfElementLocated(ColorwayDropDown));
		ColorwayDropdownValue = new Select(driver.findElement(ColorwayDropDown)).getFirstSelectedOption().getText();
		log.info("The Seected ColorwayValue is "+ColorwayDropdownValue);
		
	}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateSpecification"+e);
			throw e;
		}
		return ColorwayDropdownValue;
	}
	
	
	public static String CreateSpecification(String [] data) throws Exception{
		try{
		wait.until(ExpectedConditions.visibilityOfElementLocated(CreateNewSpecification));
		CommonFunctions.waitForPageLoaded();
		CommonFunctions.clickButtonOrLink(CreateNewSpecification, "Button", "Create New Specification");
		wait.until(ExpectedConditions.titleIs(data[26]));
		CommonFunctions.waitForPageLoaded();
		CommonFunctions.waitForElementTobeClickable(WaveDropDownInSpecificaton);
		CommonFunctions.selectFromDropDownByVisibleTextUpdated(WaveDropDownInSpecificaton, data[161], "wave value");
		//Selecting wave value
		CommonFunctions.waitForElementTobeClickable(SpecificationStatus);
		CommonFunctions.selectFromDropDownByVisibleTextUpdated(SpecificationStatus, data[139], "Specification Status");
		//Selecting the Specification Status
		CommonFunctions.waitForElementTobeClickable(RFQCreateButton);
		CommonFunctions.clickButtonOrLink(RFQCreateButton, "Button", "Create");
		 //Clicking Create Button
		wait.until(ExpectedConditions.visibilityOfElementLocated(InternalBOMSoftG.selectSpecification));
		wait.until(ExpectedConditions.titleIs(data[144]));
		CommonFunctions.waitForPageLoaded();
	   CommonFunctions.selectFromDropDownByIndex(InternalBOMSoftG.selectSpecification, 1);
	//CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.selectSpecification);
	   wait.until(ExpectedConditions.visibilityOfElementLocated(InternalBOMSoftG.selectSpecification));
	   CommonFunctions.waitForPageLoaded();
	  InternalBOMSoftG.strSpec=new Select(driver.findElement(InternalBOMSoftG.selectSpecification)).getFirstSelectedOption().getText();
	}
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateSpecification"+e);
			throw e;
		}
		return InternalBOMSoftG.strSpec;
	}
	
	
	public static boolean UpdateVendorRetailItemCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
           for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[179]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
 		     wait.until(ExpectedConditions.titleIs(data[180]));
 		    CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
           }
           CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
           CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "Cost Sheet Currency Drop-Down");
           //Selecting Currency Value
           CommonFunctions.waitForElementTobeClickable(PlasticMaterialTextBox);
           CommonFunctions.clearTextBox(PlasticMaterialTextBox, "PlasticMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(PlasticMaterialTextBox, data[231], "Plastic Material Text Box");
           //Entering value In Plastic Material Text box
           CommonFunctions.waitForElementTobeClickable(PackagingMaterialTextBox);
           CommonFunctions.clearTextBox(PackagingMaterialTextBox, "PackagingMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(PackagingMaterialTextBox, data[230], "Packaging Material Text Box");
           //Entering value In Packaging Material Text box
           CommonFunctions.waitForElementTobeClickable(ChemicalMaterialTextBox);
           CommonFunctions.clearTextBox(ChemicalMaterialTextBox, "ChemicalMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(ChemicalMaterialTextBox, data[232], "Chemical Material Text Box");
           //Entering value In Chemical Material Text box
           CommonFunctions.waitForElementTobeClickable(PurchasedMaterialTextBox);
           CommonFunctions.clearTextBox(PurchasedMaterialTextBox, "PurchasedMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(PurchasedMaterialTextBox, data[233], "Purchased Material Text Box");
           //Entering value In Purchased Material Text box
           CommonFunctions.waitForElementTobeClickable(ElectronicMaterialTextBox);
           CommonFunctions.clearTextBox(ElectronicMaterialTextBox, "ElectronicMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(ElectronicMaterialTextBox, data[234], "Electronic Material Text Box");
           //Entering value In Electronic Material Text box
           CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialTextBox);
           CommonFunctions.clearTextBox(SoftGoodMaterialTextBox, "SoftGoodMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(SoftGoodMaterialTextBox, data[235], "Soft Good Material Text Box");
           //Entering value In Soft Goods Material Text box
           CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborTextBox);
           CommonFunctions.clearTextBox(GeneralDecoLaborTextBox, "GeneralDecoLaborTextBox");
           CommonFunctions.enterTextInTextboxUpdated(GeneralDecoLaborTextBox, data[236], "General/Deco Material Text Box");
           //Entering value In general/Deco Material Text box
           CommonFunctions.waitForElementTobeClickable(MoldinglaborCostTextBox);
           CommonFunctions.clearTextBox(MoldinglaborCostTextBox, "MoldinglaborCostTextBox");
           CommonFunctions.enterTextInTextboxUpdated(MoldinglaborCostTextBox, data[237], "Molding Labor Material Text Box");
           //Entering value In Molding Material Text box
           CommonFunctions.waitForElementTobeClickable(OverheadAndMarkUpTextBox);
           CommonFunctions.clearTextBox(OverheadAndMarkUpTextBox, "OverheadAndMarkUpTextBox");
           CommonFunctions.enterTextInTextboxUpdated(OverheadAndMarkUpTextBox, data[238], "Overhead or Mark Up Material Text Box");
           //Entering value In Overhead or Mark Up Text box
           CommonFunctions.waitForElementTobeClickable(SaveButtonOfCostSheet);
           CommonFunctions.clickButtonOrLink(SaveButtonOfCostSheet, "Save Button");
           wait.until(ExpectedConditions.titleIs(data[144]));
           CommonFunctions.waitForPageLoaded();
           
		}
           catch(Exception e){
        	   fail=true;
        	   log.error("Exception in Updating the Cost Sheet"+e);
        	   throw e;
           }
		return true;
	}
	
	public static boolean UpdateInternalRetailItemCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
           for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[179]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
 		     wait.until(ExpectedConditions.titleIs(data[180]));
 		    CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
           }
           CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
           CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "Cost Sheet Currency Drop-Down");
           //Selecting Currency Value
           CommonFunctions.waitForElementTobeClickable(PlasticMaterialTextBox);
           CommonFunctions.clearTextBox(PlasticMaterialTextBox, "PlasticMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(PlasticMaterialTextBox, data[231], "Plastic Material Text Box");
           //Entering value In Plastic Material Text box
           CommonFunctions.waitForElementTobeClickable(PackagingMaterialTextBox);
           CommonFunctions.clearTextBox(PackagingMaterialTextBox, "PackagingMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(PackagingMaterialTextBox, data[230], "Packaging Material Text Box");
           //Entering value In Packaging Material Text box
           CommonFunctions.waitForElementTobeClickable(ChemicalMaterialTextBox);
           CommonFunctions.clearTextBox(ChemicalMaterialTextBox, "ChemicalMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(ChemicalMaterialTextBox, data[232], "Chemical Material Text Box");
           //Entering value In Chemical Material Text box
           CommonFunctions.waitForElementTobeClickable(PurchasedMaterialTextBox);
           CommonFunctions.clearTextBox(PurchasedMaterialTextBox, "PurchasedMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(PurchasedMaterialTextBox, data[233], "Purchased Material Text Box");
           //Entering value In Purchased Material Text box
           CommonFunctions.waitForElementTobeClickable(ElectronicMaterialTextBox);
           CommonFunctions.clearTextBox(ElectronicMaterialTextBox, "ElectronicMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(ElectronicMaterialTextBox, data[234], "Electronic Material Text Box");
           //Entering value In Electronic Material Text box
           CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialTextBox);
           CommonFunctions.clearTextBox(SoftGoodMaterialTextBox, "SoftGoodMaterialTextBox");
           CommonFunctions.enterTextInTextboxUpdated(SoftGoodMaterialTextBox, data[235], "Soft Good Material Text Box");
           //Entering value In Soft Goods Material Text box
           CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborTextBox);
           CommonFunctions.clearTextBox(GeneralDecoLaborTextBox, "GeneralDecoLaborTextBox");
           CommonFunctions.enterTextInTextboxUpdated(GeneralDecoLaborTextBox, data[236], "General/Deco Material Text Box");
           //Entering value In general/Deco Material Text box
           CommonFunctions.waitForElementTobeClickable(MoldinglaborCostTextBox);
           CommonFunctions.clearTextBox(MoldinglaborCostTextBox, "MoldinglaborCostTextBox");
           CommonFunctions.enterTextInTextboxUpdated(MoldinglaborCostTextBox, data[237], "Molding Labor Material Text Box");
           //Entering value In Molding Material Text box
           CommonFunctions.waitForElementTobeClickable(ContentMarkUpTextBox);
           CommonFunctions.clearTextBox(ContentMarkUpTextBox, "ContentMarkUpTextBox");
           CommonFunctions.enterTextInTextboxUpdated(ContentMarkUpTextBox, data[238], "Mark Up Material Text Box");
           //Entering value In Overhead or Mark Up Text box
           CommonFunctions.waitForElementTobeClickable(RetailItemCostTextBox);
           CommonFunctions.clearTextBox(RetailItemCostTextBox, "RetailItemCostTextBox");
           CommonFunctions.enterTextInTextboxUpdated(RetailItemCostTextBox, data[239], "Retail Item cost Sheet");
           CommonFunctions.waitForElementTobeClickable(SaveButtonOfCostSheet);
           CommonFunctions.clickButtonOrLink(SaveButtonOfCostSheet, "Save Button");
           wait.until(ExpectedConditions.titleIs(data[144]));
           CommonFunctions.waitForPageLoaded();
           
		}
           catch(Exception e){
        	   fail=true;
        	   log.error("Exception in Updating the Cost Sheet"+e);
        	   throw e;
           }
		return true;
	}
	
	public static boolean AssertionVerificationOfContentTableUpdation_Vendor(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ContentTableLastModifiedBy);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableLastModifiedBy, "ContentTableLastModifiedBy"), "ContentTableLastModifiedBy is not present.Assertion failed.Please Check");
			//Verifying the Content Table Last Modified By is Appearing or not
			CommonFunctions.waitForElementTobeClickable(ContentTableLastModifiedBy);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableLastModifiedDate, "ContentTableLastModifiedDate"), "ContentTableLastModifiedDate is not present.Assertion failed.Please Check");
			//Verifying the Content Table Last Modified date is Appearing or not
			CommonFunctions.waitForElementTobeClickable(CostSheetRetailItemStatusValue);
			GettingText(CostSheetRetailItemStatusValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[182], "Actual and Expected status are not Matched>please Verify");
			//Verifying the Cost Sheet Status
			CommonFunctions.waitForElementTobeClickable(VendorTableProductOriginalQuoteCurrency);
			GettingText(VendorTableProductOriginalQuoteCurrency);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[168], "Actual and Expected Values are Not Matched.Please Verify.Assertion Failed");
			//Assertion Verification of Product Quote Currency
			CommonFunctions.waitForElementTobeClickable(VendorTableProductCostTotal);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductCostTotal, "ProductCostTotal value Appears"), "Condition failed.Assertion failed.Please check");
			//Assertion Verification of Product Quote Currency
			CommonFunctions.waitForElementTobeClickable(VendorTableProductCostTotalUSD);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductCostTotalUSD, "ProductCostTotalUSD value Appears"), "Condition failed.Assertion failed.Please check");
			//Assertion Verification of Product Quote Currency(USD)
			CommonFunctions.waitForElementTobeClickable(QuoteCurreny);
			GettingText(QuoteCurreny);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[213], "Actual and Expected Currency types are not matched.Assertion Failed.Please Verify");
			//Verifying the Quote Currency
			if(!(data[168].equals(data[241])))
			{
				CommonFunctions.waitForElementTobeClickable(TotalPlasticCostIdentification);
				TotalPlasticCostValue=driver.findElement(TotalPlasticCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPlasticCostValue, data[309], "Actual and Expected Total Plastic cost Values are not matched.Please Verirify");
				log.info("Total Plastic Cost value is "+TotalPlasticCostValue);
				//Total Plastic Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPurchasedCostIdentification));
				TotalPurchasedCostValue=driver.findElement(TotalPurchasedCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPurchasedCostValue, data[311], "Actual and Expected Total Purchased cost Values are not matched.Please Verirify");
				log.info("Total Purchased Cost value is "+TotalPurchasedCostValue);
				//Total Purchased Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalSoftGoodsCostCostIdentification));
				TotalSoftGoodsCostValue=driver.findElement(TotalSoftGoodsCostCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalSoftGoodsCostValue, data[313], "Actual and Expected Total soft good cost Values are not matched.Please Verirify");
				log.info("Total Soft Good Cost value is "+TotalSoftGoodsCostValue);
				//Total Purchased Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalChemicalCostCostIdentification));
				TotalChemicalCostValue=driver.findElement(TotalChemicalCostCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalChemicalCostValue, data[310], "Actual and Expected Total Chemical cost Values are not matched.Please Verirify");
				log.info("Total Chemical Cost value is "+TotalChemicalCostValue);
				//Total Chemical Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalGeneralOrDecoCostIdentification));
				TotalGeneralOrDecoCostValue=driver.findElement(TotalGeneralOrDecoCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalGeneralOrDecoCostValue, data[314], "Actual and Expected Total GeneralOrDeco cost Values are not matched.Please Verirify");
				log.info("Total general Deco Cost value is "+TotalGeneralOrDecoCostValue);
				//Total General/Deco Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMoldingLaborCostIdentification));
				TotalMoldingLaborCostValue=driver.findElement(TotalMoldingLaborCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalMoldingLaborCostValue, data[315], "Actual and Expected Total MoldingLabor cost Values are not matched.Please Verirify");
				log.info("Total Molding Labor Cost value is "+TotalMoldingLaborCostValue);
				//Total Molding Labor Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalElectronicCostIdentification));
				TotalElectronicCostValue=driver.findElement(TotalElectronicCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalElectronicCostValue, data[312], "Actual and Expected Total Electronic cost Values are not matched.Please Verirify");
				log.info("Total Electronic Cost value is "+TotalElectronicCostValue);
				//Total Electronic Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPackagingCostIdentification));
				TotalPackagingCostValue=driver.findElement(TotalPackagingCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPackagingCostValue, data[308], "Actual and Expected Total Packaging cost Values are not matched.Please Verirify");
				log.info("Total Packaging Cost value is "+TotalPackagingCostValue);
				//Total Packaging Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalContentAndOverHeadMarkupCostIdentification));
				TotalContentAndOverHeadMarkupCostValue=driver.findElement(TotalContentAndOverHeadMarkupCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalContentAndOverHeadMarkupCostValue, data[316], "Actual and Expected Total ContentAndOverHeadMarkup cost Values are not matched.Please Verirify");
				log.info("Total Content And Overhead markUp value is "+TotalContentAndOverHeadMarkupCostValue);
				//Total Content and MarkUp Cost Value
				
			}
			else{
				CommonFunctions.waitForElementTobeClickable(TotalPlasticCostIdentification);
				TotalPlasticCostValue=driver.findElement(TotalPlasticCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPlasticCostValue, data[231], "Actual and Expected Total Plastic cost Values are not matched.Please Verirify");
				log.info("Total Plastic Cost value is "+TotalPlasticCostValue);
				//Total Plastic Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPurchasedCostIdentification));
				TotalPurchasedCostValue=driver.findElement(TotalPurchasedCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPurchasedCostValue, data[233], "Actual and Expected Total Purchased cost Values are not matched.Please Verirify");
				log.info("Total Purchased Cost value is "+TotalPurchasedCostValue);
				//Total Purchased Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalSoftGoodsCostCostIdentification));
				TotalSoftGoodsCostValue=driver.findElement(TotalSoftGoodsCostCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalSoftGoodsCostValue, data[235], "Actual and Expected Total soft good cost Values are not matched.Please Verirify");
				log.info("Total Soft Good Cost value is "+TotalSoftGoodsCostValue);
				//Total Purchased Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalChemicalCostCostIdentification));
				TotalChemicalCostValue=driver.findElement(TotalChemicalCostCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalChemicalCostValue, data[232], "Actual and Expected Total Chemical cost Values are not matched.Please Verirify");
				log.info("Total Chemical Cost value is "+TotalChemicalCostValue);
				//Total Chemical Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalGeneralOrDecoCostIdentification));
				TotalGeneralOrDecoCostValue=driver.findElement(TotalGeneralOrDecoCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalGeneralOrDecoCostValue, data[236], "Actual and Expected Total GeneralOrDeco cost Values are not matched.Please Verirify");
				log.info("Total general Deco Cost value is "+TotalGeneralOrDecoCostValue);
				//Total General/Deco Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMoldingLaborCostIdentification));
				TotalMoldingLaborCostValue=driver.findElement(TotalMoldingLaborCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalMoldingLaborCostValue, data[237], "Actual and Expected Total MoldingLabor cost Values are not matched.Please Verirify");
				log.info("Total Molding Labor Cost value is "+TotalMoldingLaborCostValue);
				//Total Molding Labor Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalElectronicCostIdentification));
				TotalElectronicCostValue=driver.findElement(TotalElectronicCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalElectronicCostValue, data[234], "Actual and Expected Total Electronic cost Values are not matched.Please Verirify");
				log.info("Total Electronic Cost value is "+TotalElectronicCostValue);
				//Total Electronic Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPackagingCostIdentification));
				TotalPackagingCostValue=driver.findElement(TotalPackagingCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPackagingCostValue, data[230], "Actual and Expected Total Packaging cost Values are not matched.Please Verirify");
				log.info("Total Packaging Cost value is "+TotalPackagingCostValue);
				//Total Packaging Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalContentAndOverHeadMarkupCostIdentification));
				TotalContentAndOverHeadMarkupCostValue=driver.findElement(TotalContentAndOverHeadMarkupCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalContentAndOverHeadMarkupCostValue, data[316], "Actual and Expected Total ContentAndOverHeadMarkup cost Values are not matched.Please Verirify");
				log.info("Total Content And Overhead markUp value is "+TotalContentAndOverHeadMarkupCostValue);
				//Total Content and MarkUp Cost Value
				
				
			
			}
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToRetailItem"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerificationOfContentTableUpdation_Internal(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ContentTableLastModifiedBy);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableLastModifiedBy, "ContentTableLastModifiedBy"), "ContentTableLastModifiedBy is not present.Assertion failed.Please Check");
			//Verifying the Content Table Last Modified By is Appearing or not
			CommonFunctions.waitForElementTobeClickable(ContentTableLastModifiedBy);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableLastModifiedDate, "ContentTableLastModifiedDate"), "ContentTableLastModifiedDate is not present.Assertion failed.Please Check");
			//Verifying the Content Table Last Modified date is Appearing or not
			CommonFunctions.waitForElementTobeClickable(CostSheetRetailItemStatusValue);
			GettingText(CostSheetRetailItemStatusValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[182], "Actual and Expected status are not Matched>please Verify");
			//Verifying the Cost Sheet Status
			CommonFunctions.waitForElementTobeClickable(VendorTableProductOriginalQuoteCurrency);
			GettingText(VendorTableProductOriginalQuoteCurrency);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[168], "Actual and Expected Values are Not Matched.Please Verify.Assertion Failed");
			//Assertion Verification of Product Quote Currency
			CommonFunctions.waitForElementTobeClickable(VendorTableProductCostTotal);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductCostTotal, "ProductCostTotal value Appears"), "Condition failed.Assertion failed.Please check");
			//Assertion Verification of Product Quote Currency
			CommonFunctions.waitForElementTobeClickable(VendorTableProductCostTotalUSD);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductCostTotalUSD, "ProductCostTotalUSD value Appears"), "Condition failed.Assertion failed.Please check");
			//Assertion Verification of Product Quote Currency(USD)
			CommonFunctions.waitForElementTobeClickable(QuoteCurreny);
			GettingText(QuoteCurreny);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[213], "Actual and Expected Currency types are not matched.Assertion Failed.Please Verify");
			//Verifying the Quote Currency
			if(!(data[168].equals(data[241])))
			{
				CommonFunctions.waitForElementTobeClickable(TotalPlasticCostIdentification);
				TotalPlasticCostValue=driver.findElement(TotalPlasticCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPlasticCostValue, data[309], "Actual and Expected Total Plastic cost Values are not matched.Please Verirify");
				log.info("Total Plastic Cost value is "+TotalPlasticCostValue);
				//Total Plastic Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPurchasedCostIdentification));
				TotalPurchasedCostValue=driver.findElement(TotalPurchasedCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPurchasedCostValue, data[311], "Actual and Expected Total Purchased cost Values are not matched.Please Verirify");
				log.info("Total Purchased Cost value is "+TotalPurchasedCostValue);
				//Total Purchased Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalSoftGoodsCostCostIdentification));
				TotalSoftGoodsCostValue=driver.findElement(TotalSoftGoodsCostCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalSoftGoodsCostValue, data[313], "Actual and Expected Total soft good cost Values are not matched.Please Verirify");
				log.info("Total Soft Good Cost value is "+TotalSoftGoodsCostValue);
				//Total Purchased Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalChemicalCostCostIdentification));
				TotalChemicalCostValue=driver.findElement(TotalChemicalCostCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalChemicalCostValue, data[310], "Actual and Expected Total Chemical cost Values are not matched.Please Verirify");
				log.info("Total Chemical Cost value is "+TotalChemicalCostValue);
				//Total Chemical Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalGeneralOrDecoCostIdentification));
				TotalGeneralOrDecoCostValue=driver.findElement(TotalGeneralOrDecoCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalGeneralOrDecoCostValue, data[314], "Actual and Expected Total GeneralOrDeco cost Values are not matched.Please Verirify");
				log.info("Total general Deco Cost value is "+TotalGeneralOrDecoCostValue);
				//Total General/Deco Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMoldingLaborCostIdentification));
				TotalMoldingLaborCostValue=driver.findElement(TotalMoldingLaborCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalMoldingLaborCostValue, data[315], "Actual and Expected Total MoldingLabor cost Values are not matched.Please Verirify");
				log.info("Total Molding Labor Cost value is "+TotalMoldingLaborCostValue);
				//Total Molding Labor Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalElectronicCostIdentification));
				TotalElectronicCostValue=driver.findElement(TotalElectronicCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalElectronicCostValue, data[312], "Actual and Expected Total Electronic cost Values are not matched.Please Verirify");
				log.info("Total Electronic Cost value is "+TotalElectronicCostValue);
				//Total Electronic Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPackagingCostIdentification));
				TotalPackagingCostValue=driver.findElement(TotalPackagingCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPackagingCostValue, data[308], "Actual and Expected Total Packaging cost Values are not matched.Please Verirify");
				log.info("Total Packaging Cost value is "+TotalPackagingCostValue);
				//Total Packaging Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(ContentMarkupCostIdentification));
				ContentMarkupCostValue=driver.findElement(ContentMarkupCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(ContentMarkupCostValue, data[316], "Actual and Expected Total ContentAndOverHeadMarkup cost Values are not matched.Please Verirify");
				log.info("Total Content And Overhead markUp value is "+ContentMarkupCostValue);
				//Total Content and MarkUp Cost Value
				
			}
			else{
				CommonFunctions.waitForElementTobeClickable(TotalPlasticCostIdentification);
				TotalPlasticCostValue=driver.findElement(TotalPlasticCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPlasticCostValue, data[231], "Actual and Expected Total Plastic cost Values are not matched.Please Verirify");
				log.info("Total Plastic Cost value is "+TotalPlasticCostValue);
				//Total Plastic Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPurchasedCostIdentification));
				TotalPurchasedCostValue=driver.findElement(TotalPurchasedCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPurchasedCostValue, data[233], "Actual and Expected Total Purchased cost Values are not matched.Please Verirify");
				log.info("Total Purchased Cost value is "+TotalPurchasedCostValue);
				//Total Purchased Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalSoftGoodsCostCostIdentification));
				TotalSoftGoodsCostValue=driver.findElement(TotalSoftGoodsCostCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalSoftGoodsCostValue, data[235], "Actual and Expected Total soft good cost Values are not matched.Please Verirify");
				log.info("Total Soft Good Cost value is "+TotalSoftGoodsCostValue);
				//Total Purchased Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalChemicalCostCostIdentification));
				TotalChemicalCostValue=driver.findElement(TotalChemicalCostCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalChemicalCostValue, data[232], "Actual and Expected Total Chemical cost Values are not matched.Please Verirify");
				log.info("Total Chemical Cost value is "+TotalChemicalCostValue);
				//Total Chemical Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalGeneralOrDecoCostIdentification));
				TotalGeneralOrDecoCostValue=driver.findElement(TotalGeneralOrDecoCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalGeneralOrDecoCostValue, data[236], "Actual and Expected Total GeneralOrDeco cost Values are not matched.Please Verirify");
				log.info("Total general Deco Cost value is "+TotalGeneralOrDecoCostValue);
				//Total General/Deco Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMoldingLaborCostIdentification));
				TotalMoldingLaborCostValue=driver.findElement(TotalMoldingLaborCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalMoldingLaborCostValue, data[237], "Actual and Expected Total MoldingLabor cost Values are not matched.Please Verirify");
				log.info("Total Molding Labor Cost value is "+TotalMoldingLaborCostValue);
				//Total Molding Labor Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalElectronicCostIdentification));
				TotalElectronicCostValue=driver.findElement(TotalElectronicCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalElectronicCostValue, data[234], "Actual and Expected Total Electronic cost Values are not matched.Please Verirify");
				log.info("Total Electronic Cost value is "+TotalElectronicCostValue);
				//Total Electronic Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPackagingCostIdentification));
				TotalPackagingCostValue=driver.findElement(TotalPackagingCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(TotalPackagingCostValue, data[230], "Actual and Expected Total Packaging cost Values are not matched.Please Verirify");
				log.info("Total Packaging Cost value is "+TotalPackagingCostValue);
				//Total Packaging Cost Value
				wait.until(ExpectedConditions.visibilityOfElementLocated(ContentMarkupCostIdentification));
				ContentMarkupCostValue=driver.findElement(ContentMarkupCostIdentification).getText();
				CommonFunctions.AssertEqualsVerification(ContentMarkupCostValue, data[238], "Actual and Expected Total ContentAndOverHeadMarkup cost Values are not matched.Please Verirify");
				log.info("Total Content And Overhead markUp value is "+ContentMarkupCostValue);
				//Total Content and MarkUp Cost Value
				
				
			
			}
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToRetailItem"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean getCostValues(){
		try{
			CommonFunctions.waitForElementTobeClickable(TotalPlasticCostIdentification);
			TotalPlasticCostValue=driver.findElement(TotalPlasticCostIdentification).getText();
			log.info("Total Plastic Cost value is "+TotalPlasticCostValue);
			//Total Plastic Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPurchasedCostIdentification));
			TotalPurchasedCostValue=driver.findElement(TotalPurchasedCostIdentification).getText();
			log.info("Total Purchased Cost value is "+TotalPurchasedCostValue);
			//Total Purchased Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalSoftGoodsCostCostIdentification));
			TotalSoftGoodsCostValue=driver.findElement(TotalSoftGoodsCostCostIdentification).getText();
			log.info("Total Soft Good Cost value is "+TotalSoftGoodsCostValue);
			//Total Purchased Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalChemicalCostCostIdentification));
			TotalChemicalCostValue=driver.findElement(TotalChemicalCostCostIdentification).getText();
			log.info("Total Chemical Cost value is "+TotalChemicalCostValue);
			//Total Chemical Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalGeneralOrDecoCostIdentification));
			TotalGeneralOrDecoCostValue=driver.findElement(TotalGeneralOrDecoCostIdentification).getText();
			log.info("Total general Deco Cost value is "+TotalGeneralOrDecoCostValue);
			//Total General/Deco Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMoldingLaborCostIdentification));
			TotalMoldingLaborCostValue=driver.findElement(TotalMoldingLaborCostIdentification).getText();
			log.info("Total Molding Labor Cost value is "+TotalMoldingLaborCostValue);
			//Total Molding Labor Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalElectronicCostIdentification));
			TotalElectronicCostValue=driver.findElement(TotalElectronicCostIdentification).getText();
			log.info("Total Electronic Cost value is "+TotalElectronicCostValue);
			//Total Electronic Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPackagingCostIdentification));
			TotalPackagingCostValue=driver.findElement(TotalPackagingCostIdentification).getText();
			log.info("Total Packaging Cost value is "+TotalPackagingCostValue);
			//Total Packaging Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalContentAndOverHeadMarkupCostIdentification));
			TotalContentAndOverHeadMarkupCostValue=driver.findElement(TotalContentAndOverHeadMarkupCostIdentification).getText();
			log.info("Total Content And Overhead markUp value is "+TotalContentAndOverHeadMarkupCostValue);
			//Total Content and MarkUp Cost Value
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in getCostValues"+e);
			throw e;
		}
		return true;
		}
	public static boolean getCostValuesRetailItem(){
		try{
			CommonFunctions.waitForElementTobeClickable(TotalPlasticCostIdentification);
			TotalPlasticCostValue=driver.findElement(TotalPlasticCostIdentification).getText();
			log.info("Total Plastic Cost value is "+TotalPlasticCostValue);
			//Total Plastic Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPurchasedCostIdentification));
			TotalPurchasedCostValue=driver.findElement(TotalPurchasedCostIdentification).getText();
			log.info("Total Purchased Cost value is "+TotalPurchasedCostValue);
			//Total Purchased Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalSoftGoodsCostCostIdentification));
			TotalSoftGoodsCostValue=driver.findElement(TotalSoftGoodsCostCostIdentification).getText();
			log.info("Total Soft Good Cost value is "+TotalSoftGoodsCostValue);
			//Total Purchased Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalChemicalCostCostIdentification));
			TotalChemicalCostValue=driver.findElement(TotalChemicalCostCostIdentification).getText();
			log.info("Total Chemical Cost value is "+TotalChemicalCostValue);
			//Total Chemical Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalGeneralOrDecoCostIdentification));
			TotalGeneralOrDecoCostValue=driver.findElement(TotalGeneralOrDecoCostIdentification).getText();
			log.info("Total general Deco Cost value is "+TotalGeneralOrDecoCostValue);
			//Total General/Deco Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalMoldingLaborCostIdentification));
			TotalMoldingLaborCostValue=driver.findElement(TotalMoldingLaborCostIdentification).getText();
			log.info("Total Molding Labor Cost value is "+TotalMoldingLaborCostValue);
			//Total Molding Labor Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalElectronicCostIdentification));
			TotalElectronicCostValue=driver.findElement(TotalElectronicCostIdentification).getText();
			log.info("Total Electronic Cost value is "+TotalElectronicCostValue);
			//Total Electronic Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(TotalPackagingCostIdentification));
			TotalPackagingCostValue=driver.findElement(TotalPackagingCostIdentification).getText();
			log.info("Total Packaging Cost value is "+TotalPackagingCostValue);
			//Total Packaging Cost Value
			wait.until(ExpectedConditions.visibilityOfElementLocated(ContentMarkupCostIdentification));
			ContentMarkupCostValue=driver.findElement(ContentMarkupCostIdentification).getText();
			log.info("Content MarkUp value is "+ContentMarkupCostValue);
			//Total Content and MarkUp Cost Value
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in getCostValues"+e);
			throw e;
		}
		return true;
		}
   public static boolean getContentableValues(){
		try{
			CommonFunctions.waitForElementTobeClickable(ContentTableProductColorWay);
			ContentTableProductColorWayValue=driver.findElement(ContentTableProductColorWay).getText();
			log.info("Content Table Product Colorway Value is "+ContentTableProductColorWayValue);
			//Content Table Product ColorWay Value
			ContentTableProductNameValue=driver.findElement(ContentTableProductName).getText();
			log.info("Content Table Product Name Value is "+ContentTableProductNameValue);
			//Content Table Product Name Value 
			ContentTableWaveValue=driver.findElement(ContentTableWave).getText();
			log.info("Content Table Wave Value is "+ContentTableWaveValue);
			//Content Table Wave Name Value 
			ContentTableProductTypeValue=driver.findElement(ContentTableProductType).getText();
			log.info("Content Table Wave Value is "+ContentTableProductTypeValue);
			//Content Table Product Type Value 
			ContentTableUnitRatioValue=driver.findElement(ContentTableUnitRatio).getText();
			log.info("Content Table Unit Ratio Value is "+ContentTableUnitRatioValue);
			//Content Table Unit Ratio Value 
			ContentTableProductSourceValue=driver.findElement(ContentTableProductSource).getText();
			log.info("Content Table Product Source Value is "+ContentTableProductSourceValue);
			//Content Table Product Source Value
			ContentTableCostSheetNameValue=driver.findElement(ContentTableCostSheetName).getText();
			log.info("Content Table Cost Sheet Name Value is "+ContentTableCostSheetNameValue);
			//Content Table Cost Sheet Name Value
			ContentTableCostSheetStatusValue=driver.findElement(ContentTableCostSheetStatus).getText();
			log.info("Content Table Cost Sheet Status Value is "+ContentTableCostSheetStatusValue);
			//Content Table Cost Sheet Status Value
			ContentTableLastModifiedByValue=driver.findElement(ContentTableLastModifiedBy).getText();
			log.info("Content Table Last Modified  Value is "+ContentTableLastModifiedByValue);
			//Content Table Cost Sheet Last Modified By
			ContentTableLastModifiedDateValue=driver.findElement(ContentTableLastModifiedDate).getText();
			log.info("Content Table Last Modified date Value is "+ContentTableLastModifiedDateValue);
			//Content Table Cost Sheet Last Modified Date
			VendorCostTableProductColorWayValue=driver.findElement(VendorCostTableProductColorWay).getText();
			log.info("Content Table Vendor Cost Sheet Product Colorway Value is "+VendorCostTableProductColorWayValue);
			//Content Table Vendor Cost Sheet Last Product Color Way
			VendorTaleCostSheetNameValue=driver.findElement(VendorTaleCostSheetName).getText();
			log.info("Content Table Vendor Cost Sheet Name is "+VendorTaleCostSheetNameValue);
			//Content Table Vendor Cost Sheet Name Value
			VendorTableProductOriginalQuoteCurrencyValue=driver.findElement(VendorTableProductOriginalQuoteCurrency).getText();
			log.info("Content Vendor Table Vendor Product Original Quote Currency is "+VendorTableProductOriginalQuoteCurrencyValue);
			//Content Table Vendor Product Original Quote Currency
			VendorTableProductCostTotalValue=driver.findElement(VendorTableProductCostTotal).getText();
			log.info("Content Vendor Table Product Cost Total is "+VendorTableProductCostTotalValue);
			//Content Table Vendor Product Cost Total
			VendorTableProductCostTotalUSDValue=driver.findElement(VendorTableProductCostTotalUSD).getText();
			log.info("Content Vendor Table Product Cost Total USD Value is "+VendorTableProductCostTotalUSDValue);
			//Content Table Vendor Product Cost Total USD Value
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception while getContentableValue"+e);
			throw e;
		}
		return true;
   }
	
	public static boolean TC_20_UpdatePrimaryFlagForInternalRetailItemCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SelectCostSheet1VendorUser(data);
			//Selecting the First cost Sheet
			UpdationOfCostSheet(data);
			//Select Cost Sheet As Primary for Cost Sheet A
			AssertionVerificationOnSuccessfulVerification(data);
			//Successful Updation
			SelectCostSheet2(data);
			//Selecting the Second cost Sheet
			UpdationOfCostSheet(data);
			//Updating the Second Cost Sheet As Primary
			AssertionVerificationOfErrorForCostSheetA(data);
			//Assertion Verification of Error Cost Sheet A
			CancelCostSheet(data);
			//cancel Cost Sheet
			SelectCostSheet1VendorUser(data);
			//select the Cost Sheet
			UpdationOfCostSheet(data);
			//Un checking primary Cost Sheet Check Box of Cost Sheet A
			AssertionVerificationOnSuccessfulVerification(data);
			//Successful Updation
			SelectCostSheet2(data);
			//Selecting the Second cost Sheet
			UpdationOfCostSheet(data);
			//Updating the Second Cost Sheet As Primary
			AssertionVerificationOnSuccessfulVerification(data);
			//Successful Updation
		    SelectCostSheet2(data);
			//Selecting the Second cost Sheet
			UpdationOfCostSheet(data);
			//Updating the Second Cost Sheet As Primary
			AssertionVerificationOnSuccessfulVerification(data);
			//Sucessful updation of Cost SHeet B
			SelectCostSheet3(data);
			//Select Cost Sheet 3
			UpdationOfCostSheet(data);
			//Updating the Second Cost Sheet As Primary
			AssertionVerificationOnSuccessfulVerification(data);
			//Successful Updation
			SelectCostSheet3(data);
			//Select Cost Sheet 3
			UpdationOfCostSheet(data);
			//Updating the Second Cost Sheet As Primary
			AssertionVerificationOnSuccessfulVerification(data);
			//Successful Updation
			SelectCostSheet4(data);
			//Select Cost Sheet 4
			UpdationOfCostSheet(data);
			//Updating the Second Cost Sheet As Primary
			AssertionVerificationOnSuccessfulVerification(data);
			//Successful Updation
			SelectCostSheet4(data);
			//Select Cost Sheet 4
			UpdationOfCostSheet(data);
			//Updating the Second Cost Sheet As Primary
			AssertionVerificationOnSuccessfulVerification(data);
			//Successful Updation
			AssertionVerificationOfWhatIFCostSheetAndRun(data);
			//Assertion Verification of What If Cost Cost Sheet Appearance
			UpdationOfCostSheet(data);
			//Updating the Second Cost Sheet As Primary
			AssertionVerificationOfError(data);
			//Successful Updation
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC37 - Update Primary Flag for Internal Retail Item Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC37 - Update Primary Flag for Internal Retail Item Cost Sheet  TEST CASE FAILED.PLEASE CHECK");
			 }
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_20"
					+ "_UpdatePrimaryFlagForInternalRetailItemCostSheet"+e);
			throw e;
		}
	return true;
	}
	
	public static boolean AssertionVerificationOfWhatIFCostSheetAndRun(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(WhatIfCostSheetCheckBox));
			CommonFunctions.clickButtonOrLink(WhatIfCostSheetCheckBox, "What If Cost Sheet Check Box");
			//Clicking What If cost SHeet Check Box
			CommonFunctions.waitForElementTobeClickable(RunButton);
			CommonFunctions.clickButtonOrLink(RunButton, "Run Button");
			//Clicking on Run button
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
			CloseOpenedExistingCostSheet();
			JavascriptExecutor jse = (JavascriptExecutor)driver;
		    jse.executeScript("window.scrollBy(0,100)", "");
			for(int i=10;i<=66;i++)
			{
			CostSheetName1="//a[contains(text(),'Sourcing Configuration')]//following::a["+i+"]";
			CostSheetIdentification1_Internal=By.xpath(CostSheetName1);
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification1_Internal));
			GettingText(CostSheetIdentification1_Internal);
			if((!ActualValue.equals(data[300]))&&(!ActualValue.equals(data[301]))&&(!ActualValue.equals(data[302]))&&(!ActualValue.equals(data[303])))
		    {
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CostSheetIdentification1_Internal, "What If Cost Sheet"), "Expected Element is Not Displayed.ASsertion failed.Please Check");
			GettingText(CostSheetIdentification1_Internal);
			log.info("What If Cost Sheet is "+ActualValue);
			CommonFunctions.clickButtonOrLink(CostSheetIdentification1_Internal, "What If Cost");
			break;
		   }
			i=i+13;
			}
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in CheckWhatIFCostSheetAndRun"+e);
			throw e;
		}
		return true;
	}
	public static boolean CancelCostSheet(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(UpdateCostSheetCancelButton));
			CommonFunctions.clickButtonOrLink(UpdateCostSheetCancelButton, "Cancel", "Cancel Button");
			//Clicking Cancel Button
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
			CloseOpenedExistingCostSheet();
		}
		catch(Exception e){
			fail=true;
			log.error("Exceptin in CancelCostSheet"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerificationOnSuccessfulVerification(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetUpdateButton));
			CommonFunctions.clickButtonOrLink(CostSheetUpdateButton, "Cost Sheet Update Drop Down");
			log.info(CostSheetName1+" Successfully updated as Primary");
			CloseOpenedExistingCostSheet();
			getPageTitle();
			CommonFunctions.AssertEqualsVerification(pageTitle, data[144], "Actual And Expected Page name are not matched.Assertion failed.Please Verify");
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in SuccessfulCostSheetUPdation");
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerificationOfError(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(ErrorMessageForPrimaryCostSheetUpdation));
			GettingText(ErrorMessageForPrimaryCostSheetUpdation);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(),data[305].trim(), "Actual and Expected Error Messages are Not Matched.Assertion Failed.Please Verify");
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in SuccessfulCostSheetUPdation");
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerificationOfErrorForCostSheetA(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(ErrorMessageForPrimaryCostSheetUpdation));
			GettingText(ErrorMessageForPrimaryCostSheetUpdation);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(),data[304].trim(), "Actual and Expected Error Messages are Not Matched.Assertion Failed.Please Verify");
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOfErrorForCostSheetA");
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerificationOfErrorForCostSheetB(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(ErrorMessageForPrimaryCostSheetUpdation));
			GettingText(ErrorMessageForPrimaryCostSheetUpdation);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(),data[305], "Actual and Expected Error Messages are Not Matched.Assertion Failed.Please Verify");
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOfErrorForCostSheetB");
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerificationOfErrorForCostSheetC(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(ErrorMessageForPrimaryCostSheetUpdation));
			GettingText(ErrorMessageForPrimaryCostSheetUpdation);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(),data[306], "Actual and Expected Error Messages are Not Matched.Assertion Failed.Please Verify");
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOfErrorForCostSheetC");
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerificationOfErrorForCostSheetD(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(ErrorMessageForPrimaryCostSheetUpdation));
			GettingText(ErrorMessageForPrimaryCostSheetUpdation);
			CommonFunctions.AssertEqualsVerification(ActualValue.trim(),data[307], "Actual and Expected Error Messages are Not Matched.Assertion Failed.Please Verify");
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOfErrorForCostSheetC");
			throw e;
		}
		return true;
	}
	
	public static boolean UpdationOfCostSheet(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetUpdateButton));
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, data[179],"Cost Sheet Update Drop down");
			wait.until(ExpectedConditions.titleIs(data[180]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(ChoosedColorwayOption);
			GettingText(ChoosedColorwayOption);
			if(ActualValue.equals(data[160])){
			CommonFunctions.waitForElementTobeClickable(PrimaryCostSheetCheckBox);
		    CommonFunctions.clickButtonOrLink(PrimaryCostSheetCheckBox, "Check Box", "Primary Cost Sheet Check Box");
			//Clicking on Primary Cost Sheet Check Box
			CommonFunctions.waitForElementTobeClickable(UpdateCostSheetSaveButton);
			CommonFunctions.clickButtonOrLink(UpdateCostSheetSaveButton, "UpdateCostSheetSaveButton", "UpdateCostSheetSaveButton");
			//Clicking on Save Button
			
		}
			else{
				log.warn("The Specified Colorway needs to be selected for all the Validations.else Validations would be Failed");
			}
		}
		
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectCostSheet2"+e);
			throw e;
		}
		return true;
	}
		
		
		public static boolean UpdationOfCostSheet_TC_24(String [] data) throws Exception{
			try{
				wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetUpdateButton));
				CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, data[179],"Cost Sheet Update Drop down");
				wait.until(ExpectedConditions.titleIs(data[335]));
				CommonFunctions.waitForPageLoaded();
		        CommonFunctions.waitForElementTobeClickable(PrimaryCostSheetCheckBox);
			    CommonFunctions.clickButtonOrLink(PrimaryCostSheetCheckBox, "Check Box", "Primary Cost Sheet Check Box");
				//Clicking on Primary Cost Sheet Check Box
				CommonFunctions.waitForElementTobeClickable(UpdateCostSheetSaveButton);
				CommonFunctions.clickButtonOrLink(UpdateCostSheetSaveButton, "UpdateCostSheetSaveButton", "UpdateCostSheetSaveButton");
				//Clicking on Save Button
				wait.until(ExpectedConditions.titleIs(data[144]));
				CommonFunctions.waitForPageLoaded();
			
			}
	
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdationOfCostSheet_TC_24"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean SelectCostSheet1VendorUser(String [] data) throws Exception{
		try{
			for(int i=10;i<=1200;i++)
			{
			
			JavascriptExecutor jse = (JavascriptExecutor)driver;
		    jse.executeScript("window.scrollBy(0,100)", "");
			CostSheetName1="//a[contains(text(),'Sourcing Configuration')]//following::a["+i+"]";
			CostSheetIdentification1_Internal=By.xpath(CostSheetName1);
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification1_Internal));
			GettingText(CostSheetIdentification1_Internal);
			System.out.println(ActualValue);
			if(ActualValue.equals(data[300]))
			{
			CommonFunctions.clickButtonOrLink(CostSheetIdentification1_Internal, "First Cost Sheet");
			CommonFunctions.waitForPageLoaded();
			break;
		   }
			i=i+13;
			}
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectCostSheet1"+e);
			throw e;
		}
		return true;
	}
	public static boolean SelectCostSheet1(String [] data) throws Exception{
		try{
			for(int i=10;i<=1200;i++)
			{
			
			JavascriptExecutor jse = (JavascriptExecutor)driver;
		    jse.executeScript("window.scrollBy(0,100)", "");
		
		  
		    CostSheetName1="//a[contains(text(),'Sourcing Configuration')]//following::a["+i+"]";
			CostSheetIdentification1_Internal=By.xpath(CostSheetName1);
		    
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification1_Internal));
			GettingText(CostSheetIdentification1_Internal);
			System.out.println(ActualValue);
			if(ActualValue.equals(data[301]))
			{
			CommonFunctions.clickButtonOrLink(CostSheetIdentification1_Internal, "First Cost Sheet");
			CommonFunctions.waitForPageLoaded();
			break;
		   }
			i=i+13;
			}
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectCostSheet1"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean SelectCostSheet1_adminuser(String [] data) throws Exception{
		try{
			for(int i=11;i<=1200;i++)
			{
			
			JavascriptExecutor jse = (JavascriptExecutor)driver;
		    jse.executeScript("window.scrollBy(0,100)", "");
		
		  
		    CostSheetName1="//a[contains(text(),'Sourcing Configuration')]//following::a["+i+"]";
			CostSheetIdentification1_Internal=By.xpath(CostSheetName1);
		    
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification1_Internal));
			GettingText(CostSheetIdentification1_Internal);
			System.out.println(ActualValue);
			if(ActualValue.equals(data[301]))
			{
			CommonFunctions.clickButtonOrLink(CostSheetIdentification1_Internal, "First Cost Sheet");
			CommonFunctions.waitForPageLoaded();
			break;
		   }
			i=i+13;
			}
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectCostSheet1"+e);
			throw e;
		}
		return true;
	}
		public static boolean SelectCostSheet1CostingUser(String [] data) throws Exception{
			try{
				for(int i=10;i<=1200;i++)
				{
				JavascriptExecutor jse = (JavascriptExecutor)driver;
			    jse.executeScript("window.scrollBy(0,100)", "");
				CostSheetName1="//a[contains(text(),'Sourcing Configuration')]//following::a["+i+"]";
				CostSheetIdentification1_Internal=By.xpath(CostSheetName1);
				wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification1_Internal));
				GettingText(CostSheetIdentification1_Internal);
				if(ActualValue.equals(data[300]))
				{
				CommonFunctions.clickButtonOrLink(CostSheetIdentification1_Internal, "First Cost Sheet");
				CommonFunctions.waitForPageLoaded();
				break;
			   }
				i=i+13;
			}
			}
	
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectCostSheet1"+e);
			throw e;
		}
		return true;
	}
	public static boolean SelectRetailItemCostSheetCostingUser(String [] data) throws Exception{
		try{
			for(int i=10;i<=1200;i++)
			{
			JavascriptExecutor jse = (JavascriptExecutor)driver;
		    jse.executeScript("window.scrollBy(0,100)", "");
			CostSheetName1="//a[contains(text(),'Sourcing Configuration')]//following::a["+i+"]";
			CostSheetIdentification1_Internal=By.xpath(CostSheetName1);
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification1_Internal));
			GettingText(CostSheetIdentification1_Internal);
			if(ActualValue.equals(data[301]))
			{
			CommonFunctions.clickButtonOrLink(CostSheetIdentification1_Internal, "First Cost Sheet");
			CommonFunctions.waitForPageLoaded();
			break;
		   }
			i=i+13;
		}
		}

		catch(Exception e){
			fail=true;
			log.error("Exception in SelectCostSheet1"+e);
			throw e;
		}
		return true;
	}
	
		public static boolean SelectRetailItemCostSheetVendorUser(String [] data) throws Exception{
			try{
				for(int i=9;i<=1200;i++)
				{
				JavascriptExecutor jse = (JavascriptExecutor)driver;
			    jse.executeScript("window.scrollBy(0,100)", "");
				CostSheetName1="//a[contains(text(),'Sourcing Configuration')]//following::a["+i+"]";
				CostSheetIdentification1_Internal=By.xpath(CostSheetName1);
				wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification1_Internal));
				GettingText(CostSheetIdentification1_Internal);
				if(ActualValue.equals(data[301]))
				{
				CommonFunctions.clickButtonOrLink(CostSheetIdentification1_Internal, "First Cost Sheet");
				CommonFunctions.waitForPageLoaded();
				break;
			   }
				i=i+13;
			}
			}
	
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectCostSheet1"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean SelectCostSheet2(String [] data) throws Exception{
		try{
		       for(int i=10;i<=52;i++)
				{
		    	   JavascriptExecutor jse = (JavascriptExecutor)driver;
				    jse.executeScript("window.scrollBy(0,100)", "");
				CostSheetName1="//a[contains(text(),'Sourcing Configuration')]//following::a["+i+"]";
				CostSheetIdentification1_Internal=By.xpath(CostSheetName1);
				wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification1_Internal));
				GettingText(CostSheetIdentification1_Internal);
				if(ActualValue.equals(data[301]))
				{
				CommonFunctions.clickButtonOrLink(CostSheetIdentification1_Internal, "First Cost Sheet");
				CommonFunctions.waitForPageLoaded();
				break;
			   }
				i=i+13;
			}
			}
			
	 catch(Exception e){
				fail=true;
				log.error("Exception in SelectCostSheet2"+e);
				throw e;
			}
			return true;
		
		
}
	public static boolean SelectCostSheet4(String [] data) throws Exception{
		try{
			for(int i=10;i<=52;i++)
			{
			JavascriptExecutor jse = (JavascriptExecutor)driver;
			jse.executeScript("window.scrollBy(0,100)", "");
			CostSheetName1="//a[contains(text(),'Sourcing Configuration')]//following::a["+i+"]";
			CostSheetIdentification1_Internal=By.xpath(CostSheetName1);
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification1_Internal));
			GettingText(CostSheetIdentification1_Internal);
			if(ActualValue.equals(data[303]))
			{
			CommonFunctions.clickButtonOrLink(CostSheetIdentification1_Internal, "First Cost Sheet");
			CommonFunctions.waitForPageLoaded();
			break;
		   }
			i=i+13;
		}
		}
	
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectCostSheet1"+e);
			throw e;
		}
		return true;
	}
	public static boolean SelectCostSheet3(String [] data) throws Exception{
		try{
			for(int i=10;i<=52;i++)
			{
				JavascriptExecutor jse = (JavascriptExecutor)driver;
			    jse.executeScript("window.scrollBy(0,100)", "");
			CostSheetName1="//a[contains(text(),'Sourcing Configuration')]//following::a["+i+"]";
			CostSheetIdentification1_Internal=By.xpath(CostSheetName1);
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification1_Internal));
			GettingText(CostSheetIdentification1_Internal);
			if(ActualValue.equals(data[302]))
			{
			CommonFunctions.clickButtonOrLink(CostSheetIdentification1_Internal, "First Cost Sheet");
			CommonFunctions.waitForPageLoaded();
			break;
		   }
			i=i+13;
		}
		}
	
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectCostSheet3"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean TC_19_CreateInternalProductCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet 
			AssertionVerficationOTypeOfInternalCostSheetforAssortmentType(data);
			//Assertion Verification Of Cost Sheet Type
			CreateInternalCostSheetForAssortmentProduct(data);
			//Creating a CostSheet For Assortment or Solid
			FillColorwayAndDetailsInContentTable(data);
			//Fill Color way and Details On Contents table
			AssertionVerficationOfCostSheetApperance(data);
			//AssertionVerficationOfCostSheetApperance
			AssertionVerificationOfCostSheetElementsInInternalProductCostSheet(data);
			//AssertionVerficationOfCostSheetElements
			UpdateCurrenCyConversionRate(data);
			//Update The Currency Conversion Rate
			AssertionVerficationAfterUpdationForInternalCostSheet(data);
			//AssertionVerficationOfInternal CostSheetElements USD
			launchApp(data[220],data[221]);
			//launching the URL
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet 
			delete_CreatedCostSheet(data);
			//Delete The Created Cost Sheet
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC35 - Create Internal Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC35 - Create Internal Product Cost Sheet  TEST CASE FAILED.PLEASE CHECK");
			 }
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_19_CreateInternalProductCostSheet"+e);
			throw e;
		}
	return true;
	}
	public static boolean AssertionVerificationOfCostSheetElementsInInternalProductCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(TypeOfProduct);
			GettingText(TypeOfProduct);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[11], "Actual And Expected Cost Sheet Product Type Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of product Type
			CommonFunctions.waitForElementTobeClickable(CountryOfOriginValue);
			GettingText(CountryOfOriginValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[208], "Actual And Expected Cost Sheet CountryOfOriginValuee Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of Country Of Origin Value
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
			GettingText(CurrencyConversionRate);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[175], "Actual And Expected Cost Sheet CurrencyConversionRate Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of CurrencyConversionRate
			CommonFunctions.waitForElementTobeClickable(CostSheetSequenceNumberValue);
			GettingText(CostSheetSequenceNumberValue);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CostSheetSequenceNumberValue, "CostSheetSequenceNumberValue"), "CostSheetSequenceNumberValue is not found.Assertion failed.Please Check");
			log.info("CostSheetSequenceNumberValue is generated and is "+ActualValue);
			//Verifying the Appearance Of Cost Sheet Sequence Number
			CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterialUSDValue);
			GettingText(MasterCartonPackagingMaterialUSDValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[194], "Actual And Expected Cost Sheet MasterCartonPackagingMaterialUSDValue Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of MasterCartonPackagingMaterialUSDValue
			CommonFunctions.waitForElementTobeClickable(MasterCartonLaborCostUSD);
			GettingText(MasterCartonLaborCostUSD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[195], "Actual And Expected Cost Sheet MasterCartonLaborCostUSD Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  MasterCartonLaborCostUSDr
			CommonFunctions.waitForElementTobeClickable(MiscelleneousMaterialValue);
			GettingText(MiscelleneousMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[196], "Actual And Expected Cost Sheet MiscelleneousMaterialValueAre Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  MasterCartonLaborCostUSDr
			CommonFunctions.waitForElementTobeClickable(ProductMarkUpValue);
			GettingText(ProductMarkUpValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[197], "Actual And Expected Cost Sheet ProductMarkUpValue Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  ProductMarkUpValue
			CommonFunctions.waitForElementTobeClickable(ExFactoryCostUSDInCostingUser);
			GettingText(ExFactoryCostUSDInCostingUser);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[219], "Actual And Expected Cost Sheet VendorCostQuoteCurrencyxFacotoryCost Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  VendorCostQuoteCurrencyxFacotoryCost
			CommonFunctions.waitForElementTobeClickable(WhatIfTotalCost);
			GettingText(WhatIfTotalCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[294], "Actual And Expected Total Cost Are not Matched.Assertion failed.Please Verify");
			//Assertion verification of Target Cost
			CommonFunctions.waitForElementTobeClickable(TotalMarkUp);
			GettingText(TotalMarkUp);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[293], "Actual And Expected Total Mark Up Are not Matched.Assertion failed.Please Verify");
			//Assertion Verification Of Total Mark Up values
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOfCostSheetElements"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationOfCostSheetApperance(String [] data) throws Exception{
		try{
			for(int i=1;i<8;i++){
			costSheetValueInContentTable="//a[contains(text(),'Last Modified Date')]//following::a["+i+"]";
			CostSheetValueInContentTable=By.xpath(costSheetValueInContentTable);
			CommonFunctions.waitForElementTobeClickable(CostSheetValueInContentTable);
			GettingText(CostSheetValueInContentTable);
			log.info("Prduct Colorway is: "+ActualValue);
			if(i==1)
			{
				for(int a=7;a<11;a++){
		         costSheetDetails="//a[contains(text(),'Last Modified Date')]//following::td["+a+"]";
		         CostSheetDetails = By.xpath(costSheetDetails);
				 CommonFunctions.waitForElementTobeClickable(CostSheetDetails);
				 String actualValue=driver.findElement(By.xpath(costSheetDetails)).getText();
				 
				if(a==7){
						log.info("Cost Sheet Name is: "+actualValue);
						CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
					}
				if(a==8){
					log.info("Cost Sheet Status is: "+actualValue);
					CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
				}
				if(a==9){
					log.info("Cost Sheet Last Modified By is: "+actualValue);
					CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
				}
				if(a==10){
					log.info("Cost Sheet Last Modified Date is: "+actualValue);
					CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
				}
				}
			}
			if(i==2)
			{
				for(int a=17;a<21;a++){
		         costSheetDetails="//a[contains(text(),'Last Modified Date')]//following::td["+a+"]";
		         CostSheetDetails = By.xpath(costSheetDetails);
				 CommonFunctions.waitForElementTobeClickable(CostSheetDetails);
				 String actualValue=driver.findElement(By.xpath(costSheetDetails)).getText();
				 
				if(a==17){
						log.info("Cost Sheet Name is: "+actualValue);
						CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
					}
				if(a==18){
					log.info("Cost Sheet Status is: "+actualValue);
					CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
				}
				if(a==19){
					log.info("Cost Sheet Last Modified By is: "+actualValue);
					CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
				}
				if(a==20){
					log.info("Cost Sheet Last Modified Date is: "+actualValue);
					CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
				}
				}
			}
			if(i==3)
			{
				for(int a=27;a<31;a++){
		         costSheetDetails="//a[contains(text(),'Last Modified Date')]//following::td["+a+"]";
		         CostSheetDetails = By.xpath(costSheetDetails);
				 CommonFunctions.waitForElementTobeClickable(CostSheetDetails);
				 String actualValue=driver.findElement(By.xpath(costSheetDetails)).getText();
				 
				if(a==27){
						log.info("Cost Sheet Name is: "+actualValue);
						CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
					}
				if(a==28){
					log.info("Cost Sheet Status is: "+actualValue);
					CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
				}
				if(a==29){
					log.info("Cost Sheet Last Modified By is: "+actualValue);
					CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
				}
				if(a==30){
					log.info("Cost Sheet Last Modified Date is: "+actualValue);
					CommonFunctions.AssertEqualsVerification(actualValue, data[291], "Actual And expected Values are not matched.Assertion failed.Please verify");
				}
				}
			}
			
			if(i==4)
			{
				for(int a=37;a<41;a++){
		         costSheetDetails="//a[contains(text(),'Last Modified Date')]//following::td["+a+"]";
		         CostSheetDetails = By.xpath(costSheetDetails);
				 CommonFunctions.waitForElementTobeClickable(CostSheetDetails);
				 String actualValue=driver.findElement(By.xpath(costSheetDetails)).getText();
				 
				if(a==37){
						CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
						log.info("Cost Sheet Name is: "+actualValue);
					}
				if(a==38){
					CommonFunctions.AssertEqualsVerification(actualValue, data[287], "Actual And expected Values are not matched.Assertion failed.Please verify");
					log.info("Cost Sheet Status is: "+actualValue);
				}
				if(a==39){
					CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
					log.info("Cost Sheet Last Modified By is: "+actualValue);
				}
				if(a==40){
				CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
				log.info("Cost Sheet Last Modified Date is: "+actualValue);
				}
				}
			}
			
			if(i==5)
			{
				for(int a=47;a<51;a++){
		         costSheetDetails="//a[contains(text(),'Last Modified Date')]//following::td["+a+"]";
		         CostSheetDetails = By.xpath(costSheetDetails);
				 CommonFunctions.waitForElementTobeClickable(CostSheetDetails);
				 String actualValue=driver.findElement(By.xpath(costSheetDetails)).getText();
				 
				if(a==47){
						CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
						log.info("Cost Sheet Name is: "+actualValue);
					}
				if(a==48){
					CommonFunctions.AssertEqualsVerification(actualValue, data[288], "Actual And expected Values are not matched.Assertion failed.Please verify");
					log.info("Cost Sheet Status is: "+actualValue);
				}
				if(a==49){
				CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
				log.info("Cost Sheet Last Modified By is: "+actualValue);
				}
				if(a==50){
					CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
					log.info("Cost Sheet Last Modified Date is: "+actualValue);
				}
				}
			}
			if(i==6)
			{
				for(int a=57;a<61;a++){
		         costSheetDetails="//a[contains(text(),'Last Modified Date')]//following::td["+a+"]";
		         CostSheetDetails = By.xpath(costSheetDetails);
				 CommonFunctions.waitForElementTobeClickable(CostSheetDetails);
				 String actualValue=driver.findElement(By.xpath(costSheetDetails)).getText();
				 
				if(a==57){
						CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
						log.info("Cost Sheet Name is: "+actualValue);
					}
				if(a==58){
					CommonFunctions.AssertEqualsVerification(actualValue, data[289], "Actual And expected Values are not matched.Assertion failed.Please verify");
					log.info("Cost Sheet Status is: "+actualValue);
				}
				if(a==59){
					
					CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
					log.info("Cost Sheet Last Modified By is: "+actualValue);
				}
				if(a==60){
					CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
					log.info("Cost Sheet Last Modified Date is: "+actualValue);
				}
				}
			}
			
			if(i==7)
			{
				for(int a=67;a<71;a++){
		         costSheetDetails="//a[contains(text(),'Last Modified Date')]//following::td["+a+"]";
		         CostSheetDetails = By.xpath(costSheetDetails);
				 CommonFunctions.waitForElementTobeClickable(CostSheetDetails);
				 String actualValue=driver.findElement(By.xpath(costSheetDetails)).getText();
				 
				if(a==67){
						CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
						log.info("Cost Sheet Name is: "+actualValue);
					}
				if(a==68){
					CommonFunctions.AssertEqualsVerification(actualValue, data[290], "Actual And expected Values are not matched.Assertion failed.Please verify");
					log.info("Cost Sheet Status is: "+actualValue);
				}
				if(a==69){
					
					CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
					log.info("Cost Sheet Last Modified By is: "+actualValue);
				}
				if(a==70){
					CommonFunctions.AssertNotNullVerification(CostSheetDetails,"Cost Sheet Detail is Null.Assertion Failed.Please Check");
					log.info("Cost Sheet Last Modified Date is: "+actualValue);
				}
				}
			}
		}
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfCostSheetApperance"+e);
			throw e;
			}
		return true;
		}

	
	
	public static boolean UpdateContentTable(String [] data) throws Exception{
		try{
		        wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
	   		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
	   		     //Clicking Done Button
	   		     CommonFunctions.waitForPageLoaded();
	   		     wait.until(ExpectedConditions.titleIs(data[144]));
			    
		}
		catch(Exception e ){
			fail=true;
			log.error("Exception in UpdateContentTable"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean FillColorwayAndDetailsInContentTable(String [] data) throws Exception{
		try{
		        wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    for(int i=0;i<2;i++){
			    if(i==0){
			    CommonFunctions.waitForElementTobeClickable(ProductColorWay);
			    CommonFunctions.clickButtonOrLink(ProductColorWay, "textBox", "Product ColrWayTextBox");
			    //Clicking on Product colorway Text Box
			    CommonFunctions.gettingParentWindow();
			    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
			    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
			    //Clicking productColorWayHyperLink 
			    CommonFunctions.switchingChildWindow();
			    //Switching Child window
			    ColorWayType=By.linkText(data[170]);
			    CommonFunctions.waitForElementTobeClickable(ColorWayType);
			    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
			    //Clicking on Retail Item
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ColorwayNameTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(ColorwayNameTextBox, data[277+i], "ProductNumber");
			    log.info("The Selected colorway is: "+data[277+i]+".And the status of the Cost Sheet is: "+data[284+i]);
			    //Entering a Product Number
			    CommonFunctions.waitForElementTobeClickable(SearchButton);
			    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
			    //Clicking Search Button
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
			    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
			    //Clicking on Choose Button
			    CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			    FillingContentTable(data);
			    }
			    else
			    {
			    	for(int p=2,j=1,k=1;p<8;j++,p++){
			    	wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
				    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
				    //Clicking on contents table Edit Button
				    CommonFunctions.waitForPageLoaded();
				    wait.until(ExpectedConditions.titleIs(data[169]));
			    	addRowsButtonRetailItemColoyWay="//img[@id='menuImage"+j+"']";
			    	AddRowsButtonRetailItemColoyWay = By.xpath(addRowsButtonRetailItemColoyWay);
			    	CommonFunctions.waitForElementTobeClickable(AddRowsButtonRetailItemColoyWay);
			    	CommonFunctions.clickButtonOrLink(AddRowsButtonRetailItemColoyWay, "Image", "Add Row Button");
			    	//Clicking Add Rows Button
			    	wait.until(ExpectedConditions.visibilityOfElementLocated(RetailItemColorWayTable));
				    ColorWayType=By.linkText(data[266]);
				    CommonFunctions.clickButtonOrLink(ColorWayType, "ColorWayTye");
				    //Adding row
				    CommonFunctions.clickButtonOrLink(UnitRatioTable, "table", "UnitRatiotable");
				    productColorWayDynamic="//td[@id='r"+p+"_hbProductColorway']";
				    ProductColorWayDynamic=By.xpath(productColorWayDynamic);
				    productColorWayHyperLinkDynamic="//td[@id='r"+p+"_hbProductColorway']/div/a["+k+"]";
				    ProductColorWayHyperLinkDynamic=By.xpath(productColorWayHyperLinkDynamic);
				    CommonFunctions.gettingParentWindow();
				    CommonFunctions.waitForElementTobeClickable(ProductColorWayDynamic);
				    CommonFunctions.clickButtonOrLink(ProductColorWayDynamic, "table", "ProductColorWay");
				    //Clicking on Product Color way
				    wait.until(ExpectedConditions.visibilityOfElementLocated(ProductColorWayHyperLinkDynamic));
				    CommonFunctions.clickButtonOrLink(ProductColorWayHyperLinkDynamic, "HyperLink", "ProductColorWayHyperLink");
			    	//Clicking on Product Color way HyperLink
				    CommonFunctions.switchingChildWindow();
				    //Switching Child window
				    ColorWayType=By.linkText(data[170]);
				    CommonFunctions.waitForElementTobeClickable(ColorWayType);
				    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
				    //Clicking on Retail Item
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ColorwayNameTextBox);
				    CommonFunctions.enterTextInTextboxUpdated(ColorwayNameTextBox, data[277+j], "ProductNumber");
				    log.info("The Selected colorway is: "+data[277+j]+".And the status of the Cost Sheet is: "+data[284+j]);
				    //Entering a Product Number
				    CommonFunctions.waitForElementTobeClickable(SearchButton);
				    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
				    //Clicking Search Button
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
				    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
				    //Clicking on Choose Button
				    CommonFunctions.switchParentWindow();
				    driver.switchTo().defaultContent();
					driver.switchTo().frame("contentframe");
				    //Switching Frame
					wait.until(ExpectedConditions.titleIs(data[169]));
				    CommonFunctions.waitForPageLoaded();
				    waveDynamic="//td[@id='r"+p+"_hbWaveContentsTable']";
				    WaveDynamic= By.xpath(waveDynamic);
				    waveDropDownDynamic ="//td[@id='r"+p+"_hbWaveContentsTable']/div/select["+k+"]";
				    WaveDropDownDynamic=By.xpath(waveDropDownDynamic);
				    CommonFunctions.waitForElementTobeClickable(WaveDynamic);
				    CommonFunctions.clickButtonOrLink(WaveDynamic, "table", "WaveDropDownDynamic");
				    wait.until(ExpectedConditions.visibilityOfElementLocated(WaveDropDownDynamic));
				    CommonFunctions.selectFromDropDownByVisibleTextUpdated(WaveDropDownDynamic, data[161], "WaveDropDown");
				    //Selecting wave value
				    unitRatioDynamic="//td[@id='r"+p+"_hbUnitRatioContentsTable']";
				    UnitRatioDynamic=By.xpath(unitRatioDynamic);
				    unitRatioTextBoxDynamic="//td[@id='r"+p+"_hbUnitRatioContentsTable']/div/input["+k+"]";
				    UnitRatioTextBoxDynamic=By.xpath(unitRatioTextBoxDynamic);
				    CommonFunctions.waitForElementTobeClickable(UnitRatioDynamic);
				    CommonFunctions.clickButtonOrLink(UnitRatioDynamic, "Table", "UnitRatioTable");
				    //Clicking on UnitRatioDynamic Table
				    wait.until(ExpectedConditions.visibilityOfElementLocated(UnitRatioTextBoxDynamic));
				    CommonFunctions.enterTextInTextboxUpdated(UnitRatioTextBoxDynamic, data[172], "UnitRatioTextBox");
					//Entering a Unit Price value
				    productSourceDynamic="//td[@id='r"+p+"_hbProductSourceCostingMOA']";
				    ProductSourceDynamic=By.xpath(productSourceDynamic);
				    productSourceDropDownDynamic="//td[@id='r"+p+"_hbProductSourceCostingMOA']/div/select["+k+"]";
				    ProductSourceDropDownDynamic=By.xpath(productSourceDropDownDynamic);
				    CommonFunctions.waitForElementTobeClickable(ProductSourceDynamic);
					CommonFunctions.clickButtonOrLink(ProductSourceDynamic, "table", "Product Source");
					CommonFunctions.waitForPageLoaded();
					CommonFunctions.waitForElementTobeClickable(ProductSourceDropDownDynamic);
					CommonFunctions.clickButtonOrLink(ProductSourceDropDownDynamic, "Drop-Down", "ProductSourceDropDown");
					Thread.sleep(2000);
					Select dropdDown = new Select(driver.findElement(By.xpath("//td[@id='r"+p+"_hbProductSourceCostingMOA']/div/select["+k+"]")));
				     List<WebElement> allOptions=dropdDown.getOptions();
		             for(int f=0;i<allOptions.size();f++){
		   		     String RequiredValue=allOptions.get(f).getText();
		   		     //System.out.println(RequiredValue);
		   		     if(RequiredValue.contains(data[178]))
		   		     {
		   		     CommonFunctions.waitForPageLoaded();
		   		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ProductSourceDropDownDynamic, RequiredValue, "Source DropDown Selection");
		   		     break;
		   		     }
		             }
		   		     CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
		   		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
		   		     //Clicking Done Button
		   		     CommonFunctions.waitForPageLoaded();
		   		     wait.until(ExpectedConditions.titleIs(data[144]));
			    }
			    }
			   
			    }
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in FillColorwayAndDetailsInContentTable"+e);
			throw e;
		}
  return true;
	}
	public static boolean FillColorwayAndDetailsInContentTable_TC_24(String [] data) throws Exception{
		try{
		        wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(ProductColorWay);
			    CommonFunctions.clickButtonOrLink(ProductColorWay, "textBox", "Product ColrWayTextBox");
			    //Clicking on Product colorway Text Box
			    CommonFunctions.gettingParentWindow();
			    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
			    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
			    //Clicking productColorWayHyperLink 
			    CommonFunctions.switchingChildWindow();
			    //Switching Child window
			    ColorWayType=By.linkText(data[170]);
			    CommonFunctions.waitForElementTobeClickable(ColorWayType);
			    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
			    //Clicking on Retail Item
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ProductTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(ProductTextBox,CopyLinkRetailItem1, "ProductNumber");
			    log.info("The Selected colorway is: "+CopyLinkRetailItem1+".And the status of the Cost Sheet is: "+data[284]);
			    //Entering a Product Number
			    CommonFunctions.waitForElementTobeClickable(SearchButton);
			    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
			    //Clicking Search Button
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
			    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
			    //Clicking on Choose Button
			    CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			    FillingContentTable(data);
			    //Adding a Second Color way Below
			    wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(AddRowsButton);
			    CommonFunctions.clickButtonOrLink(AddRowsButton, "Image", "AddRowsButton");
			    //Clicking Add Row Icon
			    wait.until(ExpectedConditions.visibilityOfElementLocated(AddRowTable));
			    //Waiting for add row Table
			    InsertAfter=By.linkText(data[266]);
			    CommonFunctions.waitForElementTobeClickable(InsertAfter);
			    CommonFunctions.clickButtonOrLink(InsertAfter, "hyperLink", "InsertAfter");
			    //Clicking on Insert After
			    CommonFunctions.waitForElementTobeClickable(UnitRatioTable);
				CommonFunctions.clickButtonOrLink(UnitRatioTable, "table", "UnitRatiotable");
				//Clicking on Unit Ratio
				CommonFunctions.waitForElementTobeClickable(ProductColorWay2);
				CommonFunctions.clickButtonOrLink(ProductColorWay2, "Text Box", "ProductColorWay2");
				//clicking on the Product Colorway
				 CommonFunctions.gettingParentWindow();
				    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
				    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
				    //Clicking productColorWayHyperLink 
				    CommonFunctions.switchingChildWindow();
				    //Switching Child window
				    ColorWayType=By.linkText(data[170]);
				    CommonFunctions.waitForElementTobeClickable(ColorWayType);
				    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
				    //Clicking on Retail Item
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ProductTextBox);
				    CommonFunctions.enterTextInTextboxUpdated(ProductTextBox,CopyLinkRetailItem2, "ProductNumber");
				    log.info("The Selected colorway is: "+CopyLinkRetailItem2+".And the status of the Cost Sheet is: "+data[284]);
				    //Entering a Product Number
				    CommonFunctions.waitForElementTobeClickable(SearchButton);
				    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
				    //Clicking Search Button
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
				    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
				    //Clicking on Choose Button
				    CommonFunctions.switchParentWindow();
				    driver.switchTo().defaultContent();
					driver.switchTo().frame("contentframe");
				    //Switching Frame
				    CommonFunctions.waitForPageLoaded();
				    FillingContentTable_TC24(data);
					//Filling Content Table Values
			   
			    }
		catch(Exception e){
			fail=true;
			log.error("Exception in FillColorwayAndDetailsInContentTable"+e);
			throw e;
		}
  return true;
	}
	
	public static boolean FillColorwayAndDetailsInContentTable_TC_33(String [] data) throws Exception{
		try{
		        wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(ProductColorWay);
			    CommonFunctions.clickButtonOrLink(ProductColorWay, "textBox", "Product ColrWayTextBox");
			    //Clicking on Product colorway Text Box
			    CommonFunctions.gettingParentWindow();
			    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
			    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
			    //Clicking productColorWayHyperLink 
			    CommonFunctions.switchingChildWindow();
			    //Switching Child window
			    ColorWayType=By.linkText(data[170]);
			    CommonFunctions.waitForElementTobeClickable(ColorWayType);
			    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
			    //Clicking on Retail Item
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ProductTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(ProductTextBox,CopyLinkRetailItem1, "ProductNumber");
			    log.info("The Selected colorway is: "+CopyLinkRetailItem1+".And the status of the Cost Sheet is: "+data[284]);
			    //Entering a Product Number
			    CommonFunctions.waitForElementTobeClickable(SearchButton);
			    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
			    //Clicking Search Button
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
			    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
			    //Clicking on Choose Button
			    CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			    FillingContentTable(data);
			    //Adding a Second Color way Below
			    wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(AddRowsButton);
			    CommonFunctions.clickButtonOrLink(AddRowsButton, "Image", "AddRowsButton");
			    //Clicking Add Row Icon
			    wait.until(ExpectedConditions.visibilityOfElementLocated(AddRowTable));
			    //Waiting for add row Table
			    InsertAfter=By.linkText(data[266]);
			    CommonFunctions.waitForElementTobeClickable(InsertAfter);
			    CommonFunctions.clickButtonOrLink(InsertAfter, "hyperLink", "InsertAfter");
			    //Clicking on Insert After
			    CommonFunctions.waitForElementTobeClickable(UnitRatioTable);
				CommonFunctions.clickButtonOrLink(UnitRatioTable, "table", "UnitRatiotable");
				//Clicking on Unit Ratio
				CommonFunctions.waitForElementTobeClickable(ProductColorWay2);
				CommonFunctions.clickButtonOrLink(ProductColorWay2, "Text Box", "ProductColorWay2");
				//clicking on the Product Colorway
				 CommonFunctions.gettingParentWindow();
				    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
				    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
				    //Clicking productColorWayHyperLink 
				    CommonFunctions.switchingChildWindow();
				    //Switching Child window
				    ColorWayType=By.linkText(data[170]);
				    CommonFunctions.waitForElementTobeClickable(ColorWayType);
				    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
				    //Clicking on Retail Item
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ProductTextBox);
				    CommonFunctions.enterTextInTextboxUpdated(ProductTextBox,CopyLinkRetailItem2, "ProductNumber");
				    log.info("The Selected colorway is: "+CopyLinkRetailItem2+".And the status of the Cost Sheet is: "+data[284]);
				    //Entering a Product Number
				    CommonFunctions.waitForElementTobeClickable(SearchButton);
				    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
				    //Clicking Search Button
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
				    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
				    //Clicking on Choose Button
				    CommonFunctions.switchParentWindow();
				    driver.switchTo().defaultContent();
					driver.switchTo().frame("contentframe");
				    //Switching Frame
				    CommonFunctions.waitForPageLoaded();
				    FillingContentTable_TC24(data);
					//Filling Content Table Values
			   
			    }
		catch(Exception e){
			fail=true;
			log.error("Exception in FillColorwayAndDetailsInContentTable_TC_33"+e);
			throw e;
		}
 return true;
	}
	
	public static boolean TC_18_CompareVendorRetailtemCostSheets(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			//AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			NavigateToCostSheetCompareTab(data);
			//Navigate To Cost Sheet Compare Tab
			SelectCostSheetDropDownValue(data);
			//selecting the Value in Cost Sheet Drop down
			AssertionVerficationOnComparingCostSheetsInDetailsPart(data);
			//Assertion Verification of Comparing Two Cost Sheets
			AssertionVerficationOnComparingCostSheetsInGeneralAttributePartInRetailItem(data);
			//Assertion Verification of General Attribute In  Cost Sheet For Retail  item 
			AssertionVerficationOnAssortmentOrSolidReference(data);
			//Assertion verification of AssortmentOrSolidReference
			AssertionVerficationOnToolingCost(data);
			//Tooling Cost Verification
			AssertionVerficationOnRetailItemCost_QuoteCurrency(data);
			//Retails Item Quote Currency verification
			AssertionVerficationOnRetailItemCost_USDConversion(data);
			//Retails Item-USD Conversion verification
			AssertionVerficationOfWhatIfCostSheetIdentification(data);
			//Assertion Verification On What If Cost Sheet Identification
			AssertionVerficationColumnHide(data);
			//Assertion verification on Column Hide
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC78 - Compare Vendor Product Cost Sheets TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC78 - Compare Vendor Product Cost Sheets Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			 }
			
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_18"
					+ "_CompareVendorRetailtemCostSheets"+e);
			throw e;
		}
	return true;
	}
	public static boolean AssertionVerficationOnRetailItemCost_QuoteCurrency(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(RetailItemValue_FirstCostSheet);
			GettingText(RetailItemValue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(RetailItemValue_SecondCostSheet);
			GettingTextExpected(RetailItemValue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "RetailItemValue  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(RetailItemValue_AleryIcon, "RetailItemValue_AleryIcon"), "RetailItemValue Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "RetailItemValue of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(RetailItemValue_AleryIcon, "RetailItemValue_AleryIcon"), "RetailItemValue Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of RetailItemValue Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(PlasticMaterialvalue_FirstCostSheet);
			GettingText(PlasticMaterialvalue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(PlasticMaterialvalue_SecondCostSheet);
			GettingTextExpected(PlasticMaterialvalue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "PlasticMaterialvalue  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(PlasticMaterialvalue_AleryIcon, "PlasticMaterialvalue_AleryIcon"), "PlasticMaterial Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "PlasticMaterialvalue of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PlasticMaterialvalue_AleryIcon, "PlasticMaterialvalue_AleryIcon"), "PlasticMaterialvalue Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of PlasticMaterialvalue_USD Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(PackagingMaterialValue_FirstCostSheet);
			GettingText(PackagingMaterialValue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(PackagingMaterialValue_SecondCostSheet);
			GettingTextExpected(PackagingMaterialValue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "PackagingMaterialValue  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(PackagingMaterialValue_AleryIcon, "PackagingMaterialValue_AleryIcon"), "PackagingMaterialValue Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "PackagingMaterialValue of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PackagingMaterialValue_AleryIcon, "PackagingMaterialValue_AleryIcon"), "PackagingMaterialValue Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of PackagingMaterialValue Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue_FirstCostSheet);
			GettingText(ChemicalMaterialValue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue_SecondCostSheet);
			GettingTextExpected(ChemicalMaterialValue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ChemicalMaterialValue  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(PackagingMaterialValue_AleryIcon, "PackagingMaterialValue_AleryIcon"), "PackagingMaterialValue Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ChemicalMaterialValue of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PackagingMaterialValue_AleryIcon, "PackagingMaterialValue_AleryIcon"), "PackagingMaterialValue Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of PackagingMaterialValue Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue_FirstCostSheet);
			GettingText(ChemicalMaterialValue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue_SecondCostSheet);
			GettingTextExpected(ChemicalMaterialValue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ChemicalMaterialValue  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ChemicalMaterialValue_AleryIcon, "ChemicalMaterialValue_AleryIcon"), "ChemicalMaterialValue Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ChemicalMaterialValue of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ChemicalMaterialValue_AleryIcon, "ChemicalMaterialValue_AleryIcon"), "ChemicalMaterialValue Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of ChemicalMaterialValueAttribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(PurchasedMaterialvalue_FirstCostSheet);
			GettingText(PurchasedMaterialvalue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(PurchasedMaterialvalue_SecondCostSheet);
			GettingTextExpected(PurchasedMaterialvalue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "PurchasedMaterialvalue  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(PurchasedMaterialvalue_AleryIcon, "PurchasedMaterialvalue_AleryIcon"), "PurchasedMaterialvalue Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "PurchasedMaterialvalue of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PurchasedMaterialvalue_AleryIcon, "PurchasedMaterialvalue_AleryIcon"), "PurchasedMaterialvalue Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of PurchasedMaterialvalue Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(ElectronicMaterialValue_FirstCostSheet);
			GettingText(ElectronicMaterialValue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(ElectronicMaterialValue_SecondCostSheet);
			GettingTextExpected(ElectronicMaterialValue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ElectronicMaterialValue of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ElectronicMaterialValue_AleryIcon, "ElectronicMaterialValue_AleryIcon"), "ElectronicMaterialValue Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ElectronicMaterialValue of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ElectronicMaterialValue_AleryIcon, "ElectronicMaterialValue_AleryIcon"), "ElectronicMaterialValue Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of ElectronicMaterialValue Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialValue_FirstCostSheet);
			GettingText(SoftGoodMaterialValue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialValue_SecondCostSheet);
			GettingTextExpected(SoftGoodMaterialValue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "SoftGoodMaterialValue  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(SoftGoodMaterialValue_AleryIcon, "SoftGoodMaterialValue_AleryIcon"), "SoftGoodMaterialValue Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "SoftGoodMaterialValue of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(SoftGoodMaterialValue_AleryIcon, "SoftGoodMaterialValue_AleryIcon"), "SoftGoodMaterialValue Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of SoftGoodMaterialValue Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborValue_FirstCostSheet);
			GettingText(GeneralDecoLaborValue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborValue_SecondCostSheet);
			GettingTextExpected(GeneralDecoLaborValue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "GeneralDecoLaborValue  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(GeneralDecoLaborValue_AleryIcon, "GeneralDecoLaborValue_AleryIcon"), "GeneralDecoLaborValue Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "GeneralDecoLaborValue of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(GeneralDecoLaborValue_AleryIcon, "GeneralDecoLaborValue_AleryIcon"), "GeneralDecoLaborValue Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of GeneralDecoLaborValue Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(MoldinglaborCostValue_FirstCostSheet);
			GettingText(MoldinglaborCostValue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(MoldinglaborCostValue_SecondCostSheet);
			GettingTextExpected(MoldinglaborCostValue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "MoldinglaborCostValue  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(MoldinglaborCostValue_AleryIcon, "MoldinglaborCostValue_AleryIcon"), "MoldinglaborCostValue Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "MoldinglaborCostValue of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(MoldinglaborCostValue_AleryIcon, "MoldinglaborCostValue_AleryIcon"), "MoldinglaborCostValue Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of MoldinglaborCostValue Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(MarkUp_FirstCostSheet);
			GettingText(MarkUp_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(MarkUp_SecondCostSheet);
			GettingTextExpected(MarkUp_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "MarkUp  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(MarkUp_AleryIcon, "MarkUp_AleryIcon"), "MarkUp Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "MarkUp of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(MarkUp_AleryIcon, "MarkUp_AleryIcon"), "MarkUp Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of MarkUp Attribute value and Alery Icon in CostSheets
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnRetailItemCost_USDConversion"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerficationOnRetailItemCost_USDConversion(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(RetailItemValue_FirstCostSheet_USD);
			GettingText(RetailItemValue_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(RetailItemValue_SecondCostSheet_USD);
			GettingTextExpected(RetailItemValue_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "RetailItemValue_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(RetailItemValue_AleryIcon_USD, "RetailItemValue_AleryIcon_USD"), "RetailItemValue_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "RetailItemValue_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(RetailItemValue_AleryIcon_USD, "RetailItemValue_AleryIcon_USD"), "RetailItemValue_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of RetailItemValue_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(PlasticMaterialvalue_FirstCostSheet_USD);
			GettingText(PlasticMaterialvalue_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(PlasticMaterialvalue_SecondCostSheet_USD);
			GettingTextExpected(PlasticMaterialvalue_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "PlasticMaterialvalue_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(PlasticMaterialvalue_AleryIcon_USD, "PlasticMaterialvalue_AleryIcon_USD"), "PlasticMaterial_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "PlasticMaterialvalue_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PlasticMaterialvalue_AleryIcon_USD, "PlasticMaterialvalue_AleryIcon_USD"), "PlasticMaterialvalue_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of PlasticMaterialvalue_USD Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(PackagingMaterialValue_FirstCostSheet_USD);
			GettingText(PackagingMaterialValue_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(PackagingMaterialValue_SecondCostSheet_USD);
			GettingTextExpected(PackagingMaterialValue_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "PackagingMaterialValue_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(PackagingMaterialValue_AleryIcon_USD, "PackagingMaterialValue_AleryIcon_USD"), "PackagingMaterialValue_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "PackagingMaterialValue_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PackagingMaterialValue_AleryIcon_USD, "PackagingMaterialValue_AleryIcon_USD"), "PackagingMaterialValue_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of PackagingMaterialValue_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue_FirstCostSheet_USD);
			GettingText(ChemicalMaterialValue_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue_SecondCostSheet_USD);
			GettingTextExpected(ChemicalMaterialValue_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ChemicalMaterialValue_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(PackagingMaterialValue_AleryIcon_USD, "PackagingMaterialValue_AleryIcon_USD"), "PackagingMaterialValue_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ChemicalMaterialValue_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PackagingMaterialValue_AleryIcon_USD, "PackagingMaterialValue_AleryIcon_USD"), "PackagingMaterialValue_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of PackagingMaterialValue_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue_FirstCostSheet_USD);
			GettingText(ChemicalMaterialValue_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue_SecondCostSheet_USD);
			GettingTextExpected(ChemicalMaterialValue_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ChemicalMaterialValue_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ChemicalMaterialValue_AleryIcon_USD, "ChemicalMaterialValue_AleryIcon_USD"), "ChemicalMaterialValue_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ChemicalMaterialValue_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ChemicalMaterialValue_AleryIcon_USD, "ChemicalMaterialValue_AleryIcon_USD"), "ChemicalMaterialValue_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of ChemicalMaterialValue_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(PurchasedMaterialvalue_FirstCostSheet_USD);
			GettingText(PurchasedMaterialvalue_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(PurchasedMaterialvalue_SecondCostSheet_USD);
			GettingTextExpected(PurchasedMaterialvalue_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "PurchasedMaterialvalue_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(PurchasedMaterialvalue_AleryIcon_USD, "PurchasedMaterialvalue_AleryIcon_USD"), "PurchasedMaterialvalue_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "PurchasedMaterialvalue_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PurchasedMaterialvalue_AleryIcon_USD, "PurchasedMaterialvalue_AleryIcon_USD"), "PurchasedMaterialvalue_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of PurchasedMaterialvalue_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(ElectronicMaterialValue_FirstCostSheet_USD);
			GettingText(ElectronicMaterialValue_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(ElectronicMaterialValue_SecondCostSheet_USD);
			GettingTextExpected(ElectronicMaterialValue_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ElectronicMaterialValue_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ElectronicMaterialValue_AleryIcon_USD, "ElectronicMaterialValue_AleryIcon_USD"), "ElectronicMaterialValue_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ElectronicMaterialValue_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ElectronicMaterialValue_AleryIcon_USD, "ElectronicMaterialValue_AleryIcon_USD"), "ElectronicMaterialValue_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of ElectronicMaterialValue_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialValue_FirstCostSheet_USD);
			GettingText(SoftGoodMaterialValue_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialValue_SecondCostSheet_USD);
			GettingTextExpected(SoftGoodMaterialValue_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "SoftGoodMaterialValue_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(SoftGoodMaterialValue_AleryIcon_USD, "SoftGoodMaterialValue_AleryIcon_USD"), "SoftGoodMaterialValue_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "SoftGoodMaterialValue_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(SoftGoodMaterialValue_AleryIcon_USD, "SoftGoodMaterialValue_AleryIcon_USD"), "SoftGoodMaterialValue_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of SoftGoodMaterialValue_USD Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborValue_FirstCostSheet_USD);
			GettingText(GeneralDecoLaborValue_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborValue_SecondCostSheet_USD);
			GettingTextExpected(GeneralDecoLaborValue_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "GeneralDecoLaborValue_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(GeneralDecoLaborValue_AleryIcon_USD, "GeneralDecoLaborValue_AleryIcon_USD"), "GeneralDecoLaborValue_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "GeneralDecoLaborValue_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(GeneralDecoLaborValue_AleryIcon_USD, "GeneralDecoLaborValue_AleryIcon_USD"), "GeneralDecoLaborValue_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of GeneralDecoLaborValue_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(MoldinglaborCostValue_FirstCostSheet_USD);
			GettingText(MoldinglaborCostValue_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(MoldinglaborCostValue_SecondCostSheet_USD);
			GettingTextExpected(MoldinglaborCostValue_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "MoldinglaborCostValue_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(MoldinglaborCostValue_AleryIcon_USD, "MoldinglaborCostValue_AleryIcon_USD"), "MoldinglaborCostValue_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "MoldinglaborCostValue_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(MoldinglaborCostValue_AleryIcon_USD, "MoldinglaborCostValue_AleryIcon_USD"), "MoldinglaborCostValue_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of MoldinglaborCostValue_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(MarkUp_FirstCostSheet_USD);
			GettingText(MarkUp_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(MarkUp_SecondCostSheet_USD);
			GettingTextExpected(MarkUp_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "MarkUp_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(MarkUp_AleryIcon_USD, "MarkUp_AleryIcon_USD"), "MarkUp_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "MarkUp_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(MarkUp_AleryIcon_USD, "MarkUp_AleryIcon_USD"), "MarkUp_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of MarkUp_USD Attribute value and Alery Icon in CostSheets
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnRetailItemCost_USDConversion"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerficationOnAssortmentOrSolidReference(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(AssortmentOrSolidReference_FirstCostSheet);
			GettingText(AssortmentOrSolidReference_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(AssortmentOrSolidReference_SecondCostSheet);
			GettingTextExpected(AssortmentOrSolidReference_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "AssortmentOrSolidReference  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(AssortmentOrSolidReference_AleryIcon, "AssortmentOrSolidReference_AleryIcon"), "AssortmentOrSolidReference Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "AssortmentOrSolidReference of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(AssortmentOrSolidReference_AleryIcon, "AssortmentOrSolidReference_AleryIcon"), "AssortmentOrSolidReference Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of AssortmentOrSolidReference Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(AstOrSolidWave_FirstCostSheet);
			GettingText(AstOrSolidWave_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(AstOrSolidWave_SecondCostSheet);
			GettingTextExpected(AstOrSolidWave_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "AstOrSolidWave  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(AstOrSolidWave_AleryIcon, "AstOrSolidWave_AleryIcon"), "AstOrSolidWave Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "AstOrSolidWave of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(AstOrSolidWave_AleryIcon, "AstOrSolidWave_AleryIcon"), "AstOrSolidWave Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of AstOrSolidWave Attribute value and Alery Icon in CostSheets
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnComparingCostSheetsInPrimaryCostSheetPart"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationOnToolingCost(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ToolingCostQuoteCurrency_FirstCostSheet);
			GettingText(ToolingCostQuoteCurrency_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(ToolingCostQuoteCurrency_SecondCostSheet);
			GettingTextExpected(ToolingCostQuoteCurrency_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ToolingCostQuoteCurrency  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ToolingCostQuoteCurrency_AleryIcon, "ToolingCostQuoteCurrency_AleryIcon"), "ToolingCostQuoteCurrency Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ToolingCostQuoteCurrency of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ToolingCostQuoteCurrency_AleryIcon, "ToolingCostQuoteCurrency_AleryIcon"), "ToolingCostQuoteCurrency Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of ToolingCostQuoteCurrency Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(ToolingCost_USD_FirstCostSheet);
			GettingText(ToolingCost_USD_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(ToolingCost_USD_SecondCostSheet);
			GettingTextExpected(ToolingCost_USD_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ToolingCost_USD  of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ToolingCost_USD_AleryIcon, "ToolingCost_USD_AleryIcon"), "ToolingCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ToolingCost_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ToolingCost_USD_AleryIcon, "ToolingCost_USD_AleryIcon"), "ToolingCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of ToolingCost_USD Attribute value and Alery Icon in CostSheets
			
			
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnComparingCostSheetsInPrimaryCostSheetPart"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationOnComparingCostSheetsInGeneralAttributePartInRetailItem(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(PrimaryCostSheet_FirstCostSheet);
			GettingText(PrimaryCostSheet_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(PrimaryCostSheet_SecondCostSheet);
			GettingTextExpected(PrimaryCostSheet_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Primary Cost Sheet Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(PrimaryCostSheet_AleryIcon, "PrimaryCostSheet_AleryIcon"), "Primary Cost Sheet Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Primary Cost Sheet Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PrimaryCostSheet_AleryIcon, "PrimaryCostSheet_AleryIcon"), "Primary Cost Sheet Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Primary Cost Sheet Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(ProductType_FirstCostSheet);
			GettingText(ProductType_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(ProductType_SecondCostSheet);
			GettingTextExpected(ProductType_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Product type Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ProductType_AleryIcon, "Product type AleryIcon"), "Product Type Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Product type Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ProductType_AleryIcon, "Product Type AleryIcon"), "Product Type Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Product Type Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(CostSheetSequenceNumber_FirstCostSheet);
			GettingText(CostSheetSequenceNumber_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CostSheetSequenceNumber_SecondCostSheet);
			GettingTextExpected(CostSheetSequenceNumber_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Sequence Number Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CostSheetSequenceNumber_AleryIcon, "CostSheetSequenceNumber_AleryIcon"), "Cost Sheet Sequence Number Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Sequence Number Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CostSheetSequenceNumber_AleryIcon, "CostSheetSequenceNumber_AleryIcon"), "Cost Sheet Sequence Number Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Cost Sheet Sequence Number Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(Wave_FirstCostSheet);
			GettingText(Wave_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(Wave_SecondCostSheet);
			GettingTextExpected(Wave_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Wave Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(Wave_AleryIcon, "Wave_AleryIcon"), "Wave Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Wave Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(Wave_AleryIcon, "Wave_AleryIcon"), "Wave Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Wave value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(CostSheetStaus_FirstCostSheet);
			GettingText(CostSheetStaus_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CostSheetStaus_SecondCostSheet);
			GettingTextExpected(CostSheetStaus_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Status Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CostSheetStaus_AleryIcon, "CostSheetStaus_AleryIcon"), "Cost Sheet Status  Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Status  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CostSheetStaus_AleryIcon, "CostSheetStaus_AleryIcon"), "Cost Sheet Status Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Cost Sheet Status Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(CostSheetStaus_FirstCostSheet);
			GettingText(CostSheetStaus_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CostSheetStaus_SecondCostSheet);
			GettingTextExpected(CostSheetStaus_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Status Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CostSheetStaus_AleryIcon, "CostSheetStaus_AleryIcon"), "Cost Sheet Status  Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Status  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CostSheetStaus_AleryIcon, "CostSheetStaus_AleryIcon"), "Cost Sheet Status Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Cost Sheet Status Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(QuoteCurrency_FirstCostSheet);
			GettingText(QuoteCurrency_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(QuoteCurrency_SecondCostSheet);
			GettingTextExpected(QuoteCurrency_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Quote Currecncy Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(QuoteCurrency_AleryIcon, "QuoteCurrency_AleryIcon"), "Quote Currecny  Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Quote Currecncy  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(QuoteCurrency_AleryIcon, "QuoteCurrency_AleryIcon"), "Quote Currecny  Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Quote Currency Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(BOM_FirstCostSheet);
			GettingText(BOM_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(BOM_SecondCostSheet);
			GettingTextExpected(BOM_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "BOM Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(BOM_AleryIcon, "BOM_AleryIcon"), "BOM  Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "BOM Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(BOM_AleryIcon, "BOM_AleryIcon"), "BOM Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of BOM Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate_FirstCostSheet);
			GettingText(CurrencyConversionRate_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate_SecondCostSheet);
			GettingTextExpected(CurrencyConversionRate_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Currency Conversion Rate Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CurrencyConversionRate_AleryIcon, "CurrencyConversionRate_AleryIcon"), "Currency Conversion Rate  Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Currency Conversion Rate  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CurrencyConversionRate_AleryIcon, "CurrencyConversionRate_AleryIcon"), "Currency Conversion Rate Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Currency Conversion Rate Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(BOMIteration_FirstCostSheet);
			GettingText(BOMIteration_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(BOMIteration_SecondCostSheet);
			GettingTextExpected(BOMIteration_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "BOM Iteration Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(BOMIteration_AleryIcon, "BOMIteration_AleryIcon"), "BOM Ieration Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "BOM Iteration Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(BOMIteration_AleryIcon, "BOMIteration_AleryIcon"), "BOM Ieration Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of BOM Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(CountryOfOrigin_FirstCostSheet);
			GettingText(CountryOfOrigin_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CountryOfOrigin_SecondCostSheet);
			GettingTextExpected(CountryOfOrigin_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Country of Origin Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CountryOfOrigin_AleryIcon, "CountryOfOrigin_AleryIcon"), "CountryOfOrigin Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Country of Origin Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CountryOfOrigin_AleryIcon, "CountryOfOrigin_AleryIcon"), "CountryOfOrigin Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Country Of Origin Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(BOMRollUPDate_FirstCostSheet);
			GettingText(BOMRollUPDate_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(BOMRollUPDate_SecondCostSheet);
			GettingTextExpected(BOMRollUPDate_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "BOM Roll Up date Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(BOMRollUPDate_AleryIcon, "BOMRollUPDate_AleryIcon"), "BOMRollUPDate Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "BOM Roll Up date Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(BOMRollUPDate_AleryIcon, "BOMRollUPDate_AleryIcon"), "BOMRollUPDate Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of BOMRollUPDate Attribute and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(TargetCost_FirstCostSheet);
			GettingText(TargetCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TargetCost_SecondCostSheet);
			GettingTextExpected(TargetCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Target Cost of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TargetCost_AleryIcon, "TargetCost_AleryIcon"), "TargetCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Target Cost of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TargetCost_AleryIcon, "TargetCost_AleryIcon"), "TargetCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TargetCost Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(Comments_FirstCostSheet);
			GettingText(Comments_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(Comments_SecondCostSheet);
			GettingTextExpected(Comments_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Comments of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(Comments_AleryIcon, "Comments_AleryIcon"), "Comments Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Comments of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(Comments_AleryIcon, "Comments_AleryIcon"), "Comments Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Comments Attribute and Alery Icon in CostSheets
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnComparingCostSheetsInPrimaryCostSheetPart"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean TC_17_CompareVendorProductCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			//AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			NavigateToCostSheetCompareTab(data);
			//Navigate To Cost Sheet Compare Tab
			SelectCostSheetDropDownValue(data);
			//selecting the Value in Cost Sheet Drop down
			AssertionVerficationOnComparingCostSheetsInDetailsPart(data);
			//Assertion Verification of Comparing Two Cost Sheets
			AssertionVerficationOnComparingCostSheetsInPrimaryCostSheetPart(data);
			//Assertion Verification of Primary Cost Sheet 
			AssertionVerficationOnComparingCostSheetsInGeneralAttributesPart(data);
			//Assertion Verification General Attributes
			AssertionVerficationOnComparingCostSheetsInContentsTableCostSummaryPart(data);
			//Assertion Verification Contents Table Cost Summary Part
			AssertionVerficationOnComparingCostSheetsInProductCostQuoteCurrencyPart(data);
			//Assertion Verification Product Quote Currency part
			AssertionVerficationOnComparingCostSheetsInProductCostSummaryUSDPart(data);
			//Assertion Verification Product Quote Currency USD Value
			AssertionVerficationOfWhatIfCostSheetIdentification(data);
			//Assertion Verification On What If Cost Sheet Identification
			AssertionVerficationColumnHide(data);
			//Assertion verification on Column Hide
			
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC78 - Compare Vendor Product Cost Sheets TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC78 - Compare Vendor Product Cost Sheets Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			 }
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_17_CompareVendorProductCostSheet"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerficationColumnHide(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(MinusIconOfFirstColumn);
			CommonFunctions.clickButtonOrLink(MinusIconOfFirstColumn, "image", "MinusIconOfFirstColumn");
			//Clicking on Minus Button on 
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(FirstColumn, "FirstColumn"), "Column Appears After clicking '-' Button also.Assertion failed.Please check");
			
		} 
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfWhatIfCostSheetIdentification"+e);
			throw e;
		}
		return true;
	}
		
	public static boolean AssertionVerficationOfWhatIfCostSheetIdentification(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ShowWhatIfCostSheetCheckBox);
			Select dropDown = new Select(driver.findElement(By.xpath("//select[@id='firstCostSheet']")));
			List<WebElement> elementCount =dropDown.getOptions();
			int DropDownCountBeforeCheckingTheCheckBox = elementCount.size();
			log.info("Count of Cost Sheet before cliking What If Cost Sheet Check Box is" +DropDownCountBeforeCheckingTheCheckBox);
			CommonFunctions.waitForElementTobeClickable(ShowWhatIfCostSheetCheckBox);
			CommonFunctions.clickButtonOrLink(ShowWhatIfCostSheetCheckBox, "Check box", "ShowWhatIfCostSheetCheckBox");
			//Clicking the Show What If Else Check box
			wait.until(ExpectedConditions.titleIs(data[144]));
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
	        Thread.sleep(1000);
			CommonFunctions.waitForElementTobeClickable(FourthColumn);
		   Select dropDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'Show What If Cost Sheet')]//following::select[1]")));
			List<WebElement> elementCount1 =dropDown1.getOptions();
			int DropDownCountAfterCheckingTheCheckBox = elementCount1.size();
			log.info("Count of Cost Sheet After cliking What If Cost Sheet Check Box is" +DropDownCountAfterCheckingTheCheckBox);
			
			if(!(DropDownCountBeforeCheckingTheCheckBox==DropDownCountAfterCheckingTheCheckBox))
			{
			 CommonFunctions.AssertNotEqualsVerificationforIntergers(DropDownCountBeforeCheckingTheCheckBox, DropDownCountAfterCheckingTheCheckBox, "Number of Cost Sheets are matched before and after checking the What if Else Check box.user needs to create Whats If cost Sheet for this Product.Assertion failed.Please Check");
			 }
			
		} 
			catch(Exception e){
				fail=true;
				log.error("Exception in AssertionVerficationOfWhatIfCostSheetIdentification"+e);
				throw e;
			}
			return true;
		}
		
	
	public static boolean AssertionVerficationOnComparingCostSheetsInProductCostSummaryUSDPart(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(EXFactoryCost_FirstCostSheet_USD);
			GettingText(EXFactoryCost_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(EXFactoryCost_SecondCostSheet_USD);
			GettingTextExpected(EXFactoryCost_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ExFactory_USD Cost Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(EXFactoryCost_USD_AleryIcon, "EXFactoryCost_USD_AleryIcon"), "EXFactoryCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ExFactory_USD Cost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(EXFactoryCost_USD_AleryIcon, "EXFactoryCost_USD_AleryIcon"), "EXFactoryCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of EXFactoryCost_USD Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(TotalMarKUp_FirstCostSheet_USD);
			GettingText(TotalMarKUp_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(TotalMarKUp_SecondCostSheet_USD);
			GettingTextExpected(TotalMarKUp_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalMarKUp_USD Cost Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalMarKUp_USD_AleryIcon, "TotalMarKUp_USD_AleryIcon"), "TotalMarKUp_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalMarKUp_USD Cost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalMarKUp_USD_AleryIcon, "TotalMarKUp_USD_AleryIcon"), "TotalMarKUp_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalMarKUp_USD Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterial_FirstCostSheet_USD);
			GettingText(MasterCartonPackagingMaterial_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterial_SecondCostSheet_USD);
			GettingTextExpected(MasterCartonPackagingMaterial_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "MasterCartonPackagingMaterial_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(MasterCartonPackagingMaterial_USD_AleryIcon, "MasterCartonPackagingMaterial_USD_AleryIcon"), "MasterCartonPackagingMaterial Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "MasterCartonPackagingMaterial_USD  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(MasterCartonPackagingMaterial_USD_AleryIcon, "MasterCartonPackagingMaterial_USD_AleryIcon"), "MasterCartonPackagingMaterial_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of MasterCartonPackagingMaterial_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(MasterCartonpackagingLaborCost_FirstCostSheet_USD);
			GettingText(MasterCartonpackagingLaborCost_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(MasterCartonpackagingLaborCost_SecondCostSheet_USD);
			GettingTextExpected(MasterCartonpackagingLaborCost_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "MasterCartonpackagingLaborCost_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(MasterCartonpackagingLaborCost_USD_AleryIcon, "MasterCartonpackagingLaborCost_USD_AleryIcon"), "MasterCartonpackagingLaborCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "MasterCartonpackagingLaborCost_USD  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(MasterCartonpackagingLaborCost_USD_AleryIcon, "MasterCartonpackagingLaborCost_USD_AleryIcon"), "MasterCartonpackagingLaborCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of MasterCartonpackagingLaborCost_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(MiscellaneousMaterial_FirstCostSheet_USD);
			GettingText(MiscellaneousMaterial_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(MiscellaneousMaterial_SecondCostSheet_USD);
			GettingTextExpected(MiscellaneousMaterial_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "MiscellaneousMaterial_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(MiscellaneousMaterial_USD_AleryIcon, "MiscellaneousMaterial_USD_AleryIcon"), "MiscellaneousMaterial_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "MiscellaneousMaterial_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(MiscellaneousMaterial_USD_AleryIcon, "MiscellaneousMaterial_USD_AleryIcon"), "MiscellaneousMaterial_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of MiscellaneousMaterial_USD Attribute value and Alery Icon in CostSheets
			
			
			CommonFunctions.waitForElementTobeClickable(ProductMarkUp_FirstCostSheet_USD);
			GettingText(ProductMarkUp_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(ProductMarkUp_SecondCostSheet_USD);
			GettingTextExpected(ProductMarkUp_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ProductMarkUp_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ProductMarkUp_USD_AleryIcon, "ProductMarkUp_USD_AleryIcon"), "ProductMarkUp_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ProductMarkUp_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ProductMarkUp_USD_AleryIcon, "ProductMarkUp_USD_AleryIcon"), "ProductMarkUp_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of ProductMarkUp_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalPlasticCost_FirstCostSheet_USD);
			GettingText(TotalPlasticCost_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(TotalPlasticCost_SecondCostSheet_USD);
			GettingTextExpected(TotalPlasticCost_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalPlasticCost_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalPlasticCost_USD_AleryIcon, "TotalPlasticCost_USD_AleryIcon"), "TotalPlasticCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalPlasticCost_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalPlasticCost_USD_AleryIcon, "TotalPlasticCost_USD_AleryIcon"), "TotalPlasticCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalPlasticCost_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalPackagingCost_FirstCostSheet_USD );
			GettingText(TotalPackagingCost_FirstCostSheet_USD );
			CommonFunctions.waitForElementTobeClickable(TotalPackagingCost_SecondCostSheet_USD );
			GettingTextExpected(TotalPackagingCost_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalPackagingCost_USD   Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalPackagingCost_USD_AleryIcon, "TotalPackagingCost_USD_AleryIcon"), "TotalPackagingCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalPackagingCost_USD  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalPackagingCost_USD_AleryIcon, "TotalPackagingCost_USD_AleryIcon"), "TotalPackagingCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalPackagingCost_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalChemicalCost_FirstCostSheet_USD);
			GettingText(TotalChemicalCost_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(TotalChemicalCost_SecondCostSheet_USD);
			GettingTextExpected(TotalChemicalCost_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalChemicalCost_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalChemicalCost_USD_AleryIcon, "TotalChemicalCost_USD_AleryIcon"), "TotalChemicalCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalChemicalCost_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalChemicalCost_USD_AleryIcon, "TotalChemicalCost_USD_AleryIcon"), "TotalChemicalCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalChemicalCost_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalGeneralDecoLaborCost_FirstCostSheet_USD);
			GettingText(TotalGeneralDecoLaborCost_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(TotalGeneralDecoLaborCost_SecondCostSheet_USD);
			GettingTextExpected(TotalGeneralDecoLaborCost_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalGeneralDecoLaborCost_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalGeneralDecoLaborCost_USD_AleryIcon, "TotalGeneralDecoLaborCost_USD_AleryIcon"), "TotalGeneralDecoLaborCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalGeneralDecoLaborCost_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalGeneralDecoLaborCost_USD_AleryIcon, "TotalGeneralDecoLaborCost_USD_AleryIcon"), "TotalGeneralDecoLaborCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalGeneralDecoLaborCost_USD Attribute value and Alery Icon in CostSheets
			
		    CommonFunctions.waitForElementTobeClickable(TotalPurchasedCost_FirstCostSheet_USD);
			GettingText(TotalPurchasedCost_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(TotalPurchasedCost_SecondCostSheet_USD);
			GettingTextExpected(TotalPurchasedCost_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalPurchasedCost_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalPurchasedCost_USD_AleryIcon, "TotalPurchasedCost_USD_AleryIcon"), "TotalPurchasedCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalPurchasedCost_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalPurchasedCost_AleryIcon, "TotalPurchasedCost_AleryIcon"), "TotalPurchasedCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalPurchasedCost_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalMoldingLaborCost_FirstCostSheet_USD);
			GettingText(TotalMoldingLaborCost_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(TotalMoldingLaborCost_SecondCostSheet_USD);
			GettingTextExpected(TotalMoldingLaborCost_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalMoldingLaborCost_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalMoldingLaborCost_USD_AleryIcon, "TotalMoldingLaborCost_USD_AleryIcon"), "TotalMoldingLaborCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalMoldingLaborCost_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalMoldingLaborCost_USD_AleryIcon, "TotalMoldingLaborCost_USD_AleryIcon"), "TotalMoldingLaborCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalMoldingLaborCost_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalSoftGoodsCost_FirstCostSheet_USD);
			GettingText(TotalSoftGoodsCost_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(TotalSoftGoodsCost_SecondCostSheet_USD);
			GettingTextExpected(TotalSoftGoodsCost_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalSoftGoodsCost_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalSoftGoodsCost_USD_AleryIcon, "TotalSoftGoodsCost_USD_AleryIcon"), "TotalSoftGoodsCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalSoftGoodsCost_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalSoftGoodsCost_USD_AleryIcon, "TotalSoftGoodsCost_USD_AleryIcon"), "TotalSoftGoodsCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
         //Assertion Verification of TotalSoftGoodsCost_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(ContentsMarkUp_FirstCostSheet_USD);
			GettingText(ContentsMarkUp_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(ContentsMarkUp_SecondCostSheet_USD);
			GettingTextExpected(ContentsMarkUp_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ContentsMarkUp_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ContentsMarkUp_USD_AleryIcon, "ContentsMarkUp_USD_AleryIcon"), "ContentsMarkUp Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ContentsMarkUp_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentsMarkUp_USD_AleryIcon, "ContentsMarkUp_USD_AleryIcon"), "ContentsMarkUp Alery Icon is not appearing.Assertion failed.Please Verify");
				}
         //Assertion Verification of ContentsMarkUp_USD Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalElectronicCost_FirstCostSheet_USD);
			GettingText(TotalElectronicCost_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(TotalElectronicCost_SecondCostSheet_USD);
			GettingTextExpected(TotalElectronicCost_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalElectronicCost_USD  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalElectronicCost_USD_AleryIcon, "TotalElectronicCost_USD_AleryIcon"), "TotalElectronicCost_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalElectronicCost_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalElectronicCost_USD_AleryIcon, "TotalElectronicCost_USD_AleryIcon"), "TotalElectronicCost_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
         //Assertion Verification of TotalElectronicCost_USD Attribute value and Alery Icon in CostSheets
				}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnComparingCostSheetsInProductCostSummaryUSDPart"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean AssertionVerficationOnComparingCostSheetsInProductCostQuoteCurrencyPart(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(EXFactoryCost_FirstCostSheet);
			GettingText(EXFactoryCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(EXFactoryCost_SecondCostSheet);
			GettingTextExpected(EXFactoryCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ExFactory Cost Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(EXFactoryCost_AleryIcon, "EXFactoryCost_AleryIcon"), "EXFactoryCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ExFactory Cost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(EXFactoryCost_AleryIcon, "EXFactoryCost_AleryIcon"), "EXFactoryCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of EXFactoryCost Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(TotalMarKUp_FirstCostSheet);
			GettingText(TotalMarKUp_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TotalMarKUp_SecondCostSheet);
			GettingTextExpected(TotalMarKUp_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalMarKUp Cost Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalMarKUp_AleryIcon, "TotalMarKUp_AleryIcon"), "TotalMarKUp Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalMarKUp Cost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalMarKUp_AleryIcon, "TotalMarKUp_AleryIcon"), "TotalMarKUp Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalMarKUp Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterial_FirstCostSheet);
			GettingText(MasterCartonPackagingMaterial_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterial_SecondCostSheet);
			GettingTextExpected(MasterCartonPackagingMaterial_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "MasterCartonPackagingMaterial  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(MasterCartonPackagingMaterial_AleryIcon, "MasterCartonPackagingMaterial_AleryIcon"), "MasterCartonPackagingMaterial Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "MasterCartonPackagingMaterial  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(MasterCartonPackagingMaterial_AleryIcon, "MasterCartonPackagingMaterial_AleryIcon"), "MasterCartonPackagingMaterial Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of MasterCartonPackagingMaterial Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(MasterCartonpackagingLaborCost_FirstCostSheet);
			GettingText(MasterCartonpackagingLaborCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(MasterCartonpackagingLaborCost_SecondCostSheet);
			GettingTextExpected(MasterCartonpackagingLaborCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "MasterCartonpackagingLaborCost  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(MasterCartonpackagingLaborCost_AleryIcon, "MasterCartonpackagingLaborCost_AleryIcon"), "MasterCartonpackagingLaborCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "MasterCartonpackagingLaborCost  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(MasterCartonpackagingLaborCost_AleryIcon, "MasterCartonpackagingLaborCost_AleryIcon"), "MasterCartonpackagingLaborCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of MasterCartonpackagingLaborCost Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(MiscellaneousMaterial_FirstCostSheet);
			GettingText(MiscellaneousMaterial_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(MiscellaneousMaterial_SecondCostSheet);
			GettingTextExpected(MiscellaneousMaterial_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "MiscellaneousMaterial  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(MiscellaneousMaterial_AleryIcon, "MiscellaneousMaterial_AleryIcon"), "MiscellaneousMaterial Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "MiscellaneousMaterial Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(MiscellaneousMaterial_AleryIcon, "MiscellaneousMaterial_AleryIcon"), "MiscellaneousMaterial Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of MiscellaneousMaterial Attribute value and Alery Icon in CostSheets
			
			
			CommonFunctions.waitForElementTobeClickable(ProductMarkUp_FirstCostSheet);
			GettingText(ProductMarkUp_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(ProductMarkUp_SecondCostSheet);
			GettingTextExpected(ProductMarkUp_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ProductMarkUp  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ProductMarkUp_AleryIcon, "ProductMarkUp_AleryIcon"), "ProductMarkUp Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ProductMarkUp Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ProductMarkUp_AleryIcon, "ProductMarkUp_AleryIcon"), "ProductMarkUp Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of ProductMarkUp Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalPlasticCost_FirstCostSheet);
			GettingText(TotalPlasticCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TotalPlasticCost_SecondCostSheet);
			GettingTextExpected(TotalPlasticCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalPlasticCost  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalPlasticCost_AleryIcon, "TotalPlasticCost_AleryIcon"), "TotalPlasticCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalPlasticCost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalPlasticCost_AleryIcon, "TotalPlasticCost_AleryIcon"), "TotalPlasticCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalPlasticCost Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalPackagingCost_FirstCostSheet);
			GettingText(TotalPackagingCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TotalPackagingCost_SecondCostSheet);
			GettingTextExpected(TotalPackagingCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalPackagingCost  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalPackagingCost_AleryIcon, "TotalPackagingCost_AleryIcon"), "TotalPackagingCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalPackagingCost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalPackagingCost_AleryIcon, "TotalPackagingCost_AleryIcon"), "TotalPackagingCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalPackagingCost Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalChemicalCost_FirstCostSheet);
			GettingText(TotalChemicalCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TotalChemicalCost_SecondCostSheet);
			GettingTextExpected(TotalChemicalCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalChemicalCost  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalChemicalCost_AleryIcon, "TotalChemicalCost_AleryIcon"), "TotalChemicalCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalChemicalCost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalChemicalCost_AleryIcon, "TotalChemicalCost_AleryIcon"), "TotalChemicalCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalChemicalCost Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalGeneralDecoLaborCost_FirstCostSheet);
			GettingText(TotalGeneralDecoLaborCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TotalGeneralDecoLaborCost_SecondCostSheet);
			GettingTextExpected(TotalGeneralDecoLaborCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalGeneralDecoLaborCost  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalGeneralDecoLaborCost_AleryIcon, "TotalGeneralDecoLaborCost_AleryIcon"), "TotalGeneralDecoLaborCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalGeneralDecoLaborCost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalGeneralDecoLaborCost_AleryIcon, "TotalGeneralDecoLaborCost_AleryIcon"), "TotalGeneralDecoLaborCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalGeneralDecoLaborCost Attribute value and Alery Icon in CostSheets
			
		    CommonFunctions.waitForElementTobeClickable(TotalPurchasedCost_FirstCostSheet);
			GettingText(TotalPurchasedCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TotalPurchasedCost_SecondCostSheet);
			GettingTextExpected(TotalPurchasedCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalPurchasedCost  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalPurchasedCost_AleryIcon, "TotalPurchasedCost_AleryIcon"), "TotalPurchasedCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalPurchasedCost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalPurchasedCost_AleryIcon, "TotalPurchasedCost_AleryIcon"), "TotalPurchasedCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalPurchasedCost Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalMoldingLaborCost_FirstCostSheet);
			GettingText(TotalMoldingLaborCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TotalMoldingLaborCost_SecondCostSheet);
			GettingTextExpected(TotalMoldingLaborCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalMoldingLaborCost  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalMoldingLaborCost_AlerIcon, "TotalMoldingLaborCost_AlerIcon"), "TotalMoldingLaborCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalMoldingLaborCost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalMoldingLaborCost_AlerIcon, "TotalMoldingLaborCost_AlerIcon"), "TotalMoldingLaborCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TotalMoldingLaborCost Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalSoftGoodsCost_FirstCostSheet);
			GettingText(TotalSoftGoodsCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TotalSoftGoodsCost_SecondCostSheet);
			GettingTextExpected(TotalSoftGoodsCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalSoftGoodsCost  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalSoftGoodsCost_AleryIcon, "TotalSoftGoodsCost_AleryIcon"), "TotalSoftGoodsCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalSoftGoodsCost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalSoftGoodsCost_AleryIcon, "TotalSoftGoodsCost_AleryIcon"), "TotalSoftGoodsCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
         //Assertion Verification of TotalSoftGoodsCost Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(ContentsMarkUp_FirstCostSheet);
			GettingText(ContentsMarkUp_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(ContentsMarkUp_SecondCostSheet);
			GettingTextExpected(ContentsMarkUp_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "ContentsMarkUp  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ContentsMarkUp_AleryIcon, "ContentsMarkUp_AleryIcon"), "ContentsMarkUp Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "ContentsMarkUp Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentsMarkUp_AleryIcon, "ContentsMarkUp_AleryIcon"), "ContentsMarkUp Alery Icon is not appearing.Assertion failed.Please Verify");
				}
         //Assertion Verification of ContentsMarkUp Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TotalElectronicCost_FirstCostSheet);
			GettingText(TotalElectronicCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TotalElectronicCost_SecondCostSheet);
			GettingTextExpected(TotalElectronicCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TotalElectronicCost  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TotalElectronicCost_AleryIcon, "TotalElectronicCost_AleryIcon"), "TotalElectronicCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TotalElectronicCost Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TotalElectronicCost_AleryIcon, "TotalElectronicCost_AleryIcon"), "TotalElectronicCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
         //Assertion Verification of TotalElectronicCost Attribute value and Alery Icon in CostSheets
				}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnComparingCostSheetsInProductCostQuoteCurrencyPart"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean AssertionVerficationOnComparingCostSheetsInContentsTableCostSummaryPart(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CasePackQuantity_FirstCostSheet);
			GettingText(CasePackQuantity_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CasePackQuantity_SecondCostSheet);
			GettingTextExpected(CasePackQuantity_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "CasePack Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CasePackQuantity_AleryIcon, "CasePackQuantity_AleryIcon"), "CasePackQuantity Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "CasePack Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CasePackQuantity_AleryIcon, "CasePackQuantity_AleryIcon"), "CasePackQuantity Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of CasePackQuantity Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(AstOrSolidWeightedAverage_FirstCostSheet);
			GettingText(AstOrSolidWeightedAverage_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(AstOrSolidWeightedAverage_SecondCostSheet);
			GettingTextExpected(AstOrSolidWeightedAverage_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "AstOrSolidWeightedAverage Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(AstOrSolidWeightedAverage_AleryIcon, "AstOrSolidWeightedAverage_AleryIcon"), "AstOrSolidWeightedAverage Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "AstOrSolidWeightedAverage Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(AstOrSolidWeightedAverage_AleryIcon, "AstOrSolidWeightedAverage_AleryIcon"), "AstOrSolidWeightedAverage Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of AstOrSolidWeightedAverage Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(AstOrSolidWeightedAverage_FirstCostSheet_USD);
			GettingText(AstOrSolidWeightedAverage_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(AstOrSolidWeightedAverage_SecondCostSheet_USD);
			GettingTextExpected(AstOrSolidWeightedAverage_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "AstOrSolidWeightedAverage_USD Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(AstOrSolidWeightedAverage_USD_AleryIcon, "AstOrSolidWeightedAverage_USD_AleryIcon"), "AstOrSolidWeightedAverage_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "AstOrSolidWeightedAverage_USD Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(AstOrSolidWeightedAverage_USD_AleryIcon, "AstOrSolidWeightedAverage_USD_AleryIcon"), "AstOrSolidWeightedAverage_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of AstOrSolidWeightedAverage_USD Attribute value and Alery Icon in CostSheets
			
			
			CommonFunctions.waitForElementTobeClickable(TM_BP_SubTotal_FirstCostSheet);
			GettingText(TM_BP_SubTotal_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TM_BP_SubTotal_SecondCostSheet);
			GettingTextExpected(TM_BP_SubTotal_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TM_BP_SubTotal Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TM_BP_SubTotal_AleryIcon, "TM_BP_SubTotal_AleryIcon"), "TM_BP_SubTotal Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TM_BP_SubTotal Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TM_BP_SubTotal_AleryIcon, "TM_BP_SubTotal_AleryIcon"), "TM_BP_SubTotal Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TM_BP_SubTotal Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(TM_BP_SubTotal_FirstCostSheet_USD);
			GettingText(TM_BP_SubTotal_FirstCostSheet_USD);
			CommonFunctions.waitForElementTobeClickable(TM_BP_SubTotal_SecondCostSheet_USD);
			GettingTextExpected(TM_BP_SubTotal_SecondCostSheet_USD);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "TM_BP_SubTotal_USD of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TM_BP_SubTotal_USD_AleryIcon, "TM_BP_SubTotal_USD_AleryIcon"), "TM_BP_SubTotal_USD Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "TM_BP_SubTotal_USD of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TM_BP_SubTotal_AleryIcon, "TM_BP_SubTotal_AleryIcon"), "TM_BP_SubTotal_USD Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TM_BP_SubTotal_USD Attribute value and Alery Icon in CostSheets
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnComparingCostSheets"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerficationOnComparingCostSheetsInDetailsPart(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(SeasonValue_FirstCostSheet);
			GettingText(SeasonValue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(SeasonValue_SecondCostSheet);
			GettingTextExpected(SeasonValue_FirstCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Season Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(SeasonValue_AleryIcon, "SeasonAleryIcon"), "Season Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Season Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(SeasonValue_AleryIcon, "SeasonAleryIcon"), "Season Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Season Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(SourceValue_FirstCostSheet);
			GettingText(SourceValue_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(SourceValue_SecondCostSheet);
			GettingTextExpected(SourceValue_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Source Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(SourceValue_AleryIcon, "SourceValue_AleryIcon"), "Source Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Source Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(SourceValue_AleryIcon, "SourceValue_AleryIcon"), "Source Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Source Attribute Value and Alery icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(RFQ_FirstCostSheet);
			GettingText(RFQ_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(RFQ_SecondCostSheet);
			GettingTextExpected(RFQ_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "RFQ Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(RFQ_AleryIcon, "RFQ_AleryIcon"), "RFQ Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "RFQ Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(RFQ_AleryIcon, "RFQ_AleryIcon"), "RFQ Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of RFQ Attribute Value and Alery icon
			CommonFunctions.waitForElementTobeClickable(Quote_FirstCostSheet);
			GettingText(Quote_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(Quote_SecondCostSheet);
			GettingTextExpected(Quote_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Quote Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(Quote_AleryIcon, "Quote_AlerIcon"), "Quote Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Quote Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(Quote_AleryIcon, "Quote_AlerIcon"), "Quote Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Quote Attribute Value and Alery icon
			CommonFunctions.waitForElementTobeClickable(QuoteVendor_FirstCostSheet);
			GettingText(QuoteVendor_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(QuoteVendor_SecondCostSheet);
			GettingTextExpected(QuoteVendor_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Quote Vendor Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(QuoteVendor_AleryIcon, "QuoteVendor_AleryIcon"), "Quote Vendor Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Quote Vendor Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(QuoteVendor_AleryIcon, "QuoteVendor_AleryIcon"), "Quote vendor Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Quote Vendor Attribute Value and Alery icon
			
			CommonFunctions.waitForElementTobeClickable(QuoteVendor_FirstCostSheet);
			GettingText(QuoteVendor_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(QuoteVendor_SecondCostSheet);
			GettingTextExpected(QuoteVendor_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Quote Vendor Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(QuoteVendor_AleryIcon, "QuoteVendor_AleryIcon"), "Quote Vendor Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Quote Vendor Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(QuoteVendor_AleryIcon, "QuoteVendor_AleryIcon"), "Quote vendor Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Quote Vendor Attribute Value and Alery icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(Specification_FirstCostSheet);
			GettingText(Specification_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(Specification_SecondCostSheet);
			GettingTextExpected(Specification_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Specification Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(Specification_AleryIcon, "Specification_AleryIcon"), "Specification Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Specification Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(Specification_AleryIcon, "Specification_AleryIcon"), "Specification Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Specification Attribute Value and Alery icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(ProductColorway_FirstCostSheet);
			GettingText(ProductColorway_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(ProductColorway_SecondCostSheet);
			GettingTextExpected(ProductColorway_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Product Colorway Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ProductColorway_AleryIcon, "ProductColorway_AleryIcon"), "ProductColorway Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Product Colorway Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ProductColorway_AleryIcon, "ProductColorway_AleryIcon"), "ProductColorway Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Product ColorWay Attribute Value and Alery icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(Type_FirstCostSheet);
			GettingText(Type_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(Type_SecondCostSheet);
			GettingTextExpected(Type_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Type Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(Type_AleryIcon, "Type_AleryIcon"), "Type Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Type Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(Type_AleryIcon, "Type_AleryIcon"), "Type Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Type Attribute value and Alery Icons in CostSheets
			CommonFunctions.waitForElementTobeClickable(WhatIf_FirstCostSheet);
			GettingText(WhatIf_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(WhatIf_SecondCostSheet);
			GettingTextExpected(WhatIf_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "What If  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(WhatIf_AleryIcon, "WhatIf_AleryIcon"), "What if Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "What If Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(WhatIf_AleryIcon, "WhatIf_AleryIcon"), "What If Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of What if Attribute Value and Alery icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(Colorways_FirstCostSheet);
			GettingText(Colorways_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(Colorways_SecondCostSheet);
			GettingTextExpected(Colorways_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Colorway CostSheet  Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(Colorways_AleryIcon, "Colorways_AleryIcon"), "Colorway Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "What If Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(Colorways_AleryIcon, "Colorways_AleryIcon"), "Colorway Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Colorway Attribute Value and Alery icon in CostSheets
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnComparingCostSheetsInContentsTableCostSummaryPart"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationOnComparingCostSheetsInGeneralAttributesPart(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ProductType_FirstCostSheet);
			GettingText(ProductType_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(ProductType_SecondCostSheet);
			GettingTextExpected(ProductType_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Product type Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(ProductType_AleryIcon, "Product type AleryIcon"), "Product Type Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Product type Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ProductType_AleryIcon, "Product Type AleryIcon"), "Product Type Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Product Type Attribute value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(CostSheetSequenceNumber_FirstCostSheet);
			GettingText(CostSheetSequenceNumber_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CostSheetSequenceNumber_SecondCostSheet);
			GettingTextExpected(CostSheetSequenceNumber_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Sequence Number Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CostSheetSequenceNumber_AleryIcon, "CostSheetSequenceNumber_AleryIcon"), "Cost Sheet Sequence Number Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Sequence Number Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CostSheetSequenceNumber_AleryIcon, "CostSheetSequenceNumber_AleryIcon"), "Cost Sheet Sequence Number Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Cost Sheet Sequence Number Attribute value and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(Wave_FirstCostSheet);
			GettingText(Wave_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(Wave_SecondCostSheet);
			GettingTextExpected(Wave_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Wave Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(Wave_AleryIcon, "Wave_AleryIcon"), "Wave Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Wave Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(Wave_AleryIcon, "Wave_AleryIcon"), "Wave Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Wave value and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(DomesticOrDI_FirstCostSheet);
			GettingText(DomesticOrDI_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(DomesticOrDI_SecondCostSheet);
			GettingTextExpected(DomesticOrDI_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Domestic/DI Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(DomesticOrDI_AleryIcon, "DomesticOrDI_AleryIcon"), "DomesticOrDI Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Domestic/DI  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(DomesticOrDI_AleryIcon, "DomesticOrDI_AleryIcon"), "DomesticOrDI Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of DomesticOrDI Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(CostSheetStaus_FirstCostSheet);
			GettingText(CostSheetStaus_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CostSheetStaus_SecondCostSheet);
			GettingTextExpected(CostSheetStaus_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Status Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CostSheetStaus_AleryIcon, "CostSheetStaus_AleryIcon"), "Cost Sheet Status  Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Status  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CostSheetStaus_AleryIcon, "CostSheetStaus_AleryIcon"), "Cost Sheet Status Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Cost Sheet Status Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(CostSheetStaus_FirstCostSheet);
			GettingText(CostSheetStaus_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CostSheetStaus_SecondCostSheet);
			GettingTextExpected(CostSheetStaus_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Status Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CostSheetStaus_AleryIcon, "CostSheetStaus_AleryIcon"), "Cost Sheet Status  Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Cost Sheet Status  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CostSheetStaus_AleryIcon, "CostSheetStaus_AleryIcon"), "Cost Sheet Status Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Cost Sheet Status Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(QuoteCurrency_FirstCostSheet);
			GettingText(QuoteCurrency_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(QuoteCurrency_SecondCostSheet);
			GettingTextExpected(QuoteCurrency_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Quote Currecncy Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(QuoteCurrency_AleryIcon, "QuoteCurrency_AleryIcon"), "Quote Currecny  Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Quote Currecncy  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(QuoteCurrency_AleryIcon, "QuoteCurrency_AleryIcon"), "Quote Currecny  Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Quote Currency Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(BOM_FirstCostSheet);
			GettingText(BOM_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(BOM_SecondCostSheet);
			GettingTextExpected(BOM_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "BOM Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(BOM_AleryIcon, "BOM_AleryIcon"), "BOM  Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "BOM Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(BOM_AleryIcon, "BOM_AleryIcon"), "BOM Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of BOM Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate_FirstCostSheet);
			GettingText(CurrencyConversionRate_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate_SecondCostSheet);
			GettingTextExpected(CurrencyConversionRate_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Currency Conversion Rate Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CurrencyConversionRate_AleryIcon, "CurrencyConversionRate_AleryIcon"), "Currency Conversion Rate  Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Currency Conversion Rate  Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CurrencyConversionRate_AleryIcon, "CurrencyConversionRate_AleryIcon"), "Currency Conversion Rate Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Currency Conversion Rate Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(BOMIteration_FirstCostSheet);
			GettingText(BOMIteration_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(BOMIteration_SecondCostSheet);
			GettingTextExpected(BOMIteration_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "BOM Iteration Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(BOMIteration_AleryIcon, "BOMIteration_AleryIcon"), "BOM Ieration Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "BOM Iteration Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(BOMIteration_AleryIcon, "BOMIteration_AleryIcon"), "BOM Ieration Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of BOM Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(CountryOfOrigin_FirstCostSheet);
			GettingText(CountryOfOrigin_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(CountryOfOrigin_SecondCostSheet);
			GettingTextExpected(CountryOfOrigin_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Country of Origin Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(CountryOfOrigin_AleryIcon, "CountryOfOrigin_AleryIcon"), "CountryOfOrigin Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Country of Origin Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CountryOfOrigin_AleryIcon, "CountryOfOrigin_AleryIcon"), "CountryOfOrigin Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Country Of Origin Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(BOMRollUPDate_FirstCostSheet);
			GettingText(BOMRollUPDate_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(BOMRollUPDate_SecondCostSheet);
			GettingTextExpected(BOMRollUPDate_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "BOM Roll Up date Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(BOMRollUPDate_AleryIcon, "BOMRollUPDate_AleryIcon"), "BOMRollUPDate Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "BOM Roll Up date Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(BOMRollUPDate_AleryIcon, "BOMRollUPDate_AleryIcon"), "BOMRollUPDate Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of BOMRollUPDate Attribute and Alery Icon in CostSheets
			CommonFunctions.waitForElementTobeClickable(TargetCost_FirstCostSheet);
			GettingText(TargetCost_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(TargetCost_SecondCostSheet);
			GettingTextExpected(TargetCost_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Target Cost of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(TargetCost_AleryIcon, "TargetCost_AleryIcon"), "TargetCost Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Target Cost of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(TargetCost_AleryIcon, "TargetCost_AleryIcon"), "TargetCost Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of TargetCost Attribute and Alery Icon in CostSheets
			
			CommonFunctions.waitForElementTobeClickable(Comments_FirstCostSheet);
			GettingText(Comments_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(Comments_SecondCostSheet);
			GettingTextExpected(Comments_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Comments of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(Comments_AleryIcon, "Comments_AleryIcon"), "Comments Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Comments of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(Comments_AleryIcon, "Comments_AleryIcon"), "Comments Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Comments Attribute and Alery Icon in CostSheets
			
			
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnComparingCostSheetsInGeneralAttributesPart"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationOnComparingCostSheetsInPrimaryCostSheetPart(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(PrimaryCostSheet_FirstCostSheet);
			GettingText(PrimaryCostSheet_FirstCostSheet);
			CommonFunctions.waitForElementTobeClickable(PrimaryCostSheet_SecondCostSheet);
			GettingTextExpected(PrimaryCostSheet_SecondCostSheet);
			if(ActualValue.equals(ExpectedValue)){
				CommonFunctions.AssertEqualsVerification(ActualValue, ExpectedValue, "Primary Cost Sheet Value of First cost sheet and Second Cost Sheets are not matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(PrimaryCostSheet_AleryIcon, "PrimaryCostSheet_AleryIcon"), "Primary Cost Sheet Alery Icon is appearing.Assertion failed.Please Verify");
			}
			else{
				CommonFunctions.AssertNotEqualsVerification(ActualValue, ExpectedValue, "Primary Cost Sheet Value of First cost sheet and Second Cost Sheets are matched.Assertion failed.Please Verify");
				CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(PrimaryCostSheet_AleryIcon, "PrimaryCostSheet_AleryIcon"), "Primary Cost Sheet Alery Icon is not appearing.Assertion failed.Please Verify");
				}
			//Assertion Verification of Primary Cost Sheet Attribute value and Alery Icon in CostSheets
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOnComparingCostSheetsInPrimaryCostSheetPart"+e);
			throw e;
		}
		return true;
	}
	public static boolean SelectCostSheetDropDownValue(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetListsDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetListsDropDown, data[165], "CostSheetListsDropDown");
			//Selecting the Drop Down Value
			CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectCostSheetDropDownValue"+e);
			throw e;
		}
		return true;
	}
	
	
	
		
	
	
	public static boolean SelectTheCostSheetInVendor(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(TableOfCostSheets));
		    wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetRow));
			CommonFunctions.waitForPageLoaded();
			 JavascriptExecutor jse = (JavascriptExecutor)driver;
			 jse.executeScript("window.scrollBy(0,100)", "");
			CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSelectionCostingUser);
			CommonFunctions.clickButtonOrLink(WhatIfCostSheetSelectionCostingUser, "HyperLink", "VendorCostSheet");
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
		}
		
		catch(Exception e){
		fail=true;
		log.error("Exceptio in SelectTheCostSheetInVendor"+e);
		throw e;
	}
		return true;
}
	
	
	
	
	
	
	
	
	public static boolean TC_16_SubmitIncompleteVendorProductCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Assortment or SolidType
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet 
			CreateRFQ(data);
			//Creating RFQ
			CreateCostSheetTemplate(data);
			//Creating a Cost Sheet template
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			SubmitRequestToVendor(data);
			//Submit the request to vendor
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			SubmitRequestStatusCheck(data);
			//Checking the status of Request Sent
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[220],data[221]);
			//launching the URL
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Assortment or SolidType
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			AssertionVerificationBeforeAddingRetailItemColorWay(data);
			//Assertion verification of error Message before adding a Retail Item Color Way
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[0],data[1]);
			//launching the URL
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Assortment or SolidType
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet 
			AddRetailItemColorWayForCostSheet(data);
			//Adding a Retail Item color way1
			FillingContentTable(data);
			//Filling a Content table data
			AssertionVerificationOfCreatedOfVendorProductCostSheet(data);
			//Assertion Verification of Created Of VendorProductCostSheet
			AddSecondRetailItemColorWay(data);
			//Adding a Second Retail Item color way
			FillingContentTable1(data);
			//Filling a Content table data
			AssertionVerificationOfCreatedSecondRetailItemInProductVendorCostSheet(data);
			//Assertion Verification of added Second Retail Item
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[220],data[221]);
			//launching the URL
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Assortment or SolidType
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			AssertionVerificationAfterAddingRetailItemColorWay(data);
			//Assertion Verification After adding ColorWay
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC60 - Submit Incomplete Vendor Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC60 - Submit Incomplete Vendor Product Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			     }
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_16_SubmitIncompleteVendorProductCostSheet"+e);
			throw e;
		}
		return true;
	}
	public static boolean AddBOMInCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
           for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[179]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
 		     wait.until(ExpectedConditions.titleIs(data[180]));
 		    CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
           }
           CommonFunctions.waitForElementTobeClickable(CostSheetSpecificationDropDown);
           CommonFunctions.selectFromDropDownByIndex(CostSheetSpecificationDropDown, 1);
           //Seelcting the Value Of Specification
           Thread.sleep(2000);
          // wait.until(ExpectedConditions.numberOfElementsToBeMoreThan(BOMDropDownInCostSheet,0));
           CommonFunctions.waitForElementTobeClickable(BOMDropDownInCostSheet);
            CommonFunctions.selectFromDropDownByIndex(BOMDropDownInCostSheet, 1);
 		   //Selecting BOM
           CommonFunctions.waitForElementTobeClickable(SaveButtonOfCostSheet);
           CommonFunctions.clickButtonOrLink(SaveButtonOfCostSheet, "Button", "save Button");
           //Clicking on Save Button
           wait.until(ExpectedConditions.titleIs(data[144]));
           CommonFunctions.waitForPageLoaded();
           CommonFunctions.waitForElementTobeClickable(RFQSelection);
           CommonFunctions.clickButtonOrLink(RFQSelection, "HyperLink", "RFQSelection");
           //Clicking on RFQ 
           wait.until(ExpectedConditions.titleIs(data[27]));
           CommonFunctions.waitForPageLoaded();
           CommonFunctions.waitForElementTobeClickable(ExpandRFQButton);
           CommonFunctions.clickButtonOrLink(ExpandRFQButton, "Button", "ExpandRFQButton");
           //Clicking on + button
           CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AddBOMInCostSheet");
			throw e;
		}
		return true;
	}
	
	
	public static boolean NavigateToContentTable(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetSelection);
			CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "RecentlyCreatedCostSheet");
			//Recently created Cost Sheet Has been clicked
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetTemplateListValue);
			CommonFunctions.clickButtonOrLink(CostSheetTemplateListValue, "HyperLink", "CostSheetTemplateListValue");
			//Clicking cost Sheet Template Value
			CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationBeforeAddingRetailItem"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerificationBeforeAddingRetailItemColorWay(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetSelection);
			CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "RecentlyCreatedCostSheet");
			//Recently created Cost Sheet Has been clicked
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CreateCostSheetsFromTemplate);
			  CommonFunctions.clickButtonOrLink(CreateCostSheetsFromTemplate, "Button", "CreateCostSheetsFromTemplate");
			  //Clicking on CreateCostSheetsFromTemplate 
			  CommonFunctions.waitForPageLoaded();
			  CommonFunctions.waitForElementTobeClickable(CreatedCostSheet);
			  CommonFunctions.clickButtonOrLink(CreatedCostSheet, "HyperLink", "CreatedCostSheet");
			  //Clicking on Created Cost Sheet
			  wait.until(ExpectedConditions.titleIs(data[144]));
			  CommonFunctions.waitForPageLoaded();
			  AddBOMInCostSheet(data);
			CommonFunctions.waitForElementTobeClickable(SubmitQuoteForReviewDropDown);
			Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Quote Status')]//preceding::select[1]")));
		    List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
 		    String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[263]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(SubmitQuoteForReviewDropDown, RequiredValue, "Action DropDown Selection");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
 		     }
            wait.until(ExpectedConditions.visibilityOfElementLocated(ErrorMessageBeforeAddingRetailItem));
            GettingText(ErrorMessageBeforeAddingRetailItem);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[264], "Actual and Expected Error Messages are not matched.Assertion Failed.Please Verify");
            //Assertion verification of error Message
			
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationBeforeAddingRetailItem"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerificationAfterAddingRetailItemColorWay(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetSelection);
			CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "RecentlyCreatedCostSheet");
			//Recently created Cost Sheet Has been clicked
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(SubmitQuoteForReviewDropDown);
			Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Quote Status')]//preceding::select[1]")));
		    List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
 		    String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[263]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(SubmitQuoteForReviewDropDown, RequiredValue, "Action DropDown Selection");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
 		     }
            wait.until(ExpectedConditions.visibilityOfElementLocated(ErrorMessageBeforeAddingRetailItem));
            GettingText(ErrorMessageBeforeAddingRetailItem);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[267], "Actual and Expected Error Messages are not matched.Assertion Failed.Please Verify");
            //Assertion verification of error Message
			
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationBeforeAddingRetailItem"+e);
			throw e;
		}
		return true;
	}
	public static boolean TC_15_CreateVendorRetailItemCostSheet(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			AddSpecification(data);
			//Adding a Specification
			NavigateToCostingTab(data);
			//Navigating to Costing Tab
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet 
			AssertionVerficationOfCostSheetTypefoCostSheet(data);
			//Assertion Verification Of Cost Sheet Type
			CreateVendorCostSheet(data);
			/*//Creating vendor cost Sheet
			CloseOpenedExistingCostSheet();
			//Closing the Opened Cost Sheet 
			SearchingTheCostSheet(data);
			//Searching the Cost Sheet*/
			FillOverHeadTypeValues(data);
			//Fill overHead Type Values
			AssertionVerficationOfCreateCostSheetElements_USD(data);
			//Assertion Verification Of Create Cost Sheet Elements
			UpdatingCostSheet(data);
			//Updating the Currency Unit in Cost Sheet
			AssertionVerficationOfCreateCostSheetElements_HKD(data);
			//Assertion Verification Of Create Cost Sheet Elements
			if(!(fail==true || CommonFunctions.error==true)){
			     log.info("PC34 - Create Vendor Retail Item Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			     }
			     else{
			     log.error("PC34 - Create Vendor Retail Item Cost Sheet TEST CASE FAILED.PLEASE CHECK");
			     }
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in TC_15_CreateVendorRetailItemCostSheet"+e);
				throw e;
			}
			return true;
		}
	public static boolean AssertionVerficationOfCreateCostSheetElements_HKD(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(RetailItemValue);
			GettingText(RetailItemValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[262], "Actual And Expected Retail Item values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Retail Item value
			CommonFunctions.waitForElementTobeClickable(PlasticMaterialvalue);
			GettingText(PlasticMaterialvalue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[254], "Actual And Expected Plastic Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Plastic material Value
			CommonFunctions.waitForElementTobeClickable(PackagingMaterialValue);
			GettingText(PackagingMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[253], "Actual And Expected Packaging Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Packaging Material Value
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue);
			GettingText(ChemicalMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[255], "Actual And Expected Chemical Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Chemical Material Value
			CommonFunctions.waitForElementTobeClickable(PurchasedMaterialvalue);
			GettingText(PurchasedMaterialvalue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[256], "Actual And Expected Purchased Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Purchased Material Value
			CommonFunctions.waitForElementTobeClickable(ElectronicMaterialValue);
			GettingText(ElectronicMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[257], "Actual And Expected Electronic Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Electronic Material Value
			CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialValue);
			GettingText(SoftGoodMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[258], "Actual And Expected SoftGood Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Soft Good Material Value
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborValue);
			GettingText(GeneralDecoLaborValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[259], "Actual And Expected General/Deco Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			CommonFunctions.waitForElementTobeClickable(MoldinglaborCostValue);
			GettingText(MoldinglaborCostValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[260], "Actual And Expected Molding Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			CommonFunctions.waitForElementTobeClickable(OverheadAndMarkUpValue);
			GettingText(OverheadAndMarkUpValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[261], "Actual And Expected Molding Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in FillOverHeadTypeValues"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerficationOfCreateCostSheetElements_HKD_TC31(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(RetailItemValue);
			GettingText(RetailItemValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[262], "Actual And Expected Retail Item values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Retail Item value
			CommonFunctions.waitForElementTobeClickable(PlasticMaterialvalue);
			GettingText(PlasticMaterialvalue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[254], "Actual And Expected Plastic Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Plastic material Value
			CommonFunctions.waitForElementTobeClickable(PackagingMaterialValue);
			GettingText(PackagingMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[253], "Actual And Expected Packaging Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Packaging Material Value
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue);
			GettingText(ChemicalMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[255], "Actual And Expected Chemical Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Chemical Material Value
			CommonFunctions.waitForElementTobeClickable(PurchasedMaterialvalue);
			GettingText(PurchasedMaterialvalue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[256], "Actual And Expected Purchased Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Purchased Material Value
			CommonFunctions.waitForElementTobeClickable(ElectronicMaterialValue);
			GettingText(ElectronicMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[257], "Actual And Expected Electronic Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Electronic Material Value
			CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialValue);
			GettingText(SoftGoodMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[258], "Actual And Expected SoftGood Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Soft Good Material Value
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborValue);
			GettingText(GeneralDecoLaborValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[259], "Actual And Expected General/Deco Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			CommonFunctions.waitForElementTobeClickable(MoldinglaborCostValue);
			GettingText(MoldinglaborCostValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[260], "Actual And Expected Molding Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			CommonFunctions.waitForElementTobeClickable(MarkUp_FirstCostSheet_USD);
			GettingText(MarkUp_FirstCostSheet_USD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[261], "Actual And Expected Molding Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in FillOverHeadTypeValues"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean UpdatingCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		    // System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[179]))
  		     {
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  		     CommonFunctions.waitForPageLoaded();
  		     break;
  		     }
  		     }
            wait.until(ExpectedConditions.titleIs(data[180]));
            CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[241], "CostSheetCurrencyDropDown");
            //Selecting HKD value
            CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
            CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
            wait.until(ExpectedConditions.titleIs(data[144]));
            CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateCostSheet"+e);
			throw e;
		}
		return true;
	}
	public static boolean UpdatingPrimaryCostSheetCheckBox(String [] data) throws Exception{
		try{
			/*for(int i=4;1<=1000;i++){
				costSheetIdentification="//a[contains(text(),'Colorways')]//following::td["+i+"]/a[1]";
				CostSheetSelection1=By.xpath(costSheetIdentification);
				wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection1));
				CostSheetValue = driver.findElement(CostSheetSelection1).getText();
				System.out.println(CostSheetValue);
				if(CostSheetValue.trim().substring(20, 25).equals(ActualValue.trim().substring(19, 24))){
					CommonFunctions.waitForElementTobeClickable(CostSheetSelection1);
					CommonFunctions.clickButtonOrLink(CostSheetSelection1, "CostSheetSelection1");
					log.info("Cost Sheet Name is "+CostSheetValue);
					break;
				}
				else{
					i=i+23;
				}
			}*/
			//a[contains(text(),'Colorways')]//following::td[10]/a[1]
			SearchTheCostSheet(data);
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		    // System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[179]))
  		     {
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  		     CommonFunctions.waitForPageLoaded();
  		     break;
  		     }
  		     }
            wait.until(ExpectedConditions.titleIs(data[180]));
            CommonFunctions.waitForElementTobeClickable(PrimaryCostSheetCheckBox);
            CommonFunctions.clickButtonOrLink(PrimaryCostSheetCheckBox, "PrimaryCostSheetChekBox", "PrimaryCostSheetCheckBox");
            //Checking the Check box Of Primary Cost Sheet
             CommonFunctions.waitForElementTobeClickable(CostSheetWave);
  	          CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetWave, data[161], "CostSheetWave");
  	        //Selecting wave Value
            CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
            CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
            wait.until(ExpectedConditions.titleIs(data[144]));
            CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateCostSheet"+e);
			throw e;
		}
		return true;
	}
	public static boolean BlankUpdate(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		    // System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[179]))
  		     {
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  		     CommonFunctions.waitForPageLoaded();
  		     break;
  		     }
  		     }
            wait.until(ExpectedConditions.titleIs(data[180]));
            CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
            CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
            wait.until(ExpectedConditions.titleIs(data[144]));
            CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in BlankUpdate"+e);
			throw e;
		}
		return true;
	}
	public static boolean BlankUpdate_TC24(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		    // System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[179]))
  		     {
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  		     CommonFunctions.waitForPageLoaded();
  		     break;
  		     }
  		     }
            wait.until(ExpectedConditions.titleIs(data[335]));
            CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
            CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
            wait.until(ExpectedConditions.titleIs(data[144]));
            CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in BlankUpdate"+e);
			throw e;
		}
		return true;
	}
	public static boolean BlankUpdate_TC30(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		    // System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[458]))
  		     {
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  		     CommonFunctions.waitForPageLoaded();
  		     break;
  		     }
  		     }
            wait.until(ExpectedConditions.titleIs(data[335]));
            CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
            CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
            wait.until(ExpectedConditions.titleIs(data[144]));
            CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in BlankUpdate"+e);
			throw e;
		}
		return true;
	}
	public static boolean UpdateCurrenCyConversionRate(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		    // System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[179]))
  		     {
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  		     CommonFunctions.waitForPageLoaded();
  		     break;
  		     }
  		     }
            wait.until(ExpectedConditions.titleIs(data[180]));
            CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[241], "Currency Conversion Type");
            CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
            CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
            wait.until(ExpectedConditions.titleIs(data[144]));
            CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateCurrenCyConversionRate"+e);
			throw e;
		}
		return true;
	}
	public static boolean UpdateCurrenCyConversionRate_TC_24(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		    // System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[179]))
  		     {
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  		     CommonFunctions.waitForPageLoaded();
  		     break;
  		     }
  		     }
            wait.until(ExpectedConditions.titleIs(data[335]));
            CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[241], "Currency Conversion Type");
            CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
            CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
            wait.until(ExpectedConditions.titleIs(data[144]));
            CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateCurrenCyConversionRate"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean UpdateCurrenCyConversionRate_TC_30(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		    // System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[458]))
  		     {
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  		     CommonFunctions.waitForPageLoaded();
  		     break;
  		     }
  		     }
            wait.until(ExpectedConditions.titleIs(data[335]));
            CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
            CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[241], "Currency Conversion Type");
            CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
            CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
            wait.until(ExpectedConditions.titleIs(data[144]));
            CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateCurrenCyConversionRate"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean AssertionVerficationOfCreateCostSheetElements_USD(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(RetailItemValue);
			GettingText(RetailItemValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[242], "Actual And Expected Retail Item values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Retail Item value
			CommonFunctions.waitForElementTobeClickable(PlasticMaterialvalue);
			GettingText(PlasticMaterialvalue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[231], "Actual And Expected Plastic Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Plastic material Value
			CommonFunctions.waitForElementTobeClickable(PackagingMaterialValue);
			GettingText(PackagingMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[230], "Actual And Expected Packaging Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Packaging Material Value
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue);
			GettingText(ChemicalMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[232], "Actual And Expected Chemical Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Chemical Material Value
			CommonFunctions.waitForElementTobeClickable(PurchasedMaterialvalue);
			GettingText(PurchasedMaterialvalue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[233], "Actual And Expected Purchased Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Purchased Material Value
			CommonFunctions.waitForElementTobeClickable(ElectronicMaterialValue);
			GettingText(ElectronicMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[234], "Actual And Expected Electronic Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Electronic Material Value
			CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialValue);
			GettingText(SoftGoodMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[235], "Actual And Expected SoftGood Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Soft Good Material Value
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborValue);
			GettingText(GeneralDecoLaborValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[236], "Actual And Expected General/Deco Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			CommonFunctions.waitForElementTobeClickable(MoldinglaborCostValue);
			GettingText(MoldinglaborCostValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[237], "Actual And Expected Molding Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			CommonFunctions.waitForElementTobeClickable(OverheadAndMarkUpValue);
			GettingText(OverheadAndMarkUpValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[238], "Actual And Expected Molding Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in FillOverHeadTypeValues"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerficationOfCreateCostSheetElements_USD_TC31(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(RetailItemValue);
			GettingText(RetailItemValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[242], "Actual And Expected Retail Item values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Retail Item value
			CommonFunctions.waitForElementTobeClickable(PlasticMaterialvalue);
			GettingText(PlasticMaterialvalue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[231], "Actual And Expected Plastic Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Plastic material Value
			CommonFunctions.waitForElementTobeClickable(PackagingMaterialValue);
			GettingText(PackagingMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[230], "Actual And Expected Packaging Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Packaging Material Value
			CommonFunctions.waitForElementTobeClickable(ChemicalMaterialValue);
			GettingText(ChemicalMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[232], "Actual And Expected Chemical Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Chemical Material Value
			CommonFunctions.waitForElementTobeClickable(PurchasedMaterialvalue);
			GettingText(PurchasedMaterialvalue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[233], "Actual And Expected Purchased Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Purchased Material Value
			CommonFunctions.waitForElementTobeClickable(ElectronicMaterialValue);
			GettingText(ElectronicMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[234], "Actual And Expected Electronic Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Electronic Material Value
			CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialValue);
			GettingText(SoftGoodMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[235], "Actual And Expected SoftGood Material values Are Not Matched.Assertion Failed.Please Verify");
			//Verifying Soft Good Material Value
			CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborValue);
			GettingText(GeneralDecoLaborValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[236], "Actual And Expected General/Deco Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			CommonFunctions.waitForElementTobeClickable(MoldinglaborCostValue);
			GettingText(MoldinglaborCostValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[237], "Actual And Expected Molding Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			CommonFunctions.waitForElementTobeClickable(MarkUp_FirstCostSheet_USD);
			GettingText(MarkUp_FirstCostSheet_USD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[238], "Actual And Expected Molding Labor Material values Are Not Matched.Assertion Failed.Please Verify");
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in FillOverHeadTypeValues"+e);
			throw e;
		}
		return true;
	}
	public static boolean FillOverHeadTypeValues(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForElementTobeClickable(CostSheetRecentValue);
			CommonFunctions.clickButtonOrLink(CostSheetRecentValue, "HyperLink", "CostSheetRecentValue");
			//Clicking on Recently created Cost Sheet
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(OverheadTypeEditButton);
			CommonFunctions.clickButtonOrLink(OverheadTypeEditButton, "RecentValue Of cost Sheet", "CostSheetRecentValue");
			//Clicking on Recent Cost Sheet value
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[27]));
			CommonFunctions.waitForElementTobeClickable(OverHeadTypeTable);
			CommonFunctions.clickButtonOrLink(OverHeadTypeTable, "table", "OverHeadTypeTable");
			CommonFunctions.waitForElementTobeClickable(OverHeadTypeDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(OverHeadTypeDropDown, data[63], "Over head type drop down");
			//Selecting value from drop -down
			CommonFunctions.waitForElementTobeClickable(OverHeadCostTable);
			CommonFunctions.clickButtonOrLink(OverHeadCostTable, "table", "OverHeadTypeTable");
			CommonFunctions.waitForElementTobeClickable(OverHeadCostTextBox);
			CommonFunctions.enterTextInTextboxUpdated(OverHeadCostTextBox, data[240], "Over head type cost text box");
			//Entering  value in Over Head Cost Text Box
			CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
			CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
			//Clicking on Done Button
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[144]));
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in FillOverHeadTypeValues"+e);
			throw e;
		}
		return true;
	}
	public static boolean SelectRecentCostSheetValue(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForElementTobeClickable(CostSheetRecentValue);
			CommonFunctions.clickButtonOrLink(CostSheetRecentValue, "RecentValue Of cost Sheet", "CostSheetRecentValue");
			//Clicking on Recent Cost Sheet value
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SelectRecentCostSheetValue"+e);
			throw e;
		}
		return true;
	}
	public static boolean CreateVendorCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ColorWayFirstOption);
			CommonFunctions.clickButtonOrLink(ColorWayFirstOption, "First Option", "ColorWay First Option");
			//Clicking on the First Option 
			CommonFunctions.waitForElementTobeClickable(ColorwayAddButton);
			CommonFunctions.clickButtonOrLink(ColorwayAddButton, "Button", "Add Button");
			//Clicking on Add Button
			CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "Currency Drop Down");
			//Selecting the Value from Cost Sheet Currency Drop down
			  CommonFunctions.gettingParentWindow();
	            CommonFunctions.waitForElementTobeClickable(FactoryCodeHyperLink);
	            CommonFunctions.clickButtonOrLink(FactoryCodeHyperLink, "HyperLink", "FactoryCode");
	            //Clicking on Factory Code
	            CommonFunctions.switchingChildWindow();
	            CommonFunctions.waitForElementTobeClickable(NameTextBox);
	            CommonFunctions.enterTextInTextboxUpdated(NameTextBox, data[159], "NameTextBox");
	            //Entering the value In Name Text box
	            CommonFunctions.waitForElementTobeClickable(SearchButton);
	            CommonFunctions.clickButtonOrLink(SearchButton, "Button", "SerachButton");
	            //Clicking on Search Button
	            CommonFunctions.waitForPageLoaded();
	            CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
	            CommonFunctions.clickButtonOrLink(ChooseColorWay, "Option", "Choose Button");
	            //Clicking on Choose Button
	            CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(PlasticMaterialTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(PlasticMaterialTextBox, data[231], "Plastic material Text Box");
			    //Entering the value in plastic material text box
			    CommonFunctions.waitForElementTobeClickable(PackagingMaterialTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(PackagingMaterialTextBox, data[230], "packaging material Text Box");
			    //Entering the value in packaging material text box
			    CommonFunctions.waitForElementTobeClickable(ChemicalMaterialTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(ChemicalMaterialTextBox, data[232], "chemical material Text Box");
			    //Entering the value in Chemical material text box
			    CommonFunctions.waitForElementTobeClickable(PurchasedMaterialTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(PurchasedMaterialTextBox, data[233], "Purchased material Text Box");
			    //Entering the value in Purchased material text box
			    CommonFunctions.waitForElementTobeClickable(ElectronicMaterialTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(ElectronicMaterialTextBox, data[234], "Electronic material Text Box");
			    //Entering the value in Electronic material text box
			    CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(SoftGoodMaterialTextBox, data[235], "Soft Good material Text Box");
			    //Entering the value in Soft Good material text box
			    CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(GeneralDecoLaborTextBox, data[236], "General Deco labor material Text Box");
			    //Entering the value in Soft Good material text box
			    CommonFunctions.waitForElementTobeClickable(MoldinglaborCostTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(MoldinglaborCostTextBox, data[237], "Molding labor material Text Box");
			    //Entering the value in Molding Labor material text box
			    CommonFunctions.waitForElementTobeClickable(OverheadAndMarkUpTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(OverheadAndMarkUpTextBox, data[238], "OverHead and markUp material Text Box");
			    //Entering the value in OverHead and Mark up material text box
			    CommonFunctions.waitForElementTobeClickable(Product.SaveBtn);
			    CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Button", "Save");
			    //Clicking on Save Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[144]));
			    
		}
			catch(Exception e){
				fail=true;
				log.error("Exception in CreateVendorCostSheet"+e);
				throw e;
			}
			return true;
			
			}
		
	public static boolean CloseOpenedExistingCostSheet() throws Exception{
		try{
		   WebDriverWait wait1 = new WebDriverWait(driver,10);
		   wait1.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(CostSheetDropDown));
		   CommonFunctions.waitForPageLoaded();
			try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(CloseCostSheet));
			CommonFunctions.clickButtonOrLink(CloseCostSheet, "Image", "Closing Opened Cost Sheet");
			//Closing the Opened Cost Sheet
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in CloseOpenedExistingCostSheet"+e);
				throw e;
			}
		}
		
	catch(Exception e){
			log.info("Cost Sheet Have More than One in the List");
		}
		return true;
		
		}
	
	public static boolean CloseOpenedExistingRFQ() throws Exception{
		try{
		   WebDriverWait wait1 = new WebDriverWait(driver,7);
		   wait1.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(RFQUpdateDropDown));
		   CommonFunctions.waitForPageLoaded();
			try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(CloseCostSheet));
			CommonFunctions.clickButtonOrLink(CloseCostSheet, "Image", "Closing Opened Cost Sheet");
			//Closing the Opened Cost Sheet
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in CloseOpenedExistingCostSheet"+e);
				throw e;
			}
		}
		
	catch(Exception e){
			log.info("Cost Sheet Have More than One in the List");
		}
		return true;
		
		}
	
	
	public static boolean CloseOpenedRFQ() throws Exception{
		try{
		   WebDriverWait wait1 = new WebDriverWait(driver,7);
		   wait1.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(CostSheetDropDown));
		   CommonFunctions.waitForPageLoaded();
			try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(CloseCostSheet));
			CommonFunctions.clickButtonOrLink(CloseCostSheet, "Image", "Closing Opened Cost Sheet");
			//Closing the Opened Cost Sheet
			}
			catch(Exception e){
				fail=true;
				log.error("Exception in CloseOpenedRFQ"+e);
				throw e;
			}
		}
		
	catch(Exception e){
			log.info("Cost Sheet Have More than One in the List");
		}
		return true;
		
		}
	
	public static boolean TC_1_ManualInputWaveForecastQuantityWithoutPercentageCalculation(String [] data) throws Exception{
		try{
			CreateProdFromLineSheetForSanitySuite(data);
			//Creating a product from line sheet
			EditWaveRequirement2(data);
			//Navigating into Edit Multi -Object collection Page
			enterWaveForecastQuantityValuesWR2(data);
			//Entering the Values on Wave Forecast Quantity Value 2
			AssertionVerificationOnForecastQuantity(data);
			//Assertion verification of Forecast Quantity
			UpdateGlobalForecast(data);
			//updating global forecast
			AssertionVerificationOnForecastQuantity(data);
			//Assertion verification of Forecast Quantity after adding Global Forecast Unit Values
			 if(!(fail==true || CommonFunctions.error==true)){
				    log.info("M04 - Update Wave Forecast Quantities - Manual TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
				    }
				    else{
				    log.error("M04 - Update Wave Forecast Quantities - Manual TEST CASE FAILED.PLEASE CHECK");
				    }
			      
		    
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in ManualInputWaveForecastQuantityWithoutPercentageCalculation"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean TC_2_WaveForecastQuantityBasedOnForecastPercentageCalculation(String [] data) throws Exception{
		try{
			CreateProdFromLineSheetForSanitySuite(data);
			//Creating a product from line sheet
			EditWaveRequirement2(data);
			//Navigating into Edit Multi -Object collection Page
			enterWaveForecastQuantityValuesWR2(data);
			//Entering the Values on Wave Forecast Quantity Value 2
			UpdateGlobalForecastForWaveForecastPercentage(data);
			//Updating global forecast with un ckecking the Manual Input wave Forecast Check Box
			EditWaveRequirement2(data);
			//Going to edit multi-object collection page
			enterPercentageWaveForecastValuesWR2(data);
			//Entering a Value in WR2 % Wave Forecast Value
			CommonFunctions.waitForElementTobeClickable(labelWaveRequirements2Edit);
			 CommonFunctions.clickButtonOrLink(labelWaveRequirements2Edit, "link", "Details");
			 CommonFunctions.waitForPageLoaded();
			 wait.until(ExpectedConditions.titleIs(data[27]));
			 //Moving to Multi-collection page
			 AsserionVerficationOfenterWaveForecastQuantityValuesWR2(data);
				//Entering the Values on Wave Forecast Quantity Value 2
			 wait.until(ExpectedConditions.titleIs(data[26]));
			 AssertionVerficationOfForecastQuantity(data);
			 //Assertion verification of Forecast Quantity
			 if(!(fail==true || CommonFunctions.error==true)){
				    log.info("M05 - Update Wave Forecast Quantities - Automatic TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
				    }
				    else{
				    log.error("M05 - Update Wave Forecast Quantities - Automatic TEST CASE FAILED.PLEASE CHECK");
				    }
			      
			  
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_2_WaveForecastQuantityBasedOnForecastPercentageCalculation"+e);
			throw e;
		}
		return true;
	}

	
	
	public static boolean TC_3_RemoveProductFromPlaceholderFromAssocProdTable(String [] data) throws Exception{
		try{
			searchPlaceHolder(data);
		    //Searching a Existing Place Holder
			CheckOrChangePlaceHolderStatus(data);
			//Checking Place Holder Status is in Released or not if not it will change 
			CreateNewProductForPlaceHolder(data);
			//Create a Product for PleaseHolder
			NavigateToDetailsTab(data);
			//Navigate to Details Page
			searchPlaceHolder(data);
		    //Searching a Existing Place Holder again
			ProductRemovalFromAssociatedProducts(data);
			//Product removal from Associated products
			AssertionVerificationOfRemovedProduct();
			//Assertion Verification f removed Product
			 if(!(fail==true || CommonFunctions.error==true)){
			    log.info("R2.5-PD19 - Remove Product from Placeholder from Assoc prod table for Admin User Role TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			    }
			    else{
			    log.error("R2.5-PD19 - Remove Product from Placeholder from Assoc prod table for Admin User Role TEST CASE FAILED.PLEASE CHECK");
			    }
		      }
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_3_RemoveProductFromPlaceholderFromAssocProdTable"+e);
			throw e;
		}
		return true;
	}

	public static boolean TC_4_5_6_RemoveProductFromPlaceholderFromAssocProdTable(String [] data) throws Exception{
		try{
			searchPlaceHolder(data);
		    //Searching a Existing Place Holder
		//	CheckOrChangePlaceHolderStatus(data);
			//Checking Place Holder Status is in Released or not if not it will change 
			AssertionVerificationOfNonAccessUser(data);
			//Assertion verification 
			 if(!(fail==true || CommonFunctions.error==true)){
			    log.info("R2.5-PD19 - Remove Product from Placeholder from Assoc prod table for GM/PMO/RM User Role TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			    }
			    else{
			    log.error("R2.5-PD19 - Remove Product from Placeholder from Assoc prod table for GM/PMO/RM User Role TEST CASE FAILED.PLEASE CHECK");
			    }
		      }
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_4_5_6_RemoveProductFromPlaceholderFromAssocProdTable"+e);
			throw e;
		}
		return true;
	}
	public static boolean TC_7_RemoveProductFromPlaceholderFromLineSheet(String [] data) throws Exception{
		try{
			searchPlaceHolder(data);
		    //Searching a Existing Place Holder
			CheckOrChangePlaceHolderStatus(data);
			//Checking Place Holder Status is in Released or not if not it will change 
			CreateNewProductForPlaceHolder(data);
			//Create a Product for PleaseHolder
			NavigateToDetailsTab(data);
			//Navigate to Details Page
			EnterProductAndPlaceHolderDetailsInLineSheet(data);
			//Entering the Place Holder and Product Values
			RemoveProductFromLineSheet(data);
			//Remove Product from LineSheet
			AssertionVerificationOfRemovedProductFromLineSheet(data);
			//Assertion VericationOfRemoved product
			
			 if(!(fail==true || CommonFunctions.error==true)){
			    log.info("R2.5-PD20 - Remove Product from Placeholder from Line Sheet for Admin User Role TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			    }
			    else{
			    log.error("R2.5-PD20 - Remove Product from Placeholder from Line Sheet for Admin User Role TEST CASE FAILED.PLEASE CHECK");
			    }
		      }
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_7_RemoveProductFromPlaceholderFromLineSheet"+e);
			throw e;
		}
		return true;
	}
	public static boolean TC_8_9_10_RemoveProductFromPlaceholderFromLineSheet(String [] data) throws Exception{
		try{
			searchPlaceHolder(data);
		    //Searching a Existing Place Holder
			PresenceOfSearchPlaceHolderProduct(data);
			//Searching for a Product in PlaceHolder
		    EnterProductAndPlaceHolderDetailsInLineSheet(data);
			//Entering the Place Holder and Product Values
		    AssertionVerificationOfProductRemovalForNonValidUser(data);
			//Remove Product from LineSheet
			 if(!(fail==true || CommonFunctions.error==true)){
			    log.info("R2.5-PD20 - Remove Product from Placeholder from Line Sheet for GM/MPO/RM User Role  TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
			    }
			    else{
			    log.error("R2.5-PD20 - Remove Product from Placeholder from Line Sheet for GM/MPO/RM User Role  TEST CASE FAILED.PLEASE CHECK");
			    }
		      }
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_8_9_10_RemoveProductFromPlaceholderFromLineSheet"+e);
			throw e;
		}
		return true;
	}
	
	
	
	public static boolean TC_11_CreateVendorProductCostSheetTemplate(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Assortment or SolidType
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			CreateRFQ(data);
			//Creating RFQ
			CreateCostSheetTemplate(data);
			//Creating a Cost Sheet template
			AddRetailItemColorWay(data);
			//Adding a Retail Item color way
			FillingContentTable(data);
			//Filling a Content table data
			AssertionVerificationOfCreatedOfVendorProductCostSheet(data);
			//Assertion Verification of Created Of VendorProductCostSheet
			 if(!(fail==true || CommonFunctions.error==true)){
				    log.info("PC42 - Create Vendor Product Cost Sheet Template TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
				    }
				    else{
				    log.error("PC42 - Create Vendor Product Cost Sheet Template TEST CASE FAILED.PLEASE CHECK");
				    }
			      
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_11_CreateVendorProductCostSheetTemplate"+e);
			throw e;
			}
		return true;
	}
	
	public static boolean TC_12_CreateVendorProductCostSheetFromTemplate(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Assortment or SolidType
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			CreateRFQ(data);
			//Creating RFQ
			CreateCostSheetTemplate(data);
			//Creating a Cost Sheet template
			AddRetailItemColorWay(data);
			//Adding a Retail Item color way
			FillingContentTable(data);
			//Filling a Content table data
			//UpdateCostSheet(data);
			//Updating a Cost Sheet
			NaigateToRFQ(data);
			//Navigating to RFQ again
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			SubmitRequestToVendor(data);
			//Submit the request to vendor
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			SubmitRequestStatusCheck(data);
			//Checking the status of Request Sent
			AssertionVerficationOfInternalUseCostSheetElements(data);
			//Verification of Internal Use Elements
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[220],data[221]);
			//Launching with the Vendor user
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Assortment or SolidType
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			SearchingTheCostSheet(data);
			//Searching the Cost Sheet
			CreateWhatIfCostSheetFromVendorForAssortmentOrSolid(data);
			//Creating a What If cost Sheet
			AssertionVerficationOfCostSheetElements(data);
			//Assertion Verification Of Cost Sheet Elements
			
			 if(!(fail==true || CommonFunctions.error==true)){
				    log.info("R2.5-PC41 - Create Vendor Product Cost Sheet from Template TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
				    }
				    else{
				    log.error("R2.5-PC41 - Create Vendor Product Cost Sheet from Template TEST CASE FAILED.PLEASE CHECK");
				    }
			      
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_12_CreateVendorProductCostSheetFromTemplate"+e);
			throw e;
			}
		return true;
	}
	public static boolean NaigateToRFQ(String [] data) throws Exception{
		try{
			    wait.until(ExpectedConditions.visibilityOfElementLocated(RFQHyperLink));
				CommonFunctions.waitForPageLoaded();
				CommonFunctions.clickButtonOrLink(RFQHyperLink, "HyperLink", "RFQHyperLink");
				//Clicking on RFQ tab
				wait.until(ExpectedConditions.titleIs(data[144]));
				CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NaigateToRFQ"+e);
			throw e;
			}
		return true;
	}
	
		
	public static boolean TC_13_CreateVendorWhatIfProductCostSheet(String [] data) throws Exception{
		try{
			CreateProdFromLineSheetForSanitySuite_TC24(data);
			//Create a Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			AddVendorSource(data);
			//Adding a Vendor Source
			ApproveVendorSource(data);
			//Approving the Vendor Source
			navigateSpecificationThroughSideBar(data);
			//Navigate Specification Through Side Bar
			CreateSpecification(data);
			//Creating a Specification
			CreateColorway(data);
			//Creating a Colorway
			CopyLinkProductRetailItem1(data);
			//Copy Retail Item 1
			SearchAssortmentProduct(data);
			//Searching Assortment/Solid Product
			CopyLinkProductRetailItem2(data);
			//Create Retail Item 2
		    CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Open  Browser
			launchApp(data[461],data[462]);
			//Launch  App
			SearchAssortmentProduct(data);
			//Searching Assortment/Solid Product
			CreateWhatIFCostSheetForAssortment_SolidthroughRFQ(data);
			//Create What If Cost Sheet For Assortment/Solid
			SearchTheRFQForTC_30(data);
			//Searching the RFQ
			AddContentTableValuesThroughRFQHyperLinkForTC_30(data);
			//Adding a Content table values
			SubmitRequestThroughCostSheet_TC30(data);
			//Submitting the Request Through Vendors
			NavigateToRFQThroughSideBar(data);
			//Clicking RFQ
			SearchingTheCostSheet(data);
			//Searching the RFQ
			SubmitRequestStatusCheck(data);
			//Checking the status of Request Sent
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//opening the Browser
			launchApp(data[220],data[221]);
			//Launching the URL
			SearchRetailItemProduct1(data);
			//Searching the Retail Item Product1
			CreateVendorCostSheet_RetailItem(data);
			//Create a Cost Sheet For Retail Item A
			SearchRetailItemProduct2(data);
			//Seraching the Retail Item 2
			CreateVendorCostSheet_RetailItem(data);
			//Create a Cost Sheet For Retail Item B
			SearchAssortmentProduct(data);
			//Searching Assortment/Solid Product
			NavigatingToCostingTab(data);
			//Navigate to Costing tab
			SearchTheRFQForTC_30(data);
			//navigating to the particular RFQ
			UpdateContentTable_VendorUserforTC_30(data);
			//Updating the Contents Table
			BlankUpdate_TC30(data);
			//Doing a Blank Update
			AssertionVerificationWhatIfCostSheetTypeAndCostSheetUpdation(data);
			//Updating the What If Cost SHeet Values
			AssertionVerificationOfCostSheetElements(data);
			//Verification Of Cost Sheet Elements
			UpdateCostSheetWhatIf_TC30(data);
			//Update Cost Sheet What If
			AssertionVerficationAfterUpdation(data);
			//Assertion Verification of After Updation of cost Sheet What If
			AssertionVerficationOnCostingUser(data);
			//Assertion Verification of Forecast Quantity and Totals Cost

			
			 if(!(fail==true || CommonFunctions.error==true)){
				    log.info("PC44 - Create Vendor What-If Product Cost Sheet TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
				    }
				    else{
				    log.error("PC44 - Create Vendor What-If Product Cost Sheet TEST CASE FAILED.PLEASE CHECK");
				    }
			      
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_13_CreateVendorWhatIfProductCostSheet"+e);
			throw e;
			}
		return true;
	}
	
	public static boolean AssertionVerificationWhatIfCostSheetTypeAndCostSheetUpdation(String [] data) throws Exception{
	
			try{
				CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
				Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
			     List<WebElement> allOptions=dropdDown.getOptions();
	            for(int i=0;i<allOptions.size();i++){
	  		     String RequiredValue=allOptions.get(i).getText();
	  		    // System.out.println(RequiredValue);
	  		     if(RequiredValue.contains(data[458]))
	  		     {
	  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
	  		     CommonFunctions.waitForPageLoaded();
	  		     break;
	  		     }
	  		     }
	            wait.until(ExpectedConditions.titleIs(data[335]));
	            CommonFunctions.waitForElementTobeClickable(CostSheetType);
				GettingText(CostSheetType);
				CommonFunctions.AssertEqualsVerification(ActualValue, data[192], "Actual and Expected Cost sheet Type are not matched.Please Verify");
				log.info(" *** Validate Cost Sheet Type - validated ***");
				CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
			    CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "CyrrencyDropDown");
			    //Selecting the Currency Value
			    CommonFunctions.waitForElementTobeClickable(CostSheetComments);
			    CommonFunctions.enterTextInTextboxUpdated(CostSheetComments, data[190], "Comments Text Box");
			    //Entering the Comments inside the Comment Text Box
			    CommonFunctions.gettingParentWindow();
	            CommonFunctions.waitForElementTobeClickable(FactoryCodeHyperLink);
	            CommonFunctions.clickButtonOrLink(FactoryCodeHyperLink, "HyperLink", "FactoryCode");
	            //Clicking on Factory Code
	            CommonFunctions.switchingChildWindow();
	            CommonFunctions.waitForElementTobeClickable(NameTextBox);
	            CommonFunctions.enterTextInTextboxUpdated(NameTextBox, data[184], "NameTextBox");
	            //Entering the value In Name Text box
	            CommonFunctions.waitForElementTobeClickable(SearchButton);
	            CommonFunctions.clickButtonOrLink(SearchButton, "Button", "SerachButton");
	            //Clicking on Search Button
	            CommonFunctions.waitForPageLoaded();
	            CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
	            CommonFunctions.clickButtonOrLink(ChooseColorWay, "Option", "Choose Button");
	            //Clicking on Choose Button
	            CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForElementTobeClickable(ProductDevelopmentCost);
			    CommonFunctions.clearTextBox(ProductDevelopmentCost, "ProductDevelopmentCost");
			    CommonFunctions.enterTextInTextboxUpdated(ProductDevelopmentCost, data[193], "ProductDevelopmentCost");
			    //Entering ProductDevelopmentCost value
			    CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterial);
			    CommonFunctions.clearTextBox(MasterCartonPackagingMaterial, "MasterCartonPackagingMaterial");
			    CommonFunctions.enterTextInTextboxUpdated(MasterCartonPackagingMaterial, data[194], "MasterCartonPackagingMaterial");
			    //Entering MasterCartonPackagingMaterial value
			    CommonFunctions.waitForElementTobeClickable(MasterCortonLaborCost);
			    CommonFunctions.clearTextBox(MasterCortonLaborCost, "MasterCortonLaborCost");
			    CommonFunctions.enterTextInTextboxUpdated(MasterCortonLaborCost, data[195], "MasterCortonLaborCost");
			    //Entering MasterCortonLaborCost value
			    CommonFunctions.waitForElementTobeClickable(MisCellaneousCost);
			    CommonFunctions.clearTextBox(MisCellaneousCost, "MisCellaneousCost");
			    CommonFunctions.enterTextInTextboxUpdated(MisCellaneousCost, data[196], "MisCellaneousCost");
			    //Entering MisCellaneousCost value
			    CommonFunctions.waitForElementTobeClickable(ProductMarkUp);
			    CommonFunctions.clearTextBox(ProductMarkUp, "ProductMarkUp");
			    CommonFunctions.enterTextInTextboxUpdated(ProductMarkUp, data[197], "ProductMarkUp");
			   //Entering ProductMarkUp value
			    CommonFunctions.waitForElementTobeClickable(Discount);
			    CommonFunctions.clearTextBox(Discount, "Discount");
			    CommonFunctions.enterTextInTextboxUpdated(Discount, data[198], "Discount");
			   //Entering Discount value
			    CommonFunctions.waitForElementTobeClickable(Length);
			    CommonFunctions.clearTextBox(Length, "Length");
			    CommonFunctions.enterTextInTextboxUpdated(Length, data[199], "Length");
			   //Entering Length value
			    CommonFunctions.waitForElementTobeClickable(Width);
			    CommonFunctions.clearTextBox(Width, "Width");
			    CommonFunctions.enterTextInTextboxUpdated(Width, data[200], "Width");
			   //Entering Width value
			    CommonFunctions.waitForElementTobeClickable(Height);
			    CommonFunctions.clearTextBox(Height, "Height");
			    CommonFunctions.enterTextInTextboxUpdated(Height, data[201], "Height");
			   //Entering Height value
			    CommonFunctions.waitForElementTobeClickable(FOBHongKongByFCL);
			    CommonFunctions.clearTextBox(FOBHongKongByFCL, "FOBHongKongByFCL");
			    CommonFunctions.enterTextInTextboxUpdated(FOBHongKongByFCL, data[202], "FOBHongKongByFCL");
			   //Entering FOBHongKongByFCL value
			    CommonFunctions.waitForElementTobeClickable(FOBHongKongByLCL);
			    CommonFunctions.clearTextBox(FOBHongKongByLCL, "FOBHongKongByLCL");
			    CommonFunctions.enterTextInTextboxUpdated(FOBHongKongByLCL, data[203], "FOBHongKongByLCL");
			   //Entering FOBHongKongByLCL value
			    CommonFunctions.waitForElementTobeClickable(FOBChinaByFCL);
			    CommonFunctions.clearTextBox(FOBChinaByFCL, "FOBChinaByFCL");
			    CommonFunctions.enterTextInTextboxUpdated(FOBChinaByFCL, data[204], "FOBChinaByFCL");
			   //Entering FOBChinaByFCL value
			    CommonFunctions.waitForElementTobeClickable(FOBChinaByLCL);
			    CommonFunctions.clearTextBox(FOBChinaByLCL, "FOBChinaByLCL");
			    CommonFunctions.enterTextInTextboxUpdated(FOBChinaByLCL, data[205], "FOBChinaByLCL");
			   //Entering FOBChinaByLCL value
			    CommonFunctions.waitForElementTobeClickable(FOBOthersByFCL);
			    CommonFunctions.clearTextBox(FOBOthersByFCL, "FOBOthersByFCL");
			    CommonFunctions.enterTextInTextboxUpdated(FOBOthersByFCL, data[206], "FOBOthersByFCL");
			   //Entering FOBOthersByFCL value
			    CommonFunctions.waitForElementTobeClickable(FOBOthersByLCL);
			    CommonFunctions.clearTextBox(FOBOthersByLCL, "FOBOthersByLCL");
			    CommonFunctions.enterTextInTextboxUpdated(FOBOthersByLCL, data[207], "FOBOthersByLCL");
			   //Entering FOBOthersByLCL value
			    CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
			    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "WhatIfCostSheetSaveButton");
			    //Clicking WhatIfCostSheetSaveButton 
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[144]));
				
			
				
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationWhatIfCostSheetTypeAndCostSheetUpdation"+e);
			throw e;
			}
			return true;
	}
	
	public static boolean TC_14_CreateVendorRetailItemCostSheetFromTemplate(String [] data) throws Exception{
		try{
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			CreateRFQ(data);
			//Creating RFQ
			CreateCostSheetTemplateOfRetailItem(data);
			//Creating a Cost Sheet template
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			SubmitRequestToVendor(data);
			//Submit the request to vendor
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			SubmitRequestStatusCheck(data);
			//Checking the status of Request Sent
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			//Opening the Browser
			launchApp(data[220],data[221]);
			//Logging in with new user
			navigateToProduct(data);
			//Navigating to product page
			SearchProduct(data);
			//Selecting Retail Item Product
			NavigateToDetailsTab(data);
			//Navigating to details Tab
			ClickSeasonAndSource(data);
			//Selecting Season and Source
			navigateToRFQTab(data);
			//Navigating to RFQ Tab
			SearchingTheCostSheet(data);
			//Search the Recently Created Cost Sheet
			CreateWhatIfCostSheetFromVendorForReatilItem(data);
			//Creating a What If cost Sheet
			AssertionVerificationOfWhatIfCostSheetElements(data);
			//Assertion Verification Of What If CostSheet Elements Value
			 if(!(fail==true || CommonFunctions.error==true)){
		     log.info("PC43 - Create Vendor Retail Item Cost Sheet from Template TEST CASE HAS BEEN VERIFIED SUCCESSFULLY");
		     }
		     else{
		     log.error("PC43 - Create Vendor Retail Item Cost Sheet from Template TEST CASE FAILED.PLEASE CHECK");
		     }
			      
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in TC_14_CreateVendorRetailItemCostSheetFromTemplate"+e);
			throw e;
			}
		return true;
	}
	
	
	
	
	public static boolean AssertionVerificationOfWhatIfCostSheetElements(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(WhatIfNameAttribute);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(WhatIfNameAttribute, "Name Attribute of What If Cost Sheet"), "What if Cost Sheet name Attribute Name is Not dispalyed.Assertion failed.please check");
			//Assertion verification of What If name Attribute
			GettingText(WhatIfNameAttribute);
			log.info(ActualValue);
			CommonFunctions.waitForElementTobeClickable(WhatIfTypeAttribute);
			GettingText(WhatIfTypeAttribute);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[181],"Actual and Expeced What if Cost Sheet Type Attribute is Not matched.Assertion failed.please check");
		   //Verifying What If Type Attribute
			CommonFunctions.waitForElementTobeClickable(WhatIfProductNameAttribute);
			GettingText(WhatIfProductNameAttribute);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[6],"Actual and Expeced What if Cost Sheet Product Name Attribute is Not matched.Assertion failed.please check");
		   //Verifying What If Product Name Attribute
			CommonFunctions.waitForElementTobeClickable(WhatIfQuoteCurrency);
			GettingText(WhatIfQuoteCurrency);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[168],"Actual and Expeced What if Quote Currency Product Name Attribute is Not matched.Assertion failed.please check");
		   //Verifying WhatIfQuoteCurrency Attribute
			CommonFunctions.waitForElementTobeClickable(WhatIfCurrencyConversionRate);
			GettingText(WhatIfCurrencyConversionRate);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[175],"Actual and Expeced What if Quote Currency conversion rate Attribute is Not matched.Assertion failed.please check");
		   //Verifying WhatIfCurrencyConversionRate Attribute
			CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetStatus);
			GettingText(WhatIfCostSheetStatus);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[182],"Actual and Expeced What if Cost Sheet Attribute is Not matched.Assertion failed.please check");
		   //Verifying WhatIfCostSheetStatus Attribute
			CommonFunctions.waitForElementTobeClickable(WhatIfColorWay);
			GettingText(WhatIfColorWay);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[160],"Actual and Expeced What if Colorway Attribute is Not matched.Assertion failed.please check");
		   //Verifying WhatIfColorWay Attribute
			CommonFunctions.waitForElementTobeClickable(WhatIfColorwayRepresentation);
			GettingText(WhatIfColorwayRepresentation);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[160],"Actual and Expeced What if Colorway Representation Attribute is Not matched.Assertion failed.please check");
		   //Verifying WhatIfColorWay Attribute
		}
		catch(Exception e){
				fail=true;
				log.error("Exception in AssertionVerificationOf"+e);
				throw e;
			}
			return true;
}
	public static boolean CreateWhatIfCostSheetFromVendorForReatilItem(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection));
			  CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "Cost Sheet HyperLink");
			  //Clicking on CostSheet HyperLink
			  CommonFunctions.waitForPageLoaded();
			  CommonFunctions.waitForElementTobeClickable(CreateCostSheetsFromTemplate);
			  CommonFunctions.clickButtonOrLink(CreateCostSheetsFromTemplate, "Button", "CreateCostSheetsFromTemplate");
			  //Clicking on CreateCostSheetsFromTemplate 
			  CommonFunctions.waitForPageLoaded();
			  CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(WhatIfIdentification, "What If Cost Sheet"), "What if cost ot generated.assertion failed.pleasecheck");
			  GettingText(WhatIfIdentification);
			  log.info("What if cost Sheet is created and is "+ActualValue);
		      CommonFunctions.waitForElementTobeClickable(WhatIfIdentification);
		      CommonFunctions.clickButtonOrLink(WhatIfIdentification, "HyperLink", "WhatIfCostSheet");
		      //Clicking on generated What iF cost Sheet
		      CommonFunctions.waitForPageLoaded();
		      wait.until(ExpectedConditions.visibilityOfElementLocated(WhaIfCostSheetTab));
		      
		      
		    }
			catch(Exception e){
				fail=true;
				log.error("Exception in CreateWhatIfCostSheetFromVendor"+e);
				throw e;
			}
			return true;
		}
	public static boolean CreateWhatIfCostSheetFromVendorForAssortmentOrSolid(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection));
			  CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "Cost Sheet HyperLink");
			  //Clicking on CostSheet HyperLink
			  CommonFunctions.waitForPageLoaded();
			  CommonFunctions.waitForElementTobeClickable(CreateCostSheetsFromTemplate);
			  CommonFunctions.clickButtonOrLink(CreateCostSheetsFromTemplate, "Button", "CreateCostSheetsFromTemplate");
			  //Clicking on CreateCostSheetsFromTemplate 
			  wait.until(ExpectedConditions.visibilityOfElementLocated(WhatIfUdentificationOfAssortmentOrSolid));
			  CommonFunctions.waitForPageLoaded();
			  CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(WhatIfUdentificationOfAssortmentOrSolid, "What If Cost Sheet"), "What if cost ot generated.assertion failed.pleasecheck");
			  GettingText(WhatIfUdentificationOfAssortmentOrSolid);
			  log.info("What if cost Sheet is created and is "+ActualValue);
		      CommonFunctions.waitForElementTobeClickable(WhatIfUdentificationOfAssortmentOrSolid);
		      CommonFunctions.clickButtonOrLink(WhatIfUdentificationOfAssortmentOrSolid, "HyperLink", "WhatIfCostSheet");
		      //Clicking on generated What iF cost Sheet
		      CommonFunctions.waitForPageLoaded();
		      wait.until(ExpectedConditions.visibilityOfElementLocated(WhaIfCostSheetTab));
		     
		    }
			catch(Exception e){
				fail=true;
				log.error("Exception in CreateWhatIfCostSheetFromVendor"+e);
				throw e;
			}
			return true;
		}
	public static boolean SubmitRequestStatusCheck(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(RequestStatus);
			GettingText(RequestStatus);
		
			if(ActualValue.equals(data[229])){
			CommonFunctions.AssertEqualsVerification(ActualValue, data[229], "Request status is not updated as 'RequestSent'.Assertion failed.Please check");
			//Checking the status of the Cost Sheet
			 wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection));
			    CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "Cost Sheet HyperLink");
			    //Clicking on CostSheet HyperLink
			    CommonFunctions.waitForPageLoaded();
			    }
			else{
				Thread.sleep(6000);
				SearchingTheCostSheet(data);
				CommonFunctions.AssertEqualsVerification(ActualValue, data[229], "Request status is not updated as 'RequestSent'.Assertion failed.Please check");
				//Checking the status of the Cost Sheet
				wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection));
				CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "Cost Sheet HyperLink");
				//Clicking on CostSheet HyperLink
				CommonFunctions.waitForPageLoaded();
			}
			
		}
		
		catch(Exception e){
			fail=true;
			log.error("Exception in SubmitRequestStatusCheck"+e);
			throw e;
		}
		return true;
	}
	public static boolean SubmitRequestToVendor(String [] data) throws Exception{
		try{
			 wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection));
			  CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "Cost Sheet HyperLink");
			  //Clicking on CostSheet HyperLink
			  CommonFunctions.waitForPageLoaded();
			  CommonFunctions.waitForElementTobeClickable(VendorRequestDropDown);
			  Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='rfqRequestActionOptions']")));
			     List<WebElement> allOptions=dropdDown.getOptions();
	             for(int i=0;i<allOptions.size();i++){
	 		     String RequiredValue=allOptions.get(i).getText();
	 		  //   System.out.println(RequiredValue);
	 		     if(RequiredValue.contains(data[63]))
	 		     {
	 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(VendorRequestDropDown, RequiredValue, "Costing Drop down");
	 		     CommonFunctions.waitForPageLoaded();
	 		     break;
	 		     }
	 		     }
		   wait.until(ExpectedConditions.invisibilityOfElementLocated(VendorRequestPopUp));
			//Wait the Popup to disappear
			CommonFunctions.waitForElementTobeClickable(RequestTab);
			CommonFunctions.clickButtonOrLink(RequestTab, "tab", "request tab");
			//Clicking Request Tab
			CommonFunctions.waitForPageLoaded();
			}
			
		catch(Exception e){
			fail=true;
			log.error("Exception in FillCasePackValueInContentTable"+e);
			throw e;
		}
		return true;
	}
	public static boolean AddContentTableValuesThroughRFQHyperLink(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection));
			  CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "Cost Sheet HyperLink");
			  //Clicking on CostSheet HyperLink
			  CommonFunctions.waitForPageLoaded();
			  CommonFunctions.waitForElementTobeClickable(RFQUpdateDropDown);
			  Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='rfqResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
			     List<WebElement> allOptions=dropdDown.getOptions();
	             for(int i=0;i<allOptions.size();i++){
	 		     String RequiredValue=allOptions.get(i).getText();
	 		  //   System.out.println(RequiredValue);
	 		     if(RequiredValue.contains(data[179]))
	 		     {
	 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQUpdateDropDown, RequiredValue, "RFQ Drop down");
	 		     wait.until(ExpectedConditions.titleIs(data[164]));    
	 		     CommonFunctions.waitForPageLoaded();
	 		     break;
	 		     }
	 		     }
	             CommonFunctions.waitForElementTobeClickable(ProductExpandImage);
	             CommonFunctions.clickButtonOrLink(ProductExpandImage, "Image", "ProductExpandImage");
	             //Clicking on + Button
	             CommonFunctions.waitForPageLoaded();
	             wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetTemplateHyperLink));
	             CommonFunctions.clickButtonOrLink(CostSheetTemplateHyperLink, "HyperLink", "CostSheetTemplateHyperLink");
	             //Clicking on Cost SHeet Hyper link
	             wait.until(ExpectedConditions.titleIs(data[144]));
	             CommonFunctions.waitForPageLoaded();
	             wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
				    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
				    //Clicking on contents table Edit Button
				    CommonFunctions.waitForPageLoaded();
				    wait.until(ExpectedConditions.titleIs(data[169]));
				    CommonFunctions.waitForElementTobeClickable(ProductColorWay);
				    CommonFunctions.clickButtonOrLink(ProductColorWay, "textBox", "Product ColrWayTextBox");
				    //Clicking on Product colorway Text Box
				    CommonFunctions.gettingParentWindow();
				    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
				    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
				    //Clicking productColorWayHyperLink 
				    CommonFunctions.switchingChildWindow();
				    //Switching Child window
				    ColorWayType=By.linkText(data[170]);
				    CommonFunctions.waitForElementTobeClickable(ColorWayType);
				    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
				    //Clicking on Retail Item
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ProductNumberTextBox);
				    CommonFunctions.enterTextInTextboxUpdated(ProductNumberTextBox, data[171], "ProductNumber");
				    //Entering a Product Number
				    CommonFunctions.waitForElementTobeClickable(SearchButton);
				    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
				    //Clicking Search Button
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
				    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
				    //Clicking on Choose Button
				    CommonFunctions.switchParentWindow();
				    driver.switchTo().defaultContent();
					driver.switchTo().frame("contentframe");
				    //Switching Frame
				    CommonFunctions.waitForPageLoaded();
				    FillingContentTableForRFQ(data);
		
			}
			
		catch(Exception e){
			fail=true;
			log.error("Exception in FillCasePackValueInContentTable"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AddContentTableValuesThroughRFQHyperLinkForTC_23(String [] data) throws Exception{
		try{
			 CommonFunctions.waitForElementTobeClickable(RFQUpdateDropDown);
			  Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='rfqResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
			     List<WebElement> allOptions=dropdDown.getOptions();
	             for(int i=0;i<allOptions.size();i++){
	 		     String RequiredValue=allOptions.get(i).getText();
	 		  //   System.out.println(RequiredValue);
	 		     if(RequiredValue.contains(data[179]))
	 		     {
	 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQUpdateDropDown, RequiredValue, "RFQ Drop down");
	 		     wait.until(ExpectedConditions.titleIs(data[164]));    
	 		     CommonFunctions.waitForPageLoaded();
	 		     break;
	 		     }
	 		     }
	             CommonFunctions.waitForElementTobeClickable(ProductExpandImage);
	             CommonFunctions.clickButtonOrLink(ProductExpandImage, "Image", "ProductExpandImage");
	             //Clicking on + Button
	             CommonFunctions.waitForPageLoaded();
	             wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetTemplateHyperLink));
	             CommonFunctions.clickButtonOrLink(CostSheetTemplateHyperLink, "HyperLink", "CostSheetTemplateHyperLink");
	             //Clicking on Cost SHeet Hyper link
	             wait.until(ExpectedConditions.titleIs(data[144]));
	             CommonFunctions.waitForPageLoaded();
	             wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
				    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
				    //Clicking on contents table Edit Button
				    CommonFunctions.waitForPageLoaded();
				    wait.until(ExpectedConditions.titleIs(data[169]));
				    CommonFunctions.waitForElementTobeClickable(ProductColorWay);
				    CommonFunctions.clickButtonOrLink(ProductColorWay, "textBox", "Product ColrWayTextBox");
				    //Clicking on Product colorway Text Box
				    CommonFunctions.gettingParentWindow();
				    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
				    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
				    //Clicking productColorWayHyperLink 
				    CommonFunctions.switchingChildWindow();
				    //Switching Child window
				    ColorWayType=By.linkText(data[170]);
				    CommonFunctions.waitForElementTobeClickable(ColorWayType);
				    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
				    //Clicking on Retail Item
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ProductNumberTextBox);
				    CommonFunctions.enterTextInTextboxUpdated(ProductNumberTextBox, data[171], "ProductNumber");
				    //Entering a Product Number
				    CommonFunctions.waitForElementTobeClickable(SearchButton);
				    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
				    //Clicking Search Button
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
				    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
				    //Clicking on Choose Button
				    CommonFunctions.switchParentWindow();
				    driver.switchTo().defaultContent();
					driver.switchTo().frame("contentframe");
				    //Switching Frame
				    CommonFunctions.waitForPageLoaded();
				    FillingContentTableForRFQ(data);
		
			}
			
		catch(Exception e){
			fail=true;
			log.error("Exception in FillCasePackValueInContentTable"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AddContentTableValuesThroughRFQHyperLinkForTC_30(String [] data) throws Exception{
		try{
			 CommonFunctions.waitForElementTobeClickable(RFQUpdateDropDown);
			  Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='rfqResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
			     List<WebElement> allOptions=dropdDown.getOptions();
	             for(int i=0;i<allOptions.size();i++){
	 		     String RequiredValue=allOptions.get(i).getText();
	 		  //   System.out.println(RequiredValue);
	 		     if(RequiredValue.contains(data[458]))
	 		     {
	 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQUpdateDropDown, RequiredValue, "RFQ Drop down");
	 		     wait.until(ExpectedConditions.titleIs(data[164]));    
	 		     CommonFunctions.waitForPageLoaded();
	 		     break;
	 		     }
	 		     }
	             CommonFunctions.waitForElementTobeClickable(ProductExpandImage);
	             CommonFunctions.clickButtonOrLink(ProductExpandImage, "Image", "ProductExpandImage");
	             //Clicking on + Button
	             CommonFunctions.waitForPageLoaded();
	             wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetTemplateHyperLink));
	             CommonFunctions.clickButtonOrLink(CostSheetTemplateHyperLink, "HyperLink", "CostSheetTemplateHyperLink");
	             //Clicking on Cost SHeet Hyper link
	             wait.until(ExpectedConditions.titleIs(data[144]));
	             CommonFunctions.waitForPageLoaded();
	             wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
				    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
				    //Clicking on contents table Edit Button
				    CommonFunctions.waitForPageLoaded();
				    wait.until(ExpectedConditions.titleIs(data[169]));
				    CommonFunctions.waitForElementTobeClickable(ProductColorWay);
				    CommonFunctions.clickButtonOrLink(ProductColorWay, "textBox", "Product ColrWayTextBox");
				    //Clicking on Product colorway Text Box
				    CommonFunctions.gettingParentWindow();
				    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
				    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
				    //Clicking productColorWayHyperLink 
				    CommonFunctions.switchingChildWindow();
				    //Switching Child window
				    ColorWayType=By.linkText(data[170]);
				    CommonFunctions.waitForElementTobeClickable(ColorWayType);
				    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
				    //Clicking on Retail Item
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ProductNumberTextBox);
				    CommonFunctions.enterTextInTextboxUpdated(ProductNumberTextBox, CopyLinkRetailItem1, "ProductNumber");
				    //Entering a Product Number
				    CommonFunctions.waitForElementTobeClickable(SearchButton);
				    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
				    //Clicking Search Button
				    CommonFunctions.waitForPageLoaded();
				    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
				    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
				    //Clicking on Choose Button
				    CommonFunctions.switchParentWindow();
				    driver.switchTo().defaultContent();
					driver.switchTo().frame("contentframe");
				    //Switching Frame
				    CommonFunctions.waitForPageLoaded();
				    FillingContentTableForRFQ(data);
				    wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
				    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
				    //Clicking on contents table Edit Button
				    CommonFunctions.waitForPageLoaded();
				    wait.until(ExpectedConditions.titleIs(data[169]));
				    CommonFunctions.waitForElementTobeClickable(AddRowsButton);
				    CommonFunctions.clickButtonOrLink(AddRowsButton, "Image", "AddRowsButton");
				    //Clicking Add Row Icon
				    wait.until(ExpectedConditions.visibilityOfElementLocated(AddRowTable));
				    //Waiting for add row Table
				    InsertAfter=By.linkText(data[266]);
				    CommonFunctions.waitForElementTobeClickable(InsertAfter);
				    CommonFunctions.clickButtonOrLink(InsertAfter, "hyperLink", "InsertAfter");
				    //Clicking on Insert After
				    CommonFunctions.waitForElementTobeClickable(UnitRatioTable);
					CommonFunctions.clickButtonOrLink(UnitRatioTable, "table", "UnitRatiotable");
					//Clicking on Unit Ratio
					CommonFunctions.waitForElementTobeClickable(ProductColorWay2);
					CommonFunctions.clickButtonOrLink(ProductColorWay2, "Text Box", "ProductColorWay2");
					//clicking on the Product Colorway
					 CommonFunctions.gettingParentWindow();
					    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
					    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
					    //Clicking productColorWayHyperLink 
					    CommonFunctions.switchingChildWindow();
					    //Switching Child window
					    ColorWayType=By.linkText(data[170]);
					    CommonFunctions.waitForElementTobeClickable(ColorWayType);
					    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
					    //Clicking on Retail Item
					    CommonFunctions.waitForPageLoaded();
					    CommonFunctions.waitForElementTobeClickable(ProductTextBox);
					    CommonFunctions.enterTextInTextboxUpdated(ProductTextBox,CopyLinkRetailItem2, "ProductNumber");
					    log.info("The Selected colorway is: "+CopyLinkRetailItem2+".And the status of the Cost Sheet is: "+data[284]);
					    //Entering a Product Number
					    CommonFunctions.waitForElementTobeClickable(SearchButton);
					    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
					    //Clicking Search Button
					    CommonFunctions.waitForPageLoaded();
					    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
					    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
					    //Clicking on Choose Button
					    CommonFunctions.switchParentWindow();
					    driver.switchTo().defaultContent();
						driver.switchTo().frame("contentframe");
					    //Switching Frame
					    CommonFunctions.waitForPageLoaded();
					    CommonFunctions.waitForElementTobeClickable(WaveTable1);
						CommonFunctions.clickButtonOrLink(WaveTable1, "Table", "wavetable");
						CommonFunctions.waitForElementTobeClickable(DropDownOfWaveTable1);
						CommonFunctions.selectFromDropDownByVisibleTextUpdated(DropDownOfWaveTable1, data[161], "waveDropDown");
						//Clicking Wave Table value
						CommonFunctions.waitForElementTobeClickable(UnitRatioTable1);
						CommonFunctions.clickButtonOrLink(UnitRatioTable1, "table", "UnitRatiotable");
						CommonFunctions.waitForElementTobeClickable(UnitRatioTableTextBox1);
						CommonFunctions.enterTextInTextboxUpdated(UnitRatioTableTextBox1, data[172], "UnitRatioTextBox");
						 CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
			   		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
			   		     //Clicking Done Button
			   		     CommonFunctions.waitForPageLoaded();
			   		     wait.until(ExpectedConditions.titleIs(data[144]));
					    
					    
					   
			}
			
		catch(Exception e){
			fail=true;
			log.error("Exception in FillCasePackValueInContentTable"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerficationOnCostingUser(String [] data) throws Exception{
		try{
			CommonProjectFunctions.logOut();
			//Logging out
			openBrowser();
			launchApp(data[461],data[462]);
			//Logging in with new user
			SearchAssortmentProduct(data);
			//Searching Assortment/Solid Product
			NavigatingToCostingTab(data);
			//Navigate to Costing tab
			CloseOpenedExistingCostSheet();
			//Close The Currently Opened Sheet
			SearchTheRFQForTC_30(data);
			//Searching the RFQ
		    wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetCreatedFromTemplate));
			CommonFunctions.clickButtonOrLink(CostSheetCreatedFromTemplate, "HyperLink", "Cost Sheet");
			//Clicking the Created Cost Sheet
			CommonFunctions.waitForPageLoaded();
		
			AssertioVerficationOfCostingUser(data);
			//Assertion Verification of Forecast Qty and Total Cost
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in FillCasePackValueInContentTable"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean NavigateToCostSheetSearchResultTab(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(WhatIfCostSheetDetailsTab));
		    CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetListTab);
			CommonFunctions.clickButtonOrLink(WhatIfCostSheetListTab, "tab", "First tab of Cost Sheet list");
			//Clicking Cost Sheet List Tab
			CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToCostSheetSearchResultTab"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean AssertioVerficationOfCostingUser(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(WhatIfForecastQty);
			GettingText(WhatIfForecastQty);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[227], "Actua and Expected Forecast Quantity are not matched.Assertion failed.Please Check");
			CommonFunctions.waitForElementTobeClickable(WhatIfTotalCost);
			GettingText(WhatIfTotalCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[228], "Actua and Expected Forecast Quantity are not matched.Assertion failed.Please Check");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertioVerficationOfCostingUser"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerficationOfCostingUser_CreateVendorCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(WhatIfTotalCost);
			GettingText(WhatIfTotalCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[294], "Actual and Expected Target Costs are Not Matched.Assertion Failed.Please check");
			log.info(" *** Validate Target Cost (USD) *** - Valiadted");
			//Validating the Target Cost
		    CommonFunctions.waitForElementTobeClickable(WhatIfTotalCost);
			GettingText(WhatIfTotalCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[228], "Actual and Expected Total Costs are not matched.Assertion failed.Please Check");
			//Verify the Total Cost Value
			
			CommonFunctions.waitForElementTobeClickable(ContentTableProductColorWay);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableProductColorWay, "ContentTableProductColorWay"), "Content Table ProductColorway is Not appeared.Assertion failed.Please Check");
			GettingText(ContentTableProductColorWay);
			log.info("Content Table Product ColorWay is "+ActualValue);
			//Verify  Content table Product Color Way is appearing
			CommonFunctions.waitForElementTobeClickable(ContentTableProductName);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableProductName, "ContentTableProductName"), "Content Table ProductName is Not appeared.Assertion failed.Please Check");
			GettingText(ContentTableProductName);
			log.info("Content Table Product Name is "+ActualValue);
			//Verify  Content table Product Name is appearing
			CommonFunctions.waitForElementTobeClickable(ContentTableWave);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableWave, "ContentTableWave"), "Content Table wave is Not appeared.Assertion failed.Please Check");
			GettingText(ContentTableWave);
			log.info("Content Table Wave is "+ActualValue);
			//Verify  Content table Wave is appearing
			CommonFunctions.waitForElementTobeClickable(ContentTableProductType);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableProductType, "ContentTableProductType"), "Content Table Product Type is Not appeared.Assertion failed.Please Check");
			GettingText(ContentTableProductType);
			log.info("Content Table Product Type is "+ActualValue);
			//Verify  Content table Product Type is appearing
			CommonFunctions.waitForElementTobeClickable(ContentTableUnitRatio);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableUnitRatio, "ContentTableUnitRatio"), "Content Table Unit Ratio is Not appeared.Assertion failed.Please Check");
			GettingText(ContentTableUnitRatio);
			log.info("Content Table Unit ratio is "+ActualValue);
			//Verify  Content table Unit raio is appearing
			CommonFunctions.waitForElementTobeClickable(ContentTableProductSource);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableProductSource, "ContentTableProductSource"), "Content Table Product Source is Not appeared.Assertion failed.Please Check");
			GettingText(ContentTableProductSource);
			log.info("Content Table Product Source is "+ActualValue);
			//Verify  Content table Product Source is appearing
			CommonFunctions.waitForElementTobeClickable(ContentTableCostSheetName);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableCostSheetName, "ContentTableCostSheetName"), "Content Table CostSheet name is Not appeared.Assertion failed.Please Check");
			GettingText(ContentTableCostSheetName);
			log.info("Content Table Cost Sheet name  is "+ActualValue);
			//Verify  Content table Cost Sheet Name is appearing
			CommonFunctions.waitForElementTobeClickable(ContentTableCostSheetStatus);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableCostSheetStatus, "ContentTableCostSheetStatus"), "Content Table CostSheet status is Not appeared.Assertion failed.Please Check");
			GettingText(ContentTableCostSheetStatus);
			log.info("Content Table Cost Sheet Status  is "+ActualValue);
			//Verify  Content table Cost Sheet Status is appearing
			CommonFunctions.waitForElementTobeClickable(ContentTableLastModifiedBy);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableLastModifiedBy, "ContentTableLastModifiedBy"), "Content Table Last Modified By is Not appeared.Assertion failed.Please Check");
			GettingText(ContentTableLastModifiedBy);
			log.info("Content Table Last Modified is "+ActualValue);
			//Verify  Content table Last Modified by is appearing
			CommonFunctions.waitForElementTobeClickable(ContentTableLastModifiedDate);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(ContentTableLastModifiedDate, "ContentTableLastModifiedBy"), "Content Table Last Modified  date is Not appeared.Assertion failed.Please Check");
			GettingText(ContentTableLastModifiedDate);
			log.info("Content Table Last Modified Date is "+ActualValue);
			//Verify  Content table Last Modified date is appearing
			CommonFunctions.waitForElementTobeClickable(VendorCostTableProductColorWay);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorCostTableProductColorWay, "VendorCostTableProductColorWay"), "Vendor Table Product Colorway is Not appeared.Assertion failed.Please Check");
			GettingText(VendorCostTableProductColorWay);
			log.info("Vendor table Product Color way  is "+ActualValue);
			//Verify  Vendor table Product Color way is appearing
			CommonFunctions.waitForElementTobeClickable(VendorTaleCostSheetName);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTaleCostSheetName, "VendorTaleCostSheetName"), "Vendor Table Cost Sheet name is Not appeared.Assertion failed.Please Check");
			GettingText(VendorTaleCostSheetName);
			log.info("Vendor table Cost Sheet name  is "+ActualValue);
			//Verify  Vendor table Cost Sheet Name  is appearing
			CommonFunctions.waitForElementTobeClickable(VendorTableProductOriginalQuoteCurrency);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductOriginalQuoteCurrency, "VendorTableProductOriginalQuoteCurrency"), "Vendor Table Product Original Quote Currency is Not appeared.Assertion failed.Please Check");
			GettingText(VendorTableProductOriginalQuoteCurrency);
			log.info("Vendor table Product Original Quote Currency  is "+ActualValue);
			//Verify  Vendor table Product Original Quote Currency  is appearing
			CommonFunctions.waitForElementTobeClickable(VendorTableProductCostTotal);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductCostTotal, "VendorTableProductCostTotal"), "Vendor Table Product Total Cost is Not appeared.Assertion failed.Please Check");
			GettingText(VendorTableProductCostTotal);
			log.info("Vendor table Product Total Cost  is "+ActualValue);
			//Verify  Vendor table Product Total cost  is appearing
			CommonFunctions.waitForElementTobeClickable(VendorTableProductCostTotalUSD);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(VendorTableProductCostTotalUSD, "VendorTableProductCostTotalUSD"), "Vendor Table Product Total Cost(USD) is Not appeared.Assertion failed.Please Check");
			GettingText(VendorTableProductCostTotalUSD);
			log.info("Vendor table Product Total Cost USD  is "+ActualValue);
			log.info(" *** Validate that there are two MOA tables for the Contents Table. - validated ***");
			//Verify  Vendor table Product Total cost USD is appearing
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfCostingUser_CreateVendorCostSheet"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerficationOfEngineerUser_CreateVendorCostSheet(String [] data) throws Exception{
		try{
		    wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetUpdateButton));
		    CommonFunctions.clickButtonOrLink(CostSheetUpdateButton, "Cost Sheet Update Drop Down");
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(VendorCostTableProductColorWay, "VendorCostTableProductColorWay"), "Vendor Table Product Colorway is appeared.Assertion failed.Please Check");
		   //Verify  Vendor table Product Color way is not appearing in Engineer user
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(VendorTaleCostSheetName, "VendorTaleCostSheetName"), "Vendor Table Cost Sheet name is appeared.Assertion failed.Please Check");
			//Verify  Vendor table Cost Sheet Name  is not appearing in Engineer user
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(VendorTableProductOriginalQuoteCurrency, "VendorTableProductOriginalQuoteCurrency"), "Vendor Table Product Original Quote Currency is  appeared.Assertion failed.Please Check");
		   //Verify  Vendor table Product Original Quote Currency  is not appearing in Engineer user
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(VendorTableProductCostTotal, "VendorTableProductCostTotal"), "Vendor Table Product Total Cost is appeared.Assertion failed.Please Check");
			//Verify  Vendor table Product Total cost  is not appearing in Engineer user
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(VendorTableProductCostTotalUSD, "VendorTableProductCostTotalUSD"), "Vendor Table Product Total Cost(USD) is  appeared.Assertion failed.Please Check");
			//Verify  Vendor table Product Total cost USD is not appearing in Engineer user
			log.info(" *** Validate that the Vendor Cost Table can only be seen by the vendor and anyone with costing access. Engineers should not be able to see the values in this table (or the table at all) -validated ***");
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfEngineerUser_CreateVendorCostSheet"+e);
			throw e;
		}
		return true;
	}
	public static boolean SearchTheCostSheet(String [] data) throws Exception{
		try{
			
			
		   CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetCheckBox);
		   CommonFunctions.clickButtonOrLink(WhatIfCostSheetCheckBox, "CheckBox","WhatIfCostSheetCheckBox");
		   //Clicking on the CheckBox
		   CommonFunctions.waitForElementTobeClickable(SortOption);
			 CommonFunctions.clickButtonOrLink(SortOption, "Button", "SortOption");
			 //Clicking on Sort Button
			 
			 CommonFunctions.waitForPageLoaded();
			 //wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(SortTable));
			 CommonFunctions.waitForElementTobeClickable(FirstSortDropDown);
			 CommonFunctions.selectFromDropDownByVisibleTextUpdated(FirstSortDropDown, data[176], "First Sort By DropDown");
			 //Clicking the Value On SortBy Drop down
			 CommonFunctions.waitForElementTobeClickable(SecondSortDropDown);
			 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SecondSortDropDown, data[177], "Second Sort By DropDown");
			 //Clicking order on sort
			 CommonFunctions.waitForElementTobeClickable(SortButton);
			 CommonFunctions.clickButtonOrLink(SortButton, "Button", "Sort Button");
			 //Clicking Sort Button
			 CommonFunctions.waitForElementTobeClickable(SortOption);
			 wait.until(ExpectedConditions.titleIs(data[144]));
			 CommonFunctions.waitForPageLoaded();
			 CloseOpenedExistingCostSheet();
			 JavascriptExecutor jse = (JavascriptExecutor)driver;
		    jse.executeScript("window.scrollBy(0,200)", "");
			wait.until(ExpectedConditions.visibilityOfElementLocated(WhatIfCostSheetSelectionCostingUser));
			CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSelectionCostingUser);
			    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSelectionCostingUser, "HyperLink", "Cost Sheet HyperLink");
			    //Clicking on CostSheet HyperLink
			    CommonFunctions.waitForPageLoaded();
		   }
		catch(Exception e){
			fail=true;
			log.error("Exception in SearchTheCostSheet"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean SearchTheRFQForTC_30(String [] data) throws Exception{
		try{
			 By RFQLinkText= By.linkText("RFQ");
			 CommonFunctions.waitForElementTobeClickable(RFQLinkText);
			 CommonFunctions.clickButtonOrLink(RFQLinkText, "Hyper-Link", "RFQLinkText");
		     wait.until(ExpectedConditions.visibilityOfElementLocated(SortOption));
			  CommonFunctions.waitForPageLoaded();
			  CommonFunctions.clickButtonOrLink(SortOption, "SortOption");
			 //wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(SortTable));
			 CommonFunctions.waitForElementTobeClickable(FirstSortDropDown);
			 CommonFunctions.selectFromDropDownByVisibleTextUpdated(FirstSortDropDown, data[176], "First Sort By DropDown");
			 //Clicking the Value On SortBy Drop down
			 CommonFunctions.waitForElementTobeClickable(SecondSortDropDown);
			 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SecondSortDropDown, data[177], "Second Sort By DropDown");
			 //Clicking order on sort
			 CommonFunctions.waitForElementTobeClickable(SortButton);
			 CommonFunctions.clickButtonOrLink(SortButton, "Button", "Sort Button");
			 //Clicking Sort Button
			 CommonFunctions.waitForElementTobeClickable(SortOption);
			 wait.until(ExpectedConditions.titleIs(data[144]));
			 CommonFunctions.waitForPageLoaded();
			 CloseOpenedExistingCostSheet();
			 JavascriptExecutor jse = (JavascriptExecutor)driver;
		    jse.executeScript("window.scrollBy(0,200)", "");
			wait.until(ExpectedConditions.visibilityOfElementLocated(RFQinAdminServer));
			CommonFunctions.waitForElementTobeClickable(RFQinAdminServer);
			    CommonFunctions.clickButtonOrLink(RFQinAdminServer, "HyperLink", "RFQinAdminServer");
			    //Clicking on CostSheet HyperLink
			    CommonFunctions.waitForPageLoaded();
		   }
		catch(Exception e){
			fail=true;
			log.error("Exception in SearchTheRFQForTC_30"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationAfterUpdation(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
			GettingText(CurrencyConversionRate);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[174], "Actual And Expected Cost Sheet CurrencyConversionRate Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Currency Conversion Rate-validated ***");
			//Assertion Verification of CurrencyConversionRate of HKD
			GettingText(MasterCartonPackagingMaterialUSDValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[268], "Actual And Expected Cost Sheet MasterCartonPackagingMaterialUSDValue Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Master Carton Packaging Material (USD)-validated ***");
			//Assertion Verification of MasterCartonPackagingMaterialUSDValue of HKD
			CommonFunctions.waitForElementTobeClickable(MasterCartonLaborCostUSD);
			GettingText(MasterCartonLaborCostUSD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[269], "Actual And Expected Cost Sheet MasterCartonLaborCostUSD Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Master Carton Labor Cost (USD)-validated ***");
			//Assertion Verification of  MasterCartonLaborCostUSDr of HKD
			CommonFunctions.waitForElementTobeClickable(MiscelleneousMaterialValue);
			GettingText(MiscelleneousMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[270], "Actual And Expected Cost Sheet MiscelleneousMaterialValueAre Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Miscellaneous Cost (USD)-validated ***");
			//Assertion Verification of  MasterCartonLaborCostUSDr of HKD
			CommonFunctions.waitForElementTobeClickable(ProductMarkUpValue);
			GettingText(ProductMarkUpValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[271], "Actual And Expected Cost Sheet ProductMarkUpValue Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Product Markup (USD)-validated ***");
			//Assertion Verification of  ProductMarkUpValue of HKD
			CommonFunctions.waitForElementTobeClickable(VendorCostCurrencyxFacotoryCostUSD);
			GettingText(VendorCostCurrencyxFacotoryCostUSD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[272], "Actual And Expected Cost Sheet VendorCostCurrencyxFacotoryCostUSD Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Ex-Factory Cost (SAP Base Price)-validated ***");
			//Assertion Verification of  VendorCostQuoteCurrencyxFacotoryCost
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationAfterUpdation"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationAfterUpdationForInternalCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
			GettingText(CurrencyConversionRate);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[174], "Actual And Expected Cost Sheet CurrencyConversionRate Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of CurrencyConversionRate of HKD
			GettingText(MasterCartonPackagingMaterialUSDValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[268], "Actual And Expected Cost Sheet MasterCartonPackagingMaterialUSDValue Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of MasterCartonPackagingMaterialUSDValue of HKD
			CommonFunctions.waitForElementTobeClickable(MasterCartonLaborCostUSD);
			GettingText(MasterCartonLaborCostUSD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[269], "Actual And Expected Cost Sheet MasterCartonLaborCostUSD Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  MasterCartonLaborCostUSDr of HKD
			CommonFunctions.waitForElementTobeClickable(MiscelleneousMaterialValue);
			GettingText(MiscelleneousMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[270], "Actual And Expected Cost Sheet MiscelleneousMaterialValueAre Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  MasterCartonLaborCostUSDr of HKD
			CommonFunctions.waitForElementTobeClickable(ProductMarkUpValue);
			GettingText(ProductMarkUpValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[271], "Actual And Expected Cost Sheet ProductMarkUpValue Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  ProductMarkUpValue of HKD
			CommonFunctions.waitForElementTobeClickable(ExFactoryCostUSDInCostingUser);
			GettingText(ExFactoryCostUSDInCostingUser);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[297], "Actual And Expected Cost Sheet CostCurrencyxFacotoryCostUSD Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  InternalCostQuoteCurrencyxFacotoryCost
			CommonFunctions.waitForElementTobeClickable(TotalMarkUpUSD);
			GettingText(TotalMarkUpUSD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[299], "Actual And Expected Cost Sheet TotalMarkUp Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  VendorCostQuoteCurrencyxFacotoryCost
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationAfterUpdation"+e);
			throw e;
		}
		return true;
	}
	public static boolean UpdateCostSheetWhatIf(String [] data) throws Exception{
		try{
			 wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(WhatIfCostSheetDetailsTab));
			 CommonFunctions.waitForElementTobeClickable(CostSheetDropDown);
			 Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[63]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetDropDown, RequiredValue, "Costing Drop down");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
 		     }
             wait.until(ExpectedConditions.titleIs(data[180]));
             CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
             CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[213],"CostSheetCurrencyDropDown");
             //Selecting the HKD
     	    CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
		    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "WhatIfCostSheetSaveButton");
		    //Clicking WhatIfCostSheetSaveButton 
		    CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.titleIs(data[144]));
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateCostSheetWhatIf"+e);
			throw e;
		}
		return true;
	}
	public static boolean UpdateCostSheetWhatIf_TC30(String [] data) throws Exception{
		try{
			 wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(WhatIfCostSheetDetailsTab));
			 CommonFunctions.waitForElementTobeClickable(CostSheetDropDown);
			 Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[458]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetDropDown, RequiredValue, "Costing Drop down");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
 		     }
             wait.until(ExpectedConditions.titleIs(data[335]));
             CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
             CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[213],"CostSheetCurrencyDropDown");
             //Selecting the HKD
     	    CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
		    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "WhatIfCostSheetSaveButton");
		    //Clicking WhatIfCostSheetSaveButton 
		    CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.titleIs(data[144]));
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateCostSheetWhatIf"+e);
			throw e;
		}
		return true;
	}
	public static boolean FillCasePackValueInContentTable(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ContentTableEditButton);
			CommonFunctions.clickButtonOrLink(ContentTableEditButton, "HyperLink", "ContentTableEditButton");
			//Clicking on Contents Table Edit Button
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[169]));
			CommonFunctions.waitForElementTobeClickable(UnitRatioTable);
			CommonFunctions.clickButtonOrLink(UnitRatioTable, "Table", "Unit ratio");
			//Clicking on Unit Ratio
			CommonFunctions.waitForElementTobeClickable(UnitRatioTableTextBox);
			CommonFunctions.enterTextInTextboxUpdated(UnitRatioTableTextBox, data[209], "Unit ratio Text Box");
			//Entering the Value In Text Box
			CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
			CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "CostSheetDoneButton");
			//Clicking on Done Button
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[144]));
			
			
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in FillCasePackValueInContentTable"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean AssertionVerificationOfCostSheetElements(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ProductTypeValue);
			GettingText(ProductTypeValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[11], "Actual And Expected Cost Sheet Product Type Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Product Type - Validated ***");
			//Assertion Verification of product Type
			CommonFunctions.waitForElementTobeClickable(CountryOfOriginValue);
			GettingText(CountryOfOriginValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[208], "Actual And Expected Cost Sheet CountryOfOriginValuee Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Country of Origin - Validated ***");
			//Assertion Verification of Country Of Origin Value
			CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
			GettingText(CurrencyConversionRate);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[175], "Actual And Expected Cost Sheet CurrencyConversionRate Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Currency Conversion Rate - Validated ***");
			//Assertion Verification of CurrencyConversionRate
			CommonFunctions.waitForElementTobeClickable(CostSheetSequenceNumberValue);
			GettingText(CostSheetSequenceNumberValue);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(CostSheetSequenceNumberValue, "CostSheetSequenceNumberValue"), "CostSheetSequenceNumberValue is not found.Assertion failed.Please Check");
			log.info("CostSheetSequenceNumberValue is generated and is "+ActualValue);
			log.info("*** Validate Cost Sheet Sequence Number - Validated ***");
			//Verifying the Appearance Of Cost Sheet Sequence Number
			
			CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterialUSDValue);
			GettingText(MasterCartonPackagingMaterialUSDValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[194], "Actual And Expected Cost Sheet MasterCartonPackagingMaterialUSDValue Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Master Carton Packaging Material (USD)- validated ***");
			//Assertion Verification of MasterCartonPackagingMaterialUSDValue
			
			CommonFunctions.waitForElementTobeClickable(MasterCartonLaborCostUSD);
			GettingText(MasterCartonLaborCostUSD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[195], "Actual And Expected Cost Sheet MasterCartonLaborCostUSD Are Not Matched.Assertion Failed.Please check");
			log.info("***Validate Master Carton Labor Cost (USD)-Validated ***");
			//Assertion Verification of  MasterCartonLaborCostUSDr
			CommonFunctions.waitForElementTobeClickable(MiscelleneousMaterialValue);
			GettingText(MiscelleneousMaterialValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[196], "Actual And Expected Cost Sheet MiscelleneousMaterialValueAre Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Miscellaneous Cost (USD) -Validated ****");
			//Assertion Verification of  MasterCartonLaborCostUSDr
			CommonFunctions.waitForElementTobeClickable(ProductMarkUpValue);
			GettingText(ProductMarkUpValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[197], "Actual And Expected Cost Sheet ProductMarkUpValue Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  ProductMarkUpValue
			log.info("*** Validate Product Markup (USD)***");
			
			CommonFunctions.waitForElementTobeClickable(DiscountValue);
			GettingText(DiscountValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data [198], "Actual And Expected Discount Values are not Matched.Assertion failed.Please Verify");
			log.info("*** Validate Discount (USD)-validated ***");

			CommonFunctions.waitForElementTobeClickable(VendorCostQuoteCurrencyxFacotoryCost);
			GettingText(VendorCostQuoteCurrencyxFacotoryCost);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[219], "Actual And Expected Cost Sheet VendorCostQuoteCurrencyxFacotoryCost Are Not Matched.Assertion Failed.Please check");
			//Assertion Verification of  VendorCostQuoteCurrencyxFacotoryCost
			log.info(" *** Validate Ex-Factory Cost (SAP Base Price) - validated ***");
			
			CommonFunctions.waitForElementTobeClickable(VendorCostCurrencyxFacotoryCostUSD);
			GettingText(VendorCostCurrencyxFacotoryCostUSD);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[219], "Actual And Expected Cost Sheet VendorCostCurrencyxFacotoryCostUSD Are Not Matched.Assertion Failed.Please check");
			log.info("*** Validate Ex-Factory Cost (SAP Base Price) (USD)-validated ****");
			//Assertion Verification of  VendorCostQuoteCurrencyxFacotoryCost
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOfCostSheetElements"+e);
			throw e;
		}
		return true;
	}
	
	
	public static boolean CreateWhatIfCostSheet(String [] data) throws Exception{
		try{
	        CommonFunctions.waitForElementTobeClickable(CostSheetWave);
	        CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetWave, data[161], "CostSheetWave");
	        //Selecting wave Value
	        CommonFunctions.gettingParentWindow();
            CommonFunctions.waitForElementTobeClickable(FactoryCodeHyperLink);
            CommonFunctions.clickButtonOrLink(FactoryCodeHyperLink, "HyperLink", "FactoryCode");
            //Clicking on Factory Code
            CommonFunctions.switchingChildWindow();
            CommonFunctions.waitForElementTobeClickable(NameTextBox);
            CommonFunctions.enterTextInTextboxUpdated(NameTextBox, data[159], "NameTextBox");
            //Entering the value In Name Text box
            CommonFunctions.waitForElementTobeClickable(SearchButton);
            CommonFunctions.clickButtonOrLink(SearchButton, "Button", "SerachButton");
            //Clicking on Search Button
            CommonFunctions.waitForPageLoaded();
            CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
            CommonFunctions.clickButtonOrLink(ChooseColorWay, "Option", "Choose Button");
            //Clicking on Choose Button
            CommonFunctions.switchParentWindow();
		    driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
		    //Switching Frame
		    CommonFunctions.waitForPageLoaded();
		   CommonFunctions.waitForElementTobeClickable(CostSheetDomesticOrDIDropDown);
		    CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetDomesticOrDIDropDown, data[188], "DomesticOrDIDropDown");
		    //Selecting Domestic or DI value
		    CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
		    CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "CyrrencyDropDown");
		    //Selecting the Currency Value
		    CommonFunctions.waitForElementTobeClickable(CostSheetComments);
		    CommonFunctions.enterTextInTextboxUpdated(CostSheetComments, data[190], "Comments Text Box");
		    //Entering the Comments inside the Comment Text Box
		    CommonFunctions.waitForElementTobeClickable(ColorWayFirstOption);
		    CommonFunctions.clickButtonOrLink(ColorWayFirstOption, "Option", "ColorwatFirstOption");
		    //Clicking ColorWay First Option
		    CommonFunctions.waitForElementTobeClickable(ColorwayAddButton);
		    CommonFunctions.clickButtonOrLink(ColorwayAddButton, "hyper Link", "Add");
		    //Clicking add  button
		    CommonFunctions.waitForElementTobeClickable(ProductDevelopmentCost);
		    CommonFunctions.enterTextInTextboxUpdated(ProductDevelopmentCost, data[193], "ProductDevelopmentCost");
		    //Entering ProductDevelopmentCost value
		    CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterial);
		    CommonFunctions.enterTextInTextboxUpdated(MasterCartonPackagingMaterial, data[194], "MasterCartonPackagingMaterial");
		    //Entering MasterCartonPackagingMaterial value
		    CommonFunctions.waitForElementTobeClickable(MasterCortonLaborCost);
		    CommonFunctions.enterTextInTextboxUpdated(MasterCortonLaborCost, data[195], "MasterCortonLaborCost");
		    //Entering MasterCortonLaborCost value
		    CommonFunctions.waitForElementTobeClickable(MisCellaneousCost);
		    CommonFunctions.enterTextInTextboxUpdated(MisCellaneousCost, data[196], "MisCellaneousCost");
		    //Entering MisCellaneousCost value
		    CommonFunctions.waitForElementTobeClickable(ProductMarkUp);
		    CommonFunctions.enterTextInTextboxUpdated(ProductMarkUp, data[197], "ProductMarkUp");
		   //Entering ProductMarkUp value
		    CommonFunctions.waitForElementTobeClickable(Discount);
		    CommonFunctions.enterTextInTextboxUpdated(Discount, data[198], "Discount");
		   //Entering Discount value
		    CommonFunctions.waitForElementTobeClickable(Length);
		    CommonFunctions.enterTextInTextboxUpdated(Length, data[199], "Length");
		   //Entering Length value
		    CommonFunctions.waitForElementTobeClickable(Width);
		    CommonFunctions.enterTextInTextboxUpdated(Width, data[200], "Width");
		   //Entering Width value
		    CommonFunctions.waitForElementTobeClickable(Height);
		    CommonFunctions.enterTextInTextboxUpdated(Height, data[201], "Height");
		   //Entering Height value
		    CommonFunctions.waitForElementTobeClickable(FOBHongKongByFCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBHongKongByFCL, data[202], "FOBHongKongByFCL");
		   //Entering FOBHongKongByFCL value
		    CommonFunctions.waitForElementTobeClickable(FOBHongKongByLCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBHongKongByLCL, data[203], "FOBHongKongByLCL");
		   //Entering FOBHongKongByLCL value
		    CommonFunctions.waitForElementTobeClickable(FOBChinaByFCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBChinaByFCL, data[204], "FOBChinaByFCL");
		   //Entering FOBChinaByFCL value
		    CommonFunctions.waitForElementTobeClickable(FOBChinaByLCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBChinaByLCL, data[205], "FOBChinaByLCL");
		   //Entering FOBChinaByLCL value
		    CommonFunctions.waitForElementTobeClickable(FOBOthersByFCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBOthersByFCL, data[206], "FOBOthersByFCL");
		   //Entering FOBOthersByFCL value
		    CommonFunctions.waitForElementTobeClickable(FOBOthersByLCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBOthersByLCL, data[207], "FOBOthersByLCL");
		   //Entering FOBOthersByLCL value
		    CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
		    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "WhatIfCostSheetSaveButton");
		    //Clicking WhatIfCostSheetSaveButton 
		    CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.titleIs(data[144]));
		    
		}
				catch(Exception e){
					fail=true;
					log.error("Exception in CreateWhatIfCostSheet"+e);
					throw e;
				}
		return true;
			}
	
	public static boolean CreateWhatIfCostSheetForRetailItem(String [] data) throws Exception{
		try{
	        CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
		    CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "CyrrencyDropDown");
		    //Selecting the Currency Value
		    CommonFunctions.waitForElementTobeClickable(ColorWayFirstOption);
		    CommonFunctions.clickButtonOrLink(ColorWayFirstOption, "Option", "ColorwatFirstOption");
		    //Clicking ColorWay First Option
		    CommonFunctions.waitForElementTobeClickable(ColorwayAddButton);
		    CommonFunctions.clickButtonOrLink(ColorwayAddButton, "hyper Link", "Add");
		    //Clicking add  button
		    CommonFunctions.waitForElementTobeClickable(PlasticMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(PlasticMaterialTextBox, data[231], "PlasticMaterialTextBox");
		    //Entering ProductDevelopmentCost value
		    CommonFunctions.waitForElementTobeClickable(PackagingMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(PackagingMaterialTextBox, data[230], "PackagingMaterialTextBox");
		    //Entering MasterCartonPackagingMaterial value
		    CommonFunctions.waitForElementTobeClickable(ChemicalMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(ChemicalMaterialTextBox, data[232], "ChemicalMaterialTextBox");
		    //Entering MasterCortonLaborCost value
		    CommonFunctions.waitForElementTobeClickable(PurchasedMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(PurchasedMaterialTextBox, data[233], "PurchasedMaterialTextBox");
		    //Entering MisCellaneousCost value
		    CommonFunctions.waitForElementTobeClickable(ElectronicMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(ElectronicMaterialTextBox, data[234], "ElectronicMaterialTextBox");
		   //Entering ProductMarkUp value
		    CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(SoftGoodMaterialTextBox, data[235], "SoftGoodMaterialTextBox");
		   //Entering Discount value
		    CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(GeneralDecoLaborTextBox, data[236], "GeneralDecoLaborTextBox");
		   //Entering Length value
		    CommonFunctions.waitForElementTobeClickable(MoldinglaborCostTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(MoldinglaborCostTextBox, data[237], "MoldinglaborCostTextBox");
		   //Entering Width value
		    CommonFunctions.waitForElementTobeClickable(OverheadAndMarkUpTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(OverheadAndMarkUpTextBox, data[238], "OverheadAndMarkUpTextBox");
		   //Entering Height value
		    CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
		    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "WhatIfCostSheetSaveButton");
		    //Clicking WhatIfCostSheetSaveButton 
		    CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.titleIs(data[144]));
		    
		}
				catch(Exception e){
					fail=true;
					log.error("Exception in CreateWhatIfCostSheet"+e);
					throw e;
				}
		return true;
			}
	
	public static String CreateCostSheetForAssortmentProduct(String [] data) throws Exception{
		try{
	      //  CommonFunctions.waitForElementTobeClickable(CostSheetWave);
	      //  CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetWave, data[161], "CostSheetWave");
	        //Selecting wave Value
	        CommonFunctions.gettingParentWindow();
            CommonFunctions.waitForElementTobeClickable(FactoryCodeHyperLink);
            CommonFunctions.clickButtonOrLink(FactoryCodeHyperLink, "HyperLink", "FactoryCode");
            //Clicking on Factory Code
            CommonFunctions.switchingChildWindow();
            CommonFunctions.waitForElementTobeClickable(NameTextBox);
            CommonFunctions.enterTextInTextboxUpdated(NameTextBox, data[159], "NameTextBox");
            //Entering the value In Name Text box
            CommonFunctions.waitForElementTobeClickable(SearchButton);
            CommonFunctions.clickButtonOrLink(SearchButton, "Button", "SerachButton");
            //Clicking on Search Button
            CommonFunctions.waitForPageLoaded();
            CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
            CommonFunctions.clickButtonOrLink(ChooseColorWay, "Option", "Choose Button");
            //Clicking on Choose Button
            CommonFunctions.switchParentWindow();
		    driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
		    //Switching Frame
		    CommonFunctions.waitForPageLoaded();
		   // CommonFunctions.waitForElementTobeClickable(CostSheetDomesticOrDIDropDown);
		  //  CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetDomesticOrDIDropDown, data[188], "DomesticOrDIDropDown");
		    //Selecting Domestic or DI value
		    CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
		    CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "CyrrencyDropDown");
		    //Selecting the Currency Value
		    CommonFunctions.waitForElementTobeClickable(CostSheetComments);
		    CommonFunctions.enterTextInTextboxUpdated(CostSheetComments, data[190], "Comments Text Box");
		    //Entering the Comments inside the Comment Text Box
		    CommonFunctions.waitForElementTobeClickable(ColorWayFirstOption);
		    CommonFunctions.clickButtonOrLink(ColorWayFirstOption, "Option", "ColorwatFirstOption");
		    //Clicking ColorWay First Option
		    CommonFunctions.waitForElementTobeClickable(ColorwayAddButton);
		    CommonFunctions.clickButtonOrLink(ColorwayAddButton, "hyper Link", "Add");
		    //Clicking add  button
		    CommonFunctions.waitForElementTobeClickable(ProductDevelopmentCost);
		    CommonFunctions.enterTextInTextboxUpdated(ProductDevelopmentCost, data[193], "ProductDevelopmentCost");
		    //Entering ProductDevelopmentCost value
		    CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterial);
		    CommonFunctions.enterTextInTextboxUpdated(MasterCartonPackagingMaterial, data[194], "MasterCartonPackagingMaterial");
		    //Entering MasterCartonPackagingMaterial value
		    CommonFunctions.waitForElementTobeClickable(MasterCortonLaborCost);
		    CommonFunctions.enterTextInTextboxUpdated(MasterCortonLaborCost, data[195], "MasterCortonLaborCost");
		    //Entering MasterCortonLaborCost value
		    CommonFunctions.waitForElementTobeClickable(MisCellaneousCost);
		    CommonFunctions.enterTextInTextboxUpdated(MisCellaneousCost, data[196], "MisCellaneousCost");
		    //Entering MisCellaneousCost value
		    CommonFunctions.waitForElementTobeClickable(ProductMarkUp);
		    CommonFunctions.enterTextInTextboxUpdated(ProductMarkUp, data[197], "ProductMarkUp");
		   //Entering ProductMarkUp value
		    CommonFunctions.waitForElementTobeClickable(Discount);
		    CommonFunctions.enterTextInTextboxUpdated(Discount, data[198], "Discount");
		   //Entering Discount value
		    CommonFunctions.waitForElementTobeClickable(Length);
		    CommonFunctions.enterTextInTextboxUpdated(Length, data[199], "Length");
		   //Entering Length value
		    CommonFunctions.waitForElementTobeClickable(Width);
		    CommonFunctions.enterTextInTextboxUpdated(Width, data[200], "Width");
		   //Entering Width value
		    CommonFunctions.waitForElementTobeClickable(Height);
		    CommonFunctions.enterTextInTextboxUpdated(Height, data[201], "Height");
		   //Entering Height value
		    CommonFunctions.waitForElementTobeClickable(FOBHongKongByFCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBHongKongByFCL, data[202], "FOBHongKongByFCL");
		   //Entering FOBHongKongByFCL value
		    CommonFunctions.waitForElementTobeClickable(FOBHongKongByLCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBHongKongByLCL, data[203], "FOBHongKongByLCL");
		   //Entering FOBHongKongByLCL value
		    CommonFunctions.waitForElementTobeClickable(FOBChinaByFCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBChinaByFCL, data[204], "FOBChinaByFCL");
		   //Entering FOBChinaByFCL value
		    CommonFunctions.waitForElementTobeClickable(FOBChinaByLCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBChinaByLCL, data[205], "FOBChinaByLCL");
		   //Entering FOBChinaByLCL value
		    CommonFunctions.waitForElementTobeClickable(FOBOthersByFCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBOthersByFCL, data[206], "FOBOthersByFCL");
		   //Entering FOBOthersByFCL value
		    CommonFunctions.waitForElementTobeClickable(FOBOthersByLCL);
		    CommonFunctions.enterTextInTextboxUpdated(FOBOthersByLCL, data[207], "FOBOthersByLCL");
		   //Entering FOBOthersByLCL value
		    CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
		    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "WhatIfCostSheetSaveButton");
		    //Clicking WhatIfCostSheetSaveButton 
		     wait.until(ExpectedConditions.titleIs(data[144]));
		    CommonFunctions.waitForPageLoaded();
		     wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification));
		     CommonFunctions.waitForPageLoaded();
		     CommonFunctions.waitForElementTobeClickable(CostSheetDropDown);
		     CommonFunctions.clickButtonOrLink(CostSheetDropDown, "DropDown", "CostSheetDropDown");
		      GettingText(CostSheetIdentification);
		      log.info("Created Cost Sheet Name is "+ActualValue);
		    
		}
				catch(Exception e){
					fail=true;
					log.error("Exception in CreateWhatIfCostSheet"+e);
					throw e;
				}
		return ActualValue;
			}
	
	
	public static String CreateInternalCostSheetForAssortmentProduct(String [] data) throws Exception{
		try{
			MyCostSheetName=CommonFunctions.getRandomString(4);
			CommonFunctions.waitForElementTobeClickable(CostSheetNameTextBox);
			CommonFunctions.enterTextInTextboxUpdated(CostSheetNameTextBox, MyCostSheetName, "CostSheetName");
			//Entering CostSheetName
	      CommonFunctions.waitForElementTobeClickable(CostSheetWave);
	      CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetWave, data[161], "CostSheetWave");
	        //Selecting wave Value
	       CommonFunctions.waitForPageLoaded();
		   CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
		    CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "CyrrencyDropDown");
		    //Selecting the Currency Value
		    CommonFunctions.waitForElementTobeClickable(CostSheetComments);
		    CommonFunctions.enterTextInTextboxUpdated(CostSheetComments, data[190], "Comments Text Box");
		    //Entering the Comments inside the Comment Text Box
		    CommonFunctions.waitForElementTobeClickable(ColorWayFirstOption);
		    CommonFunctions.clickButtonOrLink(ColorWayFirstOption, "Option", "ColorwatFirstOption");
		    //Clicking ColorWay First Option
		    CommonFunctions.waitForElementTobeClickable(ColorwayAddButton);
		    CommonFunctions.clickButtonOrLink(ColorwayAddButton, "hyper Link", "Add");
		    //Clicking add  button
		    CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterial);
		    CommonFunctions.enterTextInTextboxUpdated(MasterCartonPackagingMaterial, data[194], "MasterCartonPackagingMaterial");
		    //Entering MasterCartonPackagingMaterial value
		    CommonFunctions.waitForElementTobeClickable(MasterCortonLaborCost);
		    CommonFunctions.enterTextInTextboxUpdated(MasterCortonLaborCost, data[195], "MasterCortonLaborCost");
		    //Entering MasterCortonLaborCost value
		    CommonFunctions.waitForElementTobeClickable(MisCellaneousCost);
		    CommonFunctions.enterTextInTextboxUpdated(MisCellaneousCost, data[196], "MisCellaneousCost");
		    //Entering MisCellaneousCost value
		    CommonFunctions.waitForElementTobeClickable(ProductMarkUp);
		    CommonFunctions.enterTextInTextboxUpdated(ProductMarkUp, data[197], "ProductMarkUp");
		   //Entering ProductMarkUp value
		     CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
		    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "WhatIfCostSheetSaveButton");
		    //Clicking WhatIfCostSheetSaveButton 
		     wait.until(ExpectedConditions.titleIs(data[144]));
		    CommonFunctions.waitForPageLoaded();
		     wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification));
		     CommonFunctions.waitForPageLoaded();
		     CommonFunctions.waitForElementTobeClickable(CostSheetDropDown);
		     CommonFunctions.clickButtonOrLink(CostSheetDropDown, "DropDown", "CostSheetDropDown");
		      GettingText(CostSheetIdentification);
		      log.info("Created Cost Sheet Name is "+ActualValue);
		    
		}
				catch(Exception e){
					fail=true;
					log.error("Exception in CreateInternalCostSheetForAssortmentProduct"+e);
					throw e;
				}
		return ActualValue;
			}
	
	
	public static boolean MakeDefaultValuesOfCostSheet(String [] data) throws Exception{
		try
		{
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		    // System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[179]))
  		     {
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  		     CommonFunctions.waitForPageLoaded();
  		     break;
  		     }
  		     }
        	CommonFunctions.waitForElementTobeClickable(BOMInInternalCostSheet);
			CommonFunctions.clickButtonOrLink(BOMInInternalCostSheet, "DropDown", "BOM");
			CommonFunctions.waitForPageLoaded();
			Select dropdDown1 = new Select(driver.findElement(By.xpath("//td[contains(text(),'BOM')]//following::select[1]")));
		     List<WebElement> allOptions1=dropdDown1.getOptions();
            for(int i=0;i<allOptions1.size();i++){
 		     String RequiredValue=allOptions1.get(i).getText();
 		     //System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[388]))
 		     {
 		   CommonFunctions.selectFromDropDownByVisibleTextUpdated(BOMInInternalCostSheet, RequiredValue, "Source DropDown Selection");
 		   break;
 		     }
           }
			CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
		    CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "CyrrencyDropDown");
		    CommonFunctions.waitForElementTobeClickable(MasterCartonPackagingMaterial);
		    CommonFunctions.clearTextBox(MasterCartonPackagingMaterial, "MasterCartonPackagingMaterial");
		    CommonFunctions.enterTextInTextboxUpdated(MasterCartonPackagingMaterial, data[194], "MasterCartonPackagingMaterial");
		    //Entering MasterCartonPackagingMaterial value
		    CommonFunctions.waitForElementTobeClickable(MasterCortonLaborCost);
		    CommonFunctions.clearTextBox(MasterCortonLaborCost, "MasterCortonLaborCost");
		    CommonFunctions.enterTextInTextboxUpdated(MasterCortonLaborCost, data[195], "MasterCortonLaborCost");
		    //Entering MasterCortonLaborCost value
		    CommonFunctions.waitForElementTobeClickable(MisCellaneousCost);
		    CommonFunctions.clearTextBox(MisCellaneousCost, "MisCellaneousCost");
		    CommonFunctions.enterTextInTextboxUpdated(MisCellaneousCost, data[196], "MisCellaneousCost");
		    //Entering MisCellaneousCost value
		    CommonFunctions.waitForElementTobeClickable(ProductMarkUp);
		    CommonFunctions.clearTextBox(ProductMarkUp, "ProductMarkUp");
		    CommonFunctions.enterTextInTextboxUpdated(ProductMarkUp, data[197], "ProductMarkUp");
		   //Entering ProductMarkUp value
		     CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
		    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "WhatIfCostSheetSaveButton");
		    //Clicking WhatIfCostSheetSaveButton 
		     wait.until(ExpectedConditions.titleIs(data[144]));
		    CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
		fail=true;
		log.error("Exception in MakeDefaultValuesOfCostSheet");
		throw e ;
	}
		return true;
		
	}
	
	public static String CreateInternalCostSheetForRetailItemInternal(String [] data) throws Exception{
		try{
			MyCostSheetName=CommonFunctions.getRandomString(4);
			CommonFunctions.waitForElementTobeClickable(CostSheetNameTextBox);
			CommonFunctions.enterTextInTextboxUpdated(CostSheetNameTextBox, MyCostSheetName, "CostSheetName");
			//Entering CostSheetName
	     /* CommonFunctions.waitForElementTobeClickable(CostSheetWave);
	      CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetWave, data[161], "CostSheetWave");*/
	        //Selecting wave Value
	      //CommonFunctions.waitForPageLoaded();
		   CommonFunctions.waitForElementTobeClickable(CostSheetCurrencyDropDown);
		    CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetCurrencyDropDown, data[168], "CyrrencyDropDown");
		    //Selecting the Currency Value
		    CommonFunctions.waitForElementTobeClickable(CostSheetComments);
		    CommonFunctions.enterTextInTextboxUpdated(CostSheetComments, data[190], "Comments Text Box");
		    //Entering the Comments inside the Comment Text Box
		    CommonFunctions.waitForElementTobeClickable(ColorWayFirstOption);
		    CommonFunctions.clickButtonOrLink(ColorWayFirstOption, "Option", "ColorwatFirstOption");
		    //Clicking ColorWay First Option
		    CommonFunctions.waitForElementTobeClickable(ColorwayAddButton);
		    CommonFunctions.clickButtonOrLink(ColorwayAddButton, "hyper Link", "Add");
		    //Clicking add  button
		    CommonFunctions.waitForElementTobeClickable(PlasticMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(PlasticMaterialTextBox, data[231], "PlasticMaterialTextBox");
		    //Entering the Value In Plastic material
		    CommonFunctions.waitForElementTobeClickable(PackagingMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(PackagingMaterialTextBox, data[230], "PackagingMaterialTextBox");
		    //Entering the Value In Packaging material
		    CommonFunctions.waitForElementTobeClickable(ChemicalMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(ChemicalMaterialTextBox, data[232], "ChemicalMaterialTextBox");
		    //Entering the Value In Chemical material
		    CommonFunctions.waitForElementTobeClickable(PurchasedMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(PurchasedMaterialTextBox, data[233], "ChemicalMaterialTextBox");
		    //Entering the Value In Purchased material
		    CommonFunctions.waitForElementTobeClickable(ElectronicMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(ElectronicMaterialTextBox, data[234], "ElectronicMaterialTextBox");
		    //Entering the Value In Electronic material
		    CommonFunctions.waitForElementTobeClickable(SoftGoodMaterialTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(SoftGoodMaterialTextBox, data[235], "SoftGoodMaterialTextBox");
		    //Entering the Value In Soft Goods material
		    CommonFunctions.waitForElementTobeClickable(GeneralDecoLaborTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(GeneralDecoLaborTextBox, data[236], "GeneralDecoLaborTextBox");
		    //Entering the Value In General Deco Labor material
		    CommonFunctions.waitForElementTobeClickable(MoldinglaborCostTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(MoldinglaborCostTextBox, data[237], "MoldinglaborCostTextBox");
		    //Entering the Value In Molding Labor material
		    CommonFunctions.waitForElementTobeClickable(ContentMarkUpTextBox);
		    CommonFunctions.enterTextInTextboxUpdated(ContentMarkUpTextBox, data[238], "ContentMarkUpTextBox");
		    //Entering the Value In Mark Up material
		    CommonFunctions.waitForElementTobeClickable(RetailItemCostSheetQuoteCurrecny);
		    CommonFunctions.enterTextInTextboxUpdated(RetailItemCostSheetQuoteCurrecny, data[239], "RetailItemQuoteCurrecny");
		    //Entering Retail item Cost Sheet Values
		     CommonFunctions.waitForElementTobeClickable(WhatIfCostSheetSaveButton);
		    CommonFunctions.clickButtonOrLink(WhatIfCostSheetSaveButton, "Button", "WhatIfCostSheetSaveButton");
		    //Clicking WhatIfCostSheetSaveButton 
		     wait.until(ExpectedConditions.titleIs(data[144]));
		    CommonFunctions.waitForPageLoaded();
		     wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetIdentification));
		     CommonFunctions.waitForPageLoaded();
		     CommonFunctions.waitForElementTobeClickable(CostSheetDropDown);
		     CommonFunctions.clickButtonOrLink(CostSheetDropDown, "DropDown", "CostSheetDropDown");
		      GettingText(CostSheetIdentification);
		      log.info("Created Cost Sheet Name is "+ActualValue);
		    
		}
				catch(Exception e){
					fail=true;
					log.error("Exception in CreateInternalCostSheetForAssortmentProduct"+e);
					throw e;
				}
		return ActualValue;
			}
	
	
	
	
	
	public static boolean AssertionVerficationOfCostSheetTypeforWhatIf(String [] data) throws Exception{
		try{
		   CommonFunctions.waitForElementTobeClickable(CostingActionDropDown);
			 Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='costingActions']")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[191]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostingActionDropDown, RequiredValue, "Costing Drop down");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
 		     }
			wait.until(ExpectedConditions.titleIs(data[143]));
			CommonFunctions.waitForPageLoaded();
			CostingType=By.linkText(data[181]);
			CommonFunctions.waitForElementTobeClickable(CostingType);
			CommonFunctions.clickButtonOrLink(CostingType, "HyperLink", "CostingType");
			//Clicking on Costing Type
			wait.until(ExpectedConditions.titleIs(data[147]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetType);
			GettingText(CostSheetType);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[192], "Actual and Expected Cost sheet Type are not matched.Please Verify");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfCostSheetType"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationOfCostSheetTypeforWhatIf_TC_24(String [] data) throws Exception{
		try{
		  CommonFunctions.waitForElementTobeClickable(CostingActionDropDown);
			 Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='costingActions']")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[191]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostingActionDropDown, RequiredValue, "Costing Drop down");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
 		     }
			wait.until(ExpectedConditions.titleIs(data[191]));
			CommonFunctions.waitForPageLoaded();
			CostingType=By.linkText(data[181]);
			CommonFunctions.waitForElementTobeClickable(CostingType);
			CommonFunctions.clickButtonOrLink(CostingType, "HyperLink", "CostingType");
			//Clicking on Costing Type
			wait.until(ExpectedConditions.titleIs(data[191]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetType);
			GettingText(CostSheetType);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[192], "Actual and Expected Cost sheet Type are not matched.Please Verify");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfCostSheetType"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationOfCostSheetTypefoCostSheet(String [] data) throws Exception{
		try{
		  CommonFunctions.waitForElementTobeClickable(CostingActionDropDown);
			 Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='costingActions']")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[191]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostingActionDropDown, RequiredValue, "Costing Drop down");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
 		     }
			wait.until(ExpectedConditions.titleIs(data[143]));
			CommonFunctions.waitForPageLoaded();
			CostingType=By.linkText(data[181]);
			CommonFunctions.waitForElementTobeClickable(CostingType);
			CommonFunctions.clickButtonOrLink(CostingType, "HyperLink", "CostingType");
			//Clicking on Costing Type
			wait.until(ExpectedConditions.titleIs(data[143]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetType);
			GettingText(CostSheetType);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[192], "Actual and Expected Cost sheet Type are not matched.Please Verify");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfCostSheetType"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationOTypeOfCostSheetforAssortmentType(String [] data) throws Exception{
		try{
		  CommonFunctions.waitForElementTobeClickable(CostingActionDropDown);
			 Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='costingActions']")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[191]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostingActionDropDown, RequiredValue, "Costing Drop down");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
 		     }
			//wait.until(ExpectedConditions.titleIs(data[143]));
			//CommonFunctions.waitForPageLoaded();
			//CostingType=By.linkText(data[181]);
			//CommonFunctions.waitForElementTobeClickable(CostingType);
			//CommonFunctions.clickButtonOrLink(CostingType, "HyperLink", "CostingType");
			//Clicking on Costing Type
			wait.until(ExpectedConditions.titleIs(data[143]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetType);
			GettingText(CostSheetType);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[192], "Actual and Expected Cost sheet Type are not matched.Please Verify");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfCostSheetType"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationOTypeOfInternalCostSheetforAssortmentType(String [] data) throws Exception{
		try{
		  CommonFunctions.waitForElementTobeClickable(CostingActionDropDown);
			 Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='costingActions']")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[191]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostingActionDropDown, RequiredValue, "Costing Drop down");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
 		     }
			wait.until(ExpectedConditions.titleIs(data[143]));
			CommonFunctions.waitForPageLoaded();
			CostingType=By.linkText(data[181]);
			CommonFunctions.waitForElementTobeClickable(CostingType);
			CommonFunctions.clickButtonOrLink(CostingType, "HyperLink", "CostingType");
			//Clicking on Costing Type
			wait.until(ExpectedConditions.titleIs(data[143]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetType);
			GettingText(CostSheetType);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[192], "Actual and Expected Cost sheet Type are not matched.Please Verify");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfCostSheetType"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerficationOTypeOfInternalCostSheetforRetailItem(String [] data) throws Exception{
		try{
		  CommonFunctions.waitForElementTobeClickable(CostingActionDropDown);
			 Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='costingActions']")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
 		     String RequiredValue=allOptions.get(i).getText();
 		    // System.out.println(RequiredValue);
 		     if(RequiredValue.contains(data[191]))
 		     {
 		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostingActionDropDown, RequiredValue, "Costing Drop down");
 		     CommonFunctions.waitForPageLoaded();
 		     break;
 		     }
 		     }
			wait.until(ExpectedConditions.titleIs(data[191]));
			CommonFunctions.waitForPageLoaded();
			CostingType=By.linkText(data[181]);
			CommonFunctions.waitForElementTobeClickable(CostingType);
			CommonFunctions.clickButtonOrLink(CostingType, "HyperLink", "CostingType");
			//Clicking on Costing Type
			wait.until(ExpectedConditions.titleIs(data[191]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetType);
			GettingText(CostSheetType);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[334], "Actual and Expected Cost sheet Type are not matched.Please Verify");
			log.info(" ***Validate Type Attribute-validated ***");
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerficationOfCostSheetType"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean NavigateToCostingTab(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(ClickAgainProduct));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(ClickAgainProduct, "HyperLink", "Product HyperLink");
			//Clicking on Product HyperLink
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[144]));
			wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingHyperLink));
			CommonFunctions.clickButtonOrLink(SourcingHyperLink, "SourcingHyperLink","Sourcing");
			//Clicking on Sourcing Tab
		
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostingHyperLink));
			//CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(CostingHyperLink, "HyperLink", "Costing");
			//Clicking on Costing Link
		    wait.until(ExpectedConditions.visibilityOfElementLocated(SortOption));
		    CommonFunctions.waitForPageLoaded();
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToCostingTab"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean NavigateToCostSheetCompareTab(String [] data) throws Exception{
		try{
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetCompareTab));
		    CommonFunctions.clickButtonOrLink(CostSheetCompareTab, "HyperLink", "CostSheetCompareTab");
			//Clicking on Cost Sheet Compare tab
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToCostingTab"+e);
			throw e;
		}
		return true;
	}
	public static boolean NavigateToCostingTabForOtherUser(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ProductSelectionAgainForOtherUser);
			CommonFunctions.clickButtonOrLink(ProductSelectionAgainForOtherUser, "HyperLink", "Product HyperLink");
			//Clicking on Product HyperLink
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForElementTobeClickable(SourcingHyperLink);
			CommonFunctions.clickButtonOrLink(SourcingHyperLink, "SourcingHyperLink","Sourcing");
			//Clicking on Sourcing Tab
		
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostingHyperLink));
			//CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(CostingHyperLink, "HyperLink", "Costing");
			//Clicking on Costing Link
		    wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToCostingTab"+e);
			throw e;
		}
		return true;
	}
	public static String AddSpecification(String[] data) throws Exception{
		try{
			//Add Specification
		/*CommonFunctions.waitForElementTobeClickable(Specifications.specificationsTablink);
			CommonFunctions.clickButtonOrLink(Specifications.specificationsTablink, "link", "specifications tab");
            CommonFunctions.waitForPageLoaded();*/
			CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.selectSpecification);
			Select dropDownSpec = new Select(SeleniumDriver.driver.findElement(InternalBOMSoftG.selectSpecification));
			List<WebElement> elementCount = dropDownSpec.getOptions();
			int count =elementCount.size();
			if(count>=2)
			{
				CommonFunctions.selectFromDropDownByIndex(InternalBOMSoftG.selectSpecification, 1);
				wait.until(ExpectedConditions.visibilityOfElementLocated(InternalBOMSoftG.selectSpecification));
				wait.until(ExpectedConditions.titleIs(data[144]));
				CommonFunctions.waitForPageLoaded();
				//CommonFunctions.waitForElementTobeClickable(InternalBOMSoftG.selectSpecification);
				InternalBOMSoftG.strSpec=new Select(driver.findElement(InternalBOMSoftG.selectSpecification)).getFirstSelectedOption().getText();
			
			}
			else
			{
				InternalBOMSoftG.strSpec= CommonProjectFunctions.Create_Specifications(data[161],data[190]);
				CommonFunctions.selectFromDropDownByIndex(InternalBOMSoftG.selectSpecification, 1);
				InternalBOMSoftG.strSpec=new Select(driver.findElement(InternalBOMSoftG.selectSpecification)).getFirstSelectedOption().getText();
			}
			log.info("Specification is: "+InternalBOMSoftG.strSpec);
		/*	CommonFunctions.waitForElementTobeClickable(ColorWayDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(ColorWayDropDown,data[212] , "ColorWayDropDown");
			CommonFunctions.waitForPageLoaded();*/
			
			
		}catch(Exception e){
			fail=true;
			log.error("Exception in AddSpecification", e);
			throw e;
		}
		
		return InternalBOMSoftG.strSpec;
	}
	public static boolean AssertionVerficationOfInternalUseCostSheetElements(String [] data) throws Exception
	{
		try{
			CommonFunctions.waitForElementTobeClickable(CostSheetTemplateListValue);
			CommonFunctions.clickButtonOrLink(CostSheetTemplateListValue, "Hyper Link", "CostSheetTemplateListValue");
			//Clicking on CoSt Sheet template
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(ForecastQtyValue);
			GettingText(ForecastQtyValue);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[189], "Actual And Expected Cost Sheet ForeCast Qty is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Cost Sheet ForcasetQty Value
            CommonFunctions.waitForElementTobeClickable(HFEFOBValue);
			GettingText(HFEFOBValue);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[183], "Actual And Expected Cost Sheet HFEFOBValue is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Cost Sheet HFEFOBValue Value
            CommonFunctions.waitForElementTobeClickable(FCLYTFreightPCvalue);
			GettingText(FCLYTFreightPCvalue);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[184], "Actual And Expected Cost Sheet FCLYTFreightPCvalue is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Cost Sheet FCLYTFreightPCvalue Value
            CommonFunctions.waitForElementTobeClickable(LCLYTFreightPC);
			GettingText(LCLYTFreightPC);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[185], "Actual And Expected Cost Sheet LCLYTFreightPC is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Cost Sheet LCLYTFreightPC Value
            CommonFunctions.waitForElementTobeClickable(FCLHKFreightPC);
			GettingText(FCLHKFreightPC);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[186], "Actual And Expected Cost Sheet FCLHKFreightPC is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Cost Sheet FCLHKFreightPC Value
            CommonFunctions.waitForElementTobeClickable(LCLHKFreightPC);
			GettingText(LCLHKFreightPC);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[187], "Actual And Expected Cost Sheet FCLHKFreightPC is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Cost Sheet LCLHKFreightPC Value
        }
		catch(Exception e){
			fail=true;
			log.error("exception in AssertionVerficationOfInternalUseCostSheetElements");
			throw e;
		}
		return true;
	}
		
	
public static boolean AssertionVerficationOfCostSheetElements(String [] data)
	{
		try{
			CommonFunctions.waitForElementTobeClickable(WhatIfTypeAttribute);
			GettingText(WhatIfTypeAttribute);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[181], "Actual And Expected Cost Sheet Type is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Type
			CommonFunctions.waitForElementTobeClickable(ProductTypeValue);
			GettingText(ProductTypeValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[11], "Actual And Expected  Cost Sheet Product Type is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Product Type
			CommonFunctions.waitForElementTobeClickable(WaveValue);
			GettingText(WaveValue);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[161], "Actual And Expected Wave Value is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Wave Value
            CommonFunctions.waitForElementTobeClickable(DomesticOrDIValue);
			GettingText(DomesticOrDIValue);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[188], "Actual And Expected Wave Value is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet DomesticOrDIValue Value
            CommonFunctions.waitForElementTobeClickable(CostSheetStatusValue);
			GettingText(CostSheetStatusValue);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[182], "Actual And Expected Cost Sheet Status Value is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Cost Sheet Status Value
            CommonFunctions.waitForElementTobeClickable(CurrencyType);
			GettingText(CurrencyType);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[168], "Actual And Expected Cost Sheet Currency Type Value is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Currency Value
            CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
			GettingText(CurrencyConversionRate);
			CommonFunctions.AssertEqualsVerification(ActualValue,data[174], "Actual And Expected Cost Sheet  Currency Conversion Value Are not matched.Assertion failed.please check");
            //Verifying the Cost Sheet Currency Conversion rate
			CommonFunctions.waitForElementTobeClickable(ColorwayValue);
			GettingText(ColorwayValue);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[160], "Actual And Expected Cost Sheet ColorWay Value is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Cost Sheet Status Value
            CommonFunctions.waitForElementTobeClickable(RepresentativeColorWay);
			GettingText(RepresentativeColorWay);
            CommonFunctions.AssertEqualsVerification(ActualValue, data[160], "Actual And Expected Cost Sheet Representative ColorWay Value is Not matched.Assertion Faile.Please Check");
			//Verifying Cost Sheet Cost Sheet Status Value
            
            }
		catch(Exception e){
			fail=true;
			log.error("exception in AssertionVerficationOfCostSheetElements");
			throw e;
		}
		return true;
	}
	
	
	
	public static boolean UpdateCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CostSheetUpdateButton);
			Select dropdDown = new Select(driver.findElement(By.xpath("//div[@id='costSheetResults']/table/tbody/tr[1]/td/table/tbody/tr/td[2]/select")));
		     List<WebElement> allOptions=dropdDown.getOptions();
            for(int i=0;i<allOptions.size();i++){
  		     String RequiredValue=allOptions.get(i).getText();
  		    // System.out.println(RequiredValue);
  		     if(RequiredValue.contains(data[179]))
  		     {
  		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetUpdateButton, RequiredValue, "Source DropDown Selection");
  		     CommonFunctions.waitForPageLoaded();
  		     break;
  		     }
  		     }
            wait.until(ExpectedConditions.titleIs(data[180]));
            CommonFunctions.gettingParentWindow();
            CommonFunctions.waitForElementTobeClickable(FactoryCodeHyperLink);
            CommonFunctions.clickButtonOrLink(FactoryCodeHyperLink, "HyperLink", "FactoryCode");
            //Clicking on Factory Code
            CommonFunctions.switchingChildWindow();
            CommonFunctions.waitForElementTobeClickable(NameTextBox);
            CommonFunctions.enterTextInTextboxUpdated(NameTextBox, data[159], "NameTextBox");
            //Entering the value In Name Text box
            CommonFunctions.waitForElementTobeClickable(SearchButton);
            CommonFunctions.clickButtonOrLink(SearchButton, "Button", "SerachButton");
            //Clicking on Search Button
            CommonFunctions.waitForPageLoaded();
            CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
            CommonFunctions.clickButtonOrLink(ChooseColorWay, "Option", "Choose Button");
            //Clicking on Choose Button
            CommonFunctions.switchParentWindow();
		    driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
		    //Switching Frame
		    CommonFunctions.waitForPageLoaded();
		    CommonFunctions.waitForElementTobeClickable(UpdateCostSheetSaveButton);
		    CommonFunctions.clickButtonOrLink(UpdateCostSheetSaveButton, "Button", "Save");
		    //Clicking on Save Button
		    CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.titleIs(data[144]));
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateCostSheet"+e);
			throw e;
		}
		return true;
	}
	
	public static  boolean AssertionVerificationOfCreatedOfVendorProductCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CurrencyType);
			GettingText(CurrencyType);
			if(ActualValue.trim().equals(data[168])){
				CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
				GettingText(CurrencyConversionRate);
				CommonFunctions.AssertEqualsVerification(ActualValue,data[175], "Actual And Expected Currency ConversionValue Are not matched.Assertion failed.please check");
				//Assertion Verification Of HKD Currency Conversion value Verification
				}
			else
			{
				CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
				GettingText(CurrencyConversionRate);
				CommonFunctions.AssertEqualsVerification(ActualValue,data[174], "Actual And Expected Currency ConversionValue Are not matched.Assertion failed.please check");
				//Assertion Verification Of USD Currency Conversion value Verification
			}
			CommonFunctions.waitForElementTobeClickable(ContentTableValue);
			GettingText(ContentTableValue);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[171]+data[173], "Actual and Expected Vendor Product cost Sheet Is Not Found.Assertion Failed.Please check");
			//Assertion Verification of Vendor Product Cost Sheet
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOfCreatedOfVendorProductCostSheet"+e);
			throw e;
		}
		return true;
	}
	
	public static  boolean AssertionVerificationOfCreatedSecondRetailItemInProductVendorCostSheet(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(CurrencyType);
			GettingText(CurrencyType);
			if(ActualValue.trim().equals(data[168])){
				CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
				GettingText(CurrencyConversionRate);
				CommonFunctions.AssertEqualsVerification(ActualValue,data[175], "Actual And Expected Currency ConversionValue Are not matched.Assertion failed.please check");
				//Assertion Verification Of HKD Currency Conversion value Verification
				}
			else
			{
				CommonFunctions.waitForElementTobeClickable(CurrencyConversionRate);
				GettingText(CurrencyConversionRate);
				CommonFunctions.AssertEqualsVerification(ActualValue,data[174], "Actual And Expected Currency ConversionValue Are not matched.Assertion failed.please check");
				//Assertion Verification Of USD Currency Conversion value Verification
			}
			CommonFunctions.waitForElementTobeClickable(ContentTableValue2);
			GettingText(ContentTableValue2);
			CommonFunctions.AssertEqualsVerification(ActualValue, data[265]+data[173], "Actual and Expected Vendor Product cost Sheet Is Not Found.Assertion Failed.Please check");
			//Assertion Verification of Vendor Product Cost Sheet
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in AssertionVerificationOfCreatedSecondRetailItemInProductVendorCostSheet"+e);
			throw e;
		}
		return true;
	}
	
	public static  boolean FillingContentTable(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(WaveTable);
			CommonFunctions.clickButtonOrLink(WaveTable, "Table", "wavetable");
			CommonFunctions.waitForElementTobeClickable(DropDownOfWaveTable);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(DropDownOfWaveTable, data[161], "waveDropDown");
			//Clicking Wave Table value
			CommonFunctions.waitForElementTobeClickable(UnitRatioTable);
			CommonFunctions.clickButtonOrLink(UnitRatioTable, "table", "UnitRatiotable");
			CommonFunctions.waitForElementTobeClickable(UnitRatioTableTextBox);
			CommonFunctions.enterTextInTextboxUpdated(UnitRatioTableTextBox, data[172], "UnitRatioTextBox");
			//Entering a Unit Price value
			CommonFunctions.waitForElementTobeClickable(ProductSource);
			CommonFunctions.clickButtonOrLink(ProductSource, "table", "Product Source");
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(ProductSourceDropDown);
			CommonFunctions.clickButtonOrLink(ProductSourceDropDown, "Drop-Down", "ProductSourceDropDown");
			Thread.sleep(2000);
			Select dropdDown = new Select(driver.findElement(By.xpath("//td[@id='r1_hbProductSourceCostingMOA']/div/select[1]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
   		     String RequiredValue=allOptions.get(i).getText();
   		     //System.out.println(RequiredValue);
   		     if(RequiredValue.contains(data[178]))
   		     {
   		     CommonFunctions.waitForPageLoaded();
   		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ProductSourceDropDown, RequiredValue, "Source DropDown Selection");
   		     break;
   		     }
             }
   		     CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
   		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
   		     //Clicking Done Button
   		     CommonFunctions.waitForPageLoaded();
   		     wait.until(ExpectedConditions.titleIs(data[144]));
   		     }
			
			catch(Exception e){
				fail=true;
				log.error("Exception in FillingContentTable"+e);
				throw e;
			}
			return true;
	}
	public static  boolean FillingContentTable_TC24(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(WaveTable1);
			CommonFunctions.clickButtonOrLink(WaveTable1, "Table", "wavetable");
			CommonFunctions.waitForElementTobeClickable(DropDownOfWaveTable1);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(DropDownOfWaveTable1, data[161], "waveDropDown");
			//Clicking Wave Table value
			CommonFunctions.waitForElementTobeClickable(UnitRatioTable1);
			CommonFunctions.clickButtonOrLink(UnitRatioTable1, "table", "UnitRatiotable");
			CommonFunctions.waitForElementTobeClickable(UnitRatioTableTextBox1);
			CommonFunctions.enterTextInTextboxUpdated(UnitRatioTableTextBox1, data[172], "UnitRatioTextBox");
			//Entering a Unit Price value
		    CommonFunctions.waitForElementTobeClickable(ProductSource1);
			CommonFunctions.clickButtonOrLink(ProductSource1, "Drop-Down", "ProductSourceDropDown");
			wait.until(ExpectedConditions.visibilityOfElementLocated(ProductSourceDropDown1));
			CommonFunctions.clickButtonOrLink(ProductSourceDropDown1, "DropDown", "Product Source");
			Thread.sleep(2000);
			Select dropdDown = new Select(driver.findElement(By.xpath("//td[@id='r2_hbProductSourceCostingMOA']/div/select[1]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
   		     String RequiredValue=allOptions.get(i).getText();
   		     //System.out.println(RequiredValue);
   		     if(RequiredValue.contains(data[178]))
   		     {
   		     CommonFunctions.waitForPageLoaded();
   		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ProductSourceDropDown1, RequiredValue, "Source DropDown Selection");
   		     break;
   		     }
             }
   		     CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
   		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
   		     //Clicking Done Button
   		     CommonFunctions.waitForPageLoaded();
   		     wait.until(ExpectedConditions.titleIs(data[144]));
   		     }
			
			catch(Exception e){
				fail=true;
				log.error("Exception in FillingContentTable"+e);
				throw e;
			}
			return true;
	}
	
	public static  boolean FillingContentTableForRFQ(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(WaveTable);
			CommonFunctions.clickButtonOrLink(WaveTable, "Table", "wavetable");
			CommonFunctions.waitForElementTobeClickable(DropDownOfWaveTable);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(DropDownOfWaveTable, data[161], "waveDropDown");
			//Clicking Wave Table value
			CommonFunctions.waitForElementTobeClickable(UnitRatioTable);
			CommonFunctions.clickButtonOrLink(UnitRatioTable, "table", "UnitRatiotable");
			CommonFunctions.waitForElementTobeClickable(UnitRatioTableTextBox);
			CommonFunctions.enterTextInTextboxUpdated(UnitRatioTableTextBox, data[172], "UnitRatioTextBox");
			//Entering a Unit Price value
			 CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
   		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
   		     //Clicking Done Button
   		     CommonFunctions.waitForPageLoaded();
   		     wait.until(ExpectedConditions.titleIs(data[144]));
   		     }
			
			catch(Exception e){
				fail=true;
				log.error("Exception in FillingContentTable"+e);
				throw e;
			}
			return true;
	}
	
	public static  boolean FillingContentTable1(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(WaveTable1);
			CommonFunctions.clickButtonOrLink(WaveTable1, "Table", "wavetable");
			CommonFunctions.waitForElementTobeClickable(DropDownOfWaveTable1);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(DropDownOfWaveTable1, data[161], "waveDropDown");
			//Clicking Wave Table value
			CommonFunctions.waitForElementTobeClickable(UnitRatioTable1);
			CommonFunctions.clickButtonOrLink(UnitRatioTable1, "table", "UnitRatiotable");
			CommonFunctions.waitForElementTobeClickable(UnitRatioTableTextBox1);
			CommonFunctions.enterTextInTextboxUpdated(UnitRatioTableTextBox1, data[172], "UnitRatioTextBox");
			//Entering a Unit Price value
			CommonFunctions.waitForElementTobeClickable(ProductSource1);
			CommonFunctions.clickButtonOrLink(ProductSource1, "table", "Product Source");
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(ProductSourceDropDown1);
			CommonFunctions.clickButtonOrLink(ProductSourceDropDown1, "Drop-Down", "ProductSourceDropDown");
			Thread.sleep(2000);
			Select dropdDown = new Select(driver.findElement(By.xpath("//td[@id='r2_hbProductSourceCostingMOA']/div/select[1]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
   		     String RequiredValue=allOptions.get(i).getText();
   		     //System.out.println(RequiredValue);
   		     if(RequiredValue.contains(data[178]))
   		     {
   		     CommonFunctions.waitForPageLoaded();
   		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ProductSourceDropDown1, RequiredValue, "Source DropDown Selection");
   		     break;
   		     }
             }
   		     CommonFunctions.waitForElementTobeClickable(CostSheetDoneButton);
   		     CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
   		     //Clicking Done Button
   		     CommonFunctions.waitForPageLoaded();
   		     wait.until(ExpectedConditions.titleIs(data[144]));
   		     
             }
			
			catch(Exception e){
				fail=true;
				log.error("Exception in FillingContentTable"+e);
				throw e;
			}
			return true;
	}
	

	public static boolean SearchingTheCostSheet(String [] data) throws Exception{
		try{
			 CommonFunctions.waitForElementTobeClickable(SortOption);
			 CommonFunctions.clickButtonOrLink(SortOption, "Button", "SortOption");
			 //Clicking on Sort Button
			 CommonFunctions.waitForPageLoaded();
			 //wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(SortTable));
			 CommonFunctions.waitForElementTobeClickable(FirstSortDropDown);
			 CommonFunctions.selectFromDropDownByVisibleTextUpdated(FirstSortDropDown, data[176], "First Sort By DropDown");
			 //Clicking the Value On SortBy Drop down
			 CommonFunctions.waitForElementTobeClickable(SecondSortDropDown);
			 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SecondSortDropDown, data[177], "Second Sort By DropDown");
			 //Clicking order on sort
			 CommonFunctions.waitForElementTobeClickable(SortButton);
			 CommonFunctions.clickButtonOrLink(SortButton, "Button", "Sort Button");
			 //Clicking Sort Button
			 wait.until(ExpectedConditions.titleIs(data[144]));
			 CommonFunctions.waitForPageLoaded();
		
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in SearchingCostSheet");
			throw e;
			
		}
		return true;
	}
	
	public static boolean NavigateToRFQThroughSideBar(String [] data) throws Exception{
		try{
			CommonFunctions.waitForPageLoaded(); 
			driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
			CommonFunctions.waitForElementTobeClickable(SideBarRFQ);
			CommonFunctions.clickButtonOrLink(SideBarRFQ, "HyperLink", "RFQ HyperLink");
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToRFQThroughSideBar"+e);
			throw e;
		}
		catch(AssertionError er){
			fail=true;
			log.error("Assertion Error in NavigateToRFQThroughSideBar"+er);
			throw er;
		}
		return true;
		}
	
	public static boolean NavigateToCostSheetThroughSideBar(String [] data) throws Exception{
		try{
			CommonFunctions.waitForPageLoaded(); 
			driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
			CommonFunctions.waitForElementTobeClickable(SideBarCosting);
			CommonFunctions.clickButtonOrLink(SideBarCosting, "HyperLink", "Costing HyperLink");
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToRFQThroughSideBar"+e);
			throw e;
		}
		catch(AssertionError er){
			fail=true;
			log.error("Error in CreateProductFromLineSheet"+er);
			throw er;
		}
		return true;
		}
	public static boolean AddRetailItemColorWay(String [] data) throws Exception{
		try{
			 CommonFunctions.waitForElementTobeClickable(SortOption);
			 CommonFunctions.clickButtonOrLink(SortOption, "Button", "SortOption");
			 //Clicking on Sort Button
			 CommonFunctions.waitForPageLoaded();
			 //wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(SortTable));
			 CommonFunctions.waitForElementTobeClickable(FirstSortDropDown);
			 CommonFunctions.selectFromDropDownByVisibleTextUpdated(FirstSortDropDown, data[176], "First Sort By DropDown");
			 //Clicking the Value On SortBy Drop down
			 CommonFunctions.waitForElementTobeClickable(SecondSortDropDown);
			 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SecondSortDropDown, data[177], "Second Sort By DropDown");
			 //Clicking order on sort
			 CommonFunctions.waitForElementTobeClickable(SortButton);
			 CommonFunctions.clickButtonOrLink(SortButton, "Button", "Sort Button");
			 //Clicking Sort Button
			 CommonFunctions.waitForPageLoaded();
			   wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection));
			    CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "Cost Sheet HyperLink");
			    //Clicking on CostSheet HyperLink
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetHyperLink));
			    CommonFunctions.clickButtonOrLink(CostSheetHyperLink, "HyperLink", "CostSheetHyperLink");
			    //Clicking on CostSheet HyperLink
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(ProductColorWay);
			    CommonFunctions.clickButtonOrLink(ProductColorWay, "textBox", "Product ColrWayTextBox");
			    //Clicking on Product colorway Text Box
			    CommonFunctions.gettingParentWindow();
			    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
			    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
			    //Clicking productColorWayHyperLink 
			    CommonFunctions.switchingChildWindow();
			    //Switching Child window
			    ColorWayType=By.linkText(data[170]);
			    CommonFunctions.waitForElementTobeClickable(ColorWayType);
			    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
			    //Clicking on Retail Item
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ProductNumberTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(ProductNumberTextBox, data[171], "ProductNumber");
			    //Entering a Product Number
			    CommonFunctions.waitForElementTobeClickable(SearchButton);
			    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
			    //Clicking Search Button
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
			    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
			    //Clicking on Choose Button
			    CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			  
		   }
		catch(Exception e){
			fail=true;
			log.error("Exception in AddRetailItemColorWay"+e);
			throw e;
		}
		return true;
		}
	public static boolean AddRetailItemColorWayForCostSheet(String [] data) throws Exception{
		try{
			 CommonFunctions.waitForElementTobeClickable(SortOption);
			 CommonFunctions.clickButtonOrLink(SortOption, "Button", "SortOption");
			 //Clicking on Sort Button
			 CommonFunctions.waitForPageLoaded();
			 //wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(SortTable));
			 CommonFunctions.waitForElementTobeClickable(FirstSortDropDown);
			 CommonFunctions.selectFromDropDownByVisibleTextUpdated(FirstSortDropDown, data[176], "First Sort By DropDown");
			 //Clicking the Value On SortBy Drop down
			 CommonFunctions.waitForElementTobeClickable(SecondSortDropDown);
			 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SecondSortDropDown, data[177], "Second Sort By DropDown");
			 //Clicking order on sort
			 CommonFunctions.waitForElementTobeClickable(SortButton);
			 CommonFunctions.clickButtonOrLink(SortButton, "Button", "Sort Button");
			 //Clicking Sort Button
			 CommonFunctions.waitForPageLoaded();
			   wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetSelection));
			    CommonFunctions.clickButtonOrLink(CostSheetSelection, "HyperLink", "Cost Sheet HyperLink");
			    //Clicking on CostSheet HyperLink
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(CreatedCostSheet);
				  CommonFunctions.clickButtonOrLink(CreatedCostSheet, "HyperLink", "CreatedCostSheet");
				  //Clicking on Created Cost Sheet
				  wait.until(ExpectedConditions.titleIs(data[144]));
				  CommonFunctions.waitForPageLoaded();
			    //Clicking on CostSheet HyperLink
			  
			    wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(ProductColorWay);
			    CommonFunctions.clickButtonOrLink(ProductColorWay, "textBox", "Product ColrWayTextBox");
			    //Clicking on Product colorway Text Box
			    CommonFunctions.gettingParentWindow();
			    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
			    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
			    //Clicking productColorWayHyperLink 
			    CommonFunctions.switchingChildWindow();
			    //Switching Child window
			    ColorWayType=By.linkText(data[170]);
			    CommonFunctions.waitForElementTobeClickable(ColorWayType);
			    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
			    //Clicking on Retail Item
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ProductNumberTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(ProductNumberTextBox, data[171], "ProductNumber");
			    //Entering a Product Number
			    CommonFunctions.waitForElementTobeClickable(SearchButton);
			    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
			    //Clicking Search Button
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
			    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
			    //Clicking on Choose Button
			    CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			  
		   }
		catch(Exception e){
			fail=true;
			log.error("Exception in AddRetailItemColorWay"+e);
			throw e;
		}
		return true;
	}
	public static boolean AddRetailItemColorWayForCostSheetForBusinessAdmin(String [] data) throws Exception{
		try{
                wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(ProductColorWay);
			    CommonFunctions.clickButtonOrLink(ProductColorWay, "textBox", "Product ColrWayTextBox");
			    //Clicking on Product colorway Text Box
			    CommonFunctions.gettingParentWindow();
			    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
			    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
			    //Clicking productColorWayHyperLink 
			    CommonFunctions.switchingChildWindow();
			    //Switching Child window
			    ColorWayType=By.linkText(data[170]);
			    CommonFunctions.waitForElementTobeClickable(ColorWayType);
			    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
			    //Clicking on Retail Item
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ProductNumberTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(ProductNumberTextBox, data[171], "ProductNumber");
			    //Entering a Product Number
			    CommonFunctions.waitForElementTobeClickable(SearchButton);
			    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
			    //Clicking Search Button
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
			    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
			    //Clicking on Choose Button
			    CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			  
		   }
		catch(Exception e){
			fail=true;
			log.error("Exception in AddRetailItemColorWay"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AddSecondRetailItemColorWay(String [] data) throws Exception{
		try{
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.visibilityOfElementLocated(ContentstableEditButton));
			    CommonFunctions.clickButtonOrLink(ContentstableEditButton, "HyperLink", "ContentsTableEditButton");
			    //Clicking on contents table Edit Button
			    CommonFunctions.waitForPageLoaded();
			    wait.until(ExpectedConditions.titleIs(data[169]));
			    CommonFunctions.waitForElementTobeClickable(AddRowsButtonInRetailItemColorway);
			    CommonFunctions.clickButtonOrLink(AddRowsButtonInRetailItemColorway, "Image", "Add rows Button");
			    //Clicking on Add Rows Button
			    wait.until(ExpectedConditions.visibilityOfElementLocated(RetailItemColorWayTable));
			    ColorWayType=By.linkText(data[266]);
			    CommonFunctions.clickButtonOrLink(ColorWayType, "ColorWayTye");
			    //Adding row
			    CommonFunctions.clickButtonOrLink(UnitRatioTable, "table", "UnitRatiotable");
			    CommonFunctions.waitForElementTobeClickable(ProductColorWay2);
			    CommonFunctions.clickButtonOrLink(ProductColorWay2, "table", "Product ColrWayTextBox");
			    //Clicking on Product colorway Text Box
			    CommonFunctions.gettingParentWindow();
			    CommonFunctions.waitForElementTobeClickable(productColorWayHyperLink);
			    CommonFunctions.clickButtonOrLink(productColorWayHyperLink, "HyperLink", "productColorWayHyperLink");
			    //Clicking productColorWayHyperLink 
			    CommonFunctions.switchingChildWindow();
			    //Switching Child window
			    ColorWayType=By.linkText(data[170]);
			    CommonFunctions.waitForElementTobeClickable(ColorWayType);
			    CommonFunctions.clickButtonOrLink(ColorWayType, "HyperLink", "ColorWayType");
			    //Clicking on Retail Item
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ProductNumberTextBox);
			    CommonFunctions.enterTextInTextboxUpdated(ProductNumberTextBox, data[265], "ProductNumber");
			    //Entering a Product Number
			    CommonFunctions.waitForElementTobeClickable(SearchButton);
			    CommonFunctions.clickButtonOrLink(SearchButton, "Button", "Serach Button");
			    //Clicking Search Button
			    CommonFunctions.waitForPageLoaded();
			    CommonFunctions.waitForElementTobeClickable(ChooseColorWay);
			    CommonFunctions.clickButtonOrLink(ChooseColorWay, "HyperLink", "ChooseButton");
			    //Clicking on Choose Button
			    CommonFunctions.switchParentWindow();
			    driver.switchTo().defaultContent();
				driver.switchTo().frame("contentframe");
			    //Switching Frame
			    CommonFunctions.waitForPageLoaded();
			  }
		catch(Exception e){
			fail=true;
			log.error("Exception in AddRetailItemColorWay"+e);
			throw e;
		}
		return true;
		}
	
	
	
	
	
	public static boolean CreateCostSheetTemplate(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ProductExpandImage);
			CommonFunctions.clickButtonOrLink(ProductExpandImage, "Image", "Expansion product Image");
			//Clicking + button
			CommonFunctions.waitForElementTobeClickable(ApproximateVolume);
			CommonFunctions.clickButtonOrLink(ApproximateVolume, "table", "Approximate Volume");
			//Clicking out side of the table
			CommonFunctions.waitForElementTobeClickable(ApproximateVolumeInputTextBox);
			CommonFunctions.enterTextInTextboxUpdated(ApproximateVolumeInputTextBox, data[227], "Approximate Value");
			//Entering the Approximate value
			CommonFunctions.waitForElementTobeClickable(UpdateRFQActionDropDown);
		   CommonFunctions.selectFromDropDownByVisibleTextUpdated(UpdateRFQActionDropDown, data[165], "Create Cost Sheet Template");
			//Clicking Cost Sheet Template Option
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CreateCostSheetTemplateWindow));
			CommonFunctions.waitForElementTobeClickable(CostSheetTypeDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetTypeDropDown, data[166], "CostSheetType");
			//Selection CostSheet Type
			CommonFunctions.waitForElementTobeClickable(ColorWayFirstValue);
			CommonFunctions.clickButtonOrLink(ColorWayFirstValue, "value", "ColorWay First Value");
			//clicking first value Of ColorValue
			CommonFunctions.waitForElementTobeClickable(AddButton);
			CommonFunctions.clickButtonOrLink(AddButton, "Hyperlink", "Add HyperLink");
			//Adding first value Of ColorValue
			CommonFunctions.waitForElementTobeClickable(CostSheetName);
			CommonFunctions.enterTextInTextboxUpdated(CostSheetName, data[167], "Cost Sheet Name text Box");
			//Entering the value of the Cost Sheet Text Box
			CommonFunctions.waitForElementTobeClickable(WaveDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(WaveDropDown, data[161], "WaveDropDown");
			//Selecting Wave Drop down value
			CommonFunctions.waitForElementTobeClickable(Currency);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(Currency, data[168], "Currency");
			//Selecting Currency 
			CommonFunctions.waitForElementTobeClickable(SaveButton);
			CommonFunctions.clickButtonOrLink(SaveButton, "Button","Save");
			//Clicking on Save Button
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetCreateConfirmationTable));
		    wait.until(ExpectedConditions.visibilityOfElementLocated(CloseButtonOfCreateCostSheetWindow));
			CommonFunctions.clickButtonOrLink(CloseButtonOfCreateCostSheetWindow, "Button", "CloseButton");
			//Clicking on Close Button
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetDoneButton));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[144]));
			
		}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in UpdateRFQ"+e);
			throw e;
		}
		return true;
	}
	public static boolean CreateCostSheetTemplateOfRetailItem(String [] data) throws Exception{
		try{
			CommonFunctions.waitForElementTobeClickable(ProductExpandImage);
			CommonFunctions.clickButtonOrLink(ProductExpandImage, "Image", "Expansion product Image");
			//Clicking + button
			CommonFunctions.waitForElementTobeClickable(UpdateRFQActionDropDown);
			 /*Select dropdDown = new Select(driver.findElement(By.xpath("//b[contains(text(),'Actions:')]//following::select[1][contains(@id,'costingActions')]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
    		   String RequiredValue=allOptions.get(i).getText();
    		    System.out.println(RequiredValue);
             }*/
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(UpdateRFQActionDropDown, data[165], "Create Cost Sheet Template");
			//Clicking Cst Sheet Template Option
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CreateCostSheetTemplateWindow));
			CommonFunctions.waitForElementTobeClickable(CostSheetTypeDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(CostSheetTypeDropDown, data[166], "CostSheetType");
			//Selection CostSheet Type
			CommonFunctions.waitForElementTobeClickable(ColorWayFirstValue);
			CommonFunctions.clickButtonOrLink(ColorWayFirstValue, "value", "ColorWay First Value");
			//clicking first value Of ColorValue
			CommonFunctions.waitForElementTobeClickable(AddButton);
			CommonFunctions.clickButtonOrLink(AddButton, "Hyperlink", "Add HyperLink");
			//Adding first value Of ColorValue
			CommonFunctions.waitForElementTobeClickable(CostSheetName);
			CommonFunctions.enterTextInTextboxUpdated(CostSheetName, data[167], "Cost Sheet Name text Box");
			//Entering the value of the Cost Sheet Text Box
			CommonFunctions.waitForElementTobeClickable(RetailItemWave);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(RetailItemWave, data[161], "WaveDropDown");
			//Selecting Wave Drop down value
			CommonFunctions.waitForElementTobeClickable(RetailItemCurrecy);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(RetailItemCurrecy, data[168], "Currency");
			//Selecting Currency 
			CommonFunctions.waitForElementTobeClickable(SaveButton);
			CommonFunctions.clickButtonOrLink(SaveButton, "Button","Save");
			//Clicking on Save Button
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetCreateConfirmationTable));
		    wait.until(ExpectedConditions.visibilityOfElementLocated(CloseButtonOfCreateCostSheetWindow));
			CommonFunctions.clickButtonOrLink(CloseButtonOfCreateCostSheetWindow, "Button", "CloseButton");
			//Clicking on Close Button
			wait.until(ExpectedConditions.visibilityOfElementLocated(CostSheetDoneButton));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(CostSheetDoneButton, "Button", "DoneButton");
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[144]));
			
		}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in UpdateRFQ"+e);
			throw e;
		}
	 return true;
	}
	
	
	
	public static boolean navigateToRFQTab(String[] data) throws Exception
	{
		try{
			//wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingHyperLink));
		    CommonFunctions.waitForElementTobeClickable(SourcingHyperLink);
			CommonFunctions.clickButtonOrLink(SourcingHyperLink, "SourcingHyperLink","Sourcing");
			//Clicking on Sourcing Tab
		    wait.until(ExpectedConditions.visibilityOfElementLocated(RFQHyperLink));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(RFQHyperLink, "HyperLink", "RFQHyperLink");
			//Clicking on RFQ tab
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in navigateToRFQTab()", e);
			throw e;
		}
		return true;
	}
	
	public static boolean CreateRFQ(String[] data) throws Exception
	{
		try{
			CommonFunctions.waitForElementTobeClickable(RFQPageActionDropDown);
		    Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='prodseasonActions']")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
    		     String RequiredValue=allOptions.get(i).getText();
    		    // System.out.println(RequiredValue);
    		     if(RequiredValue.contains(data[157]))
    		     {
    		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQPageActionDropDown, RequiredValue, "Source DropDown Selection");
    		    	 CommonFunctions.waitForPageLoaded();
    		    	 wait.until(ExpectedConditions.titleIs(data[158]));
    		    	 break;
    		     }
             }
    		     CommonFunctions.waitForElementTobeClickable(AllCheckBox);
    		     vendorCheckBox="//a[contains(text(),'"+data[159]+"')]//preceding::input[1]";
 		    	VendorCheckBox=By.xpath(vendorCheckBox);
    		     try{
    		    	driver.findElement(By.xpath("//input[@id='source_selectAllCheckBox']")).isSelected();
    		    	CommonFunctions.clickButtonOrLink(AllCheckBox, "CheckBox", "AllCheckBox");
    		    	//Unchecking the All cehckBox
    		    	try
    		    	{
    		    	CommonFunctions.waitForElementTobeClickable(VendorCheckBox);
    		    	CommonFunctions.clickButtonOrLink(VendorCheckBox, "CheckBox", "VendorCheckBox");
    		    	log.info(data[159]+" is only checked");
    		    	}
    		    	catch(Exception e){
    		    		fail=true;
    		    		log.error("User Should have Been added the "+data[159]+" as Suuplier");
    		    		throw e; 
    		    	}
    		    	}
    		     catch(Exception e){
    		    	 CommonFunctions.waitForElementTobeClickable(VendorCheckBox);
     		    	 CommonFunctions.clickButtonOrLink(VendorCheckBox, "CheckBox", "VendorCheckBox");
     		    	 log.info(data[158]+" is only checked");
    		     }
    		     CommonFunctions.waitForElementTobeClickable(SelectButton);
    		     CommonFunctions.clickButtonOrLink(SelectButton, "Button", "SelectButton");
    		     //Clicking Select Button
    		     wait.until(ExpectedConditions.visibilityOfElementLocated(RFQCreateButton));
    		     CommonFunctions.waitForPageLoaded();
    		     wait.until(ExpectedConditions.titleIs(data[158]));
    		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQColorway, data[160], "ColrwayDropDown");
    		     //Selecting colorway
    		     CommonFunctions.waitForElementTobeClickable(RFQWave);
    		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQWave, data[161], "WaveDropDown");
    		     //Selecting Wave
    		     CommonFunctions.waitForElementTobeClickable(RFQRequestDate);
    		     CommonFunctions.enterTextInTextboxUpdated(RFQRequestDate, data[162], "RFQRequestDate");
    		     //Entering the RFQ Request date
    		     CommonFunctions.waitForElementTobeClickable(RFQCutOffDate);
    		     CommonFunctions.enterTextInTextboxUpdated(RFQCutOffDate, data[163], "RFQ Cut Off date");
    		     //Entering RFQ Cutoff date
    		     CommonFunctions.waitForElementTobeClickable(RFQCreateButton);
    		     CommonFunctions.clickButtonOrLink(RFQCreateButton, "Button", "Create Button");
    		     //clicking Create Button
    		     wait.until(ExpectedConditions.titleIs(data[164]));
    		     CommonFunctions.waitForPageLoaded();
    		     }
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateRFQ()", e);
			throw e;
		}
		return true;
	}
	
	public static boolean CreateRFQ_Vendor(String[] data) throws Exception
	{
		try{
			CommonFunctions.waitForElementTobeClickable(RFQPageActionDropDown);
		    Select dropdDown = new Select(driver.findElement(By.xpath("//select[@id='prodseasonActions']")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
    		     String RequiredValue=allOptions.get(i).getText();
    		    // System.out.println(RequiredValue);
    		     if(RequiredValue.contains(data[157]))
    		     {
    		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQPageActionDropDown, RequiredValue, "Source DropDown Selection");
    		    	 CommonFunctions.waitForPageLoaded();
    		    	 wait.until(ExpectedConditions.titleIs(data[158]));
    		    	 break;
    		     }
             }
    		     CommonFunctions.waitForElementTobeClickable(AllCheckBox);
    		     vendorCheckBox="//a[contains(text(),'"+data[159]+"')]//preceding::input[1]";
 		    	VendorCheckBox=By.xpath(vendorCheckBox);
    		     try{
    		    	driver.findElement(By.xpath("//input[@id='source_selectAllCheckBox']")).isSelected();
    		    	CommonFunctions.clickButtonOrLink(AllCheckBox, "CheckBox", "AllCheckBox");
    		    	//Unchecking the All cehckBox
    		    	try
    		    	{
    		    	CommonFunctions.waitForElementTobeClickable(VendorCheckBox);
    		    	CommonFunctions.clickButtonOrLink(VendorCheckBox, "CheckBox", "VendorCheckBox");
    		    	log.info(data[159]+" is only checked");
    		    	}
    		    	catch(Exception e){
    		    		fail=true;
    		    		log.error("User Should have Been added the "+data[159]+" as Suuplier");
    		    		throw e; 
    		    	}
    		    	}
    		     catch(Exception e){
    		    	 CommonFunctions.waitForElementTobeClickable(VendorCheckBox);
     		    	 CommonFunctions.clickButtonOrLink(VendorCheckBox, "CheckBox", "VendorCheckBox");
     		    	 log.info(data[158]+" is only checked");
    		     }
    		     CommonFunctions.waitForElementTobeClickable(SelectButton);
    		     CommonFunctions.clickButtonOrLink(SelectButton, "Button", "SelectButton");
    		     //Clicking Select Button
    		     CommonFunctions.waitForPageLoaded();
    		     CommonFunctions.waitForElementTobeClickable(RFQCreateButton);
    		     wait.until(ExpectedConditions.titleIs(data[158]));
    		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQColorway, data[160], "ColrwayDropDown");
    		     //Selecting colorway
    		     CommonFunctions.waitForElementTobeClickable(RFQWave);
    		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(RFQWave, data[161], "WaveDropDown");
    		     //Selecting Wave
    		     CommonFunctions.waitForElementTobeClickable(RFQRequestDate);
    		     CommonFunctions.enterTextInTextboxUpdated(RFQRequestDate, data[162], "RFQRequestDate");
    		     //Entering the RFQ Request date
    		     CommonFunctions.waitForElementTobeClickable(RFQCutOffDate);
    		     CommonFunctions.enterTextInTextboxUpdated(RFQCutOffDate, data[163], "RFQ Cut Off date");
    		     //Entering RFQ Cutoff date
    		     CommonFunctions.waitForElementTobeClickable(ResponsibleEngineer);
    		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ResponsibleEngineer, data[275], "Responsible Engineer");
    		     //Selecting responsible Engineer
    		     CommonFunctions.waitForElementTobeClickable(ResponsibleCostEngineer);
    		     CommonFunctions.selectFromDropDownByVisibleTextUpdated(ResponsibleCostEngineer, data[0], "Responsible Cost Engineer");
    		     CommonFunctions.waitForElementTobeClickable(RFQCreateButton);
    		     CommonFunctions.clickButtonOrLink(RFQCreateButton, "Button", "Create Button");
    		     //clicking Create Button
    		     wait.until(ExpectedConditions.titleIs(data[164]));
    		     CommonFunctions.waitForPageLoaded();
    		     }
		catch(Exception e){
			fail=true;
			log.error("Exception in CreateRFQ()", e);
			throw e;
		}
		return true;
	}
	public static boolean navigateToProduct(String[] data) throws Exception  
	{
		try{
			//Added refresh code below as to create another material BOM require this as we need to close library + sign
		   driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
			if(driver.findElements(ProductLink).size()==0) 
			{
				// Click on Libraries
				
				CommonFunctions.clickButtonOrLink(Material.libraryLink, "Link", "Library Link");
			}
			//Click on Color link
		    driver.findElement(ProductLink).click();
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
			//Switch frame
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[26]));
		}
          catch(Exception e){
			fail=true;
			log.error("Exception in navigateUptoCreateDiffrntTypesOfMaterial()"+e);
		   throw e;
          }
		return true;
	}
	
	public static boolean navigateToProductforPC46(String[] data) throws Exception
	{
		try{
			//Added refresh code below as to create another material BOM require this as we need to close library + sign
		   driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
			if(driver.findElements(ProductLink).size()==0) 
			{
				// Click on Libraries
				CommonFunctions.clickButtonOrLink(Material.libraryLink, "Link", "Library Link");
			}
			//Click on Color link
			driver.findElement(ProductLink).click();
			//Switch frame
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[457]));
		
          }catch(Exception e){
			fail=true;
			log.error("Exception in navigateToProductforPC46()"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean navigateToProduct_TC_24(String[] data) throws Exception
	{
		try{
			//Added refresh code below as to create another material BOM require this as we need to close library + sign
		   driver.switchTo().defaultContent();
			driver.switchTo().frame("sidebarframe");
			if(driver.findElements(ProductLink).size()==0) 
			{
				// Click on Libraries
				CommonFunctions.clickButtonOrLink(Material.libraryLink, "Link", "Library Link");
			}
			//Click on Color link
			driver.findElement(ProductLink).click();
			//Switch frame
			driver.switchTo().defaultContent();
			driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[143]));
		
          }catch(Exception e){
			fail=true;
			log.error("Exception in navigateUptoCreateDiffrntTypesOfMaterial()", e);
			throw e;
		}
		return true;
	}
	
	public static boolean SearchProduct(String[] data) throws Exception
	{
		try{
			ProductType=By.linkText(data[6]);
			CommonFunctions.waitForElementTobeClickable(ProductType);
			CommonFunctions.clickButtonOrLink(ProductType, "HyperLink", "AssortMent/Solid");
			//Choosing the product type as Retail Item
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(ProductNumberSearch);
			CommonFunctions.enterTextInTextboxUpdated(ProductNumberSearch, data[155], "product number");
			//Entering the Product Number
			CommonFunctions.clickButtonOrLink(SearchProductButton, "Button", "Search");
			//wait.until(ExpectedConditions.titleIs(data[4]));
			//waiting for the expected Pagetitle to appear
			CommonFunctions.waitForPageLoaded();
			}
		 catch(Exception e){
			fail=true;
			log.error("Exception in SearchAssortmentOrSolidProduct()", e);
			throw e;
		}
		return true;
	}
	public static boolean SearchProduct1(String[] data) throws Exception
	{
		try{
			ProductType=By.linkText(data[11]);
			CommonFunctions.waitForElementTobeClickable(ProductType);
			CommonFunctions.clickButtonOrLink(ProductType, "HyperLink", "AssortMent/Solid");
			//Choosing the product type as Retail Item
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(ProductNumberSearch);
			CommonFunctions.enterTextInTextboxUpdated(ProductNumberSearch, data[155], "product number");
			//Entering the Product Number
			CommonFunctions.clickButtonOrLink(SearchProductButton, "Button", "Search");
			//wait.until(ExpectedConditions.titleIs(data[4]));
			//waiting for the expected Pagetitle to appear
			CommonFunctions.waitForPageLoaded();
			}
		 catch(Exception e){
			fail=true;
			log.error("Exception in SearchAssortmentOrSolidProduct()", e);
			throw e;
		}
		return true;
	}
	public static boolean SearchProduct_RetailItem(String[] data) throws Exception
	{
		try{
			ProductType=By.linkText(data[6]);
			CommonFunctions.waitForElementTobeClickable(ProductType);
			CommonFunctions.clickButtonOrLink(ProductType, "HyperLink", "RetailItem");
			//Choosing the product type as Retail Item
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(ProductNumberSearch);
			CommonFunctions.enterTextInTextboxUpdated(ProductNumberSearch, data[154], "product number");
			//Entering the Product Number
			CommonFunctions.clickButtonOrLink(SearchProductButton, "Button", "Search");
			//wait.until(ExpectedConditions.titleIs(data[4]));
			//waiting for the expected Pagetitle to appear
			CommonFunctions.waitForPageLoaded();
			}
		 catch(Exception e){
			fail=true;
			log.error("Exception in SearchProduct_RetailItem()", e);
			throw e;
		}
		return true;
	}
	public static boolean SearchProductforPC46(String[] data) throws Exception
	{
		try{
			ProductType=By.linkText(data[6]);
			CommonFunctions.waitForElementTobeClickable(ProductType);
			CommonFunctions.clickButtonOrLink(ProductType, "HyperLink", "AssortMent/Solid");
			//Choosing the product type as Retail Item
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(ProductNumberSearch);
			CommonFunctions.enterTextInTextboxUpdated(ProductNumberSearch,prodNumberForTC24 , "product number");
			//Entering the Product Number
			CommonFunctions.clickButtonOrLink(SearchProductButton, "Button", "Search");
			//wait.until(ExpectedConditions.titleIs(data[4]));
			//waiting for the expected Pagetitle to appear
			CommonFunctions.waitForPageLoaded();
			}
		 catch(Exception e){
			fail=true;
			log.error("Exception in SearchProductforPC46()", e);
			throw e;
		}
		return true;
	}
	public static boolean SearchProduct_TC_24(String[] data) throws Exception
	{
		try{
			ProductType=By.linkText(data[6]);
			CommonFunctions.waitForElementTobeClickable(ProductType);
			CommonFunctions.clickButtonOrLink(ProductType, "HyperLink", "AssortMent/Solid");
			//Choosing the product type as Retail Item
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(ProductNumberSearch);
			CommonFunctions.enterTextInTextboxUpdated(ProductNumberSearch, prodNumberForTC24, "product number");
			//Entering the Product Number
			CommonFunctions.clickButtonOrLink(SearchProductButton, "Button", "Search");
			//wait.until(ExpectedConditions.titleIs(data[4]));
			//waiting for the expected Pagetitle to appear
			CommonFunctions.waitForPageLoaded();
			}
		 catch(Exception e){
			fail=true;
			log.error("Exception in SearchAssortmentOrSolidProduct()", e);
			throw e;
		}
		return true;
	}
	public static boolean SearchRetailItemProduct(String[] data) throws Exception
	{
		try{
			ProductType=By.linkText(data[170]);
			CommonFunctions.waitForElementTobeClickable(ProductType);
			CommonFunctions.clickButtonOrLink(ProductType, "HyperLink", data[170]);
			//Choosing the product type as Retail Item
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.visibilityOfElementLocated(ProductNumberSearch));
			CommonFunctions.waitForElementTobeClickable(ProductNumberSearch);
			CommonFunctions.enterTextInTextboxUpdated(ProductNumberSearch, data[154], "product number");
			//Entering the Product Number
			CommonFunctions.clickButtonOrLink(SearchProductButton, "Button", "Search");
			//wait.until(ExpectedConditions.titleIs(data[4]));
			//waiting for the expected Pagetitle to appear
			CommonFunctions.waitForPageLoaded();
			}
		 catch(Exception e){
			fail=true;
			log.error("Exception in SearchRetailItemProduct()", e);
			throw e;
		}
		return true;
	}
	
	public static boolean ClickSeasonAndSource(String [] data) throws Exception{
		try{
			 wait.until(ExpectedConditions.visibilityOfElementLocated(Product.detailPageSeasonDD));
			 CommonFunctions.waitForPageLoaded();
             CommonFunctions.selectFromDropDownByVisibleTextUpdated(Product.detailPageSeasonDD, data[3],"Season year");
             //CommonFunctions.handleAlertPopUp1();
             wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
             CommonFunctions.waitForPageLoaded();
             //CommonFunctions.waitForElementTobeClickable(SourcingDropDown);
             Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Source')]//following::select[1]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
             for(int i=0;i<allOptions.size();i++){
    		     String RequiredValue=allOptions.get(i).getText();
    		    // System.out.println(RequiredValue);
    		     if(RequiredValue.contains(data[156]))
    		     {
    		    	 CommonFunctions.selectFromDropDownByVisibleTextUpdated(SourcingDropDown, RequiredValue, "Source DropDown Selection");
    		    	 wait.until(ExpectedConditions.visibilityOfElementLocated(SourcingDropDown));
    		    	 CommonFunctions.waitForPageLoaded();
    		    	 break;
    		     }
    		    
             }
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in ClickSeasonAndSource"+e);
			throw e;
		}
		return true;
	}
	
	
	
	
	
	
	public static boolean PresenceOfSearchPlaceHolderProduct(String [] data) throws Exception{
		try{
			driver.switchTo().defaultContent();
		    driver.switchTo().frame("contentframe");
			prodNumber=data[154];
			removeProduct="//a[text()='"+prodNumber+"']";
			RemoveProduct=By.xpath(removeProduct);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementDisplayed(RemoveProduct, data[154]),"Product is Not Found in PlaceHolder");
			log.info("Searched Product is Found In Places Holder");
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in SearchPlaceHolderProduct"+e);
			throw e;
		}
		return true;
	}
	
	
	
	public static boolean AssertionVerificationOfRemovedProductFromLineSheet(String [] data) throws Exception{
		try{
			searchPlaceHolder(data);
		    //Searching a Existing Place Holder
			removeProduct="//a[text()='"+prodNumber+"']";
			RemoveProduct=By.xpath(removeProduct);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(RemoveProduct, "Removed Product From Line Sheet"),"Product is Not removed.please check.");
			//Verifying in the Palace holder Page Whether the product is removed or not
			
		}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in AssertionVerificationOfRemovedProductFromLineSheet"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean RemoveProductFromLineSheet(String [] data) throws Exception{
		try{
			removeProduct="//a[contains(text(),'"+prodNumber+"')]//preceding::a[text()='Actions']";
			RemoveProduct=By.xpath(removeProduct);
			productIdentification="//a[text()='"+prodNumber+"')]";
			ProductIdentification=By.xpath(productIdentification);
			wait.until(ExpectedConditions.visibilityOfElementLocated(RemoveProduct));
			CommonFunctions.clickButtonOrLink(RemoveProduct, "HyperLink", "Actions");
			//Clicking on Actions Hyper Link
			wait.until(ExpectedConditions.visibilityOfElementLocated(ProductValueInActionHyperLink));
			ProductType=By.linkText(data[153]);
			CommonFunctions.waitForElementTobeClickable(ProductType);
			CommonFunctions.clickButtonOrLink(ProductType, "HyperLink", "Product Value In Action HyperLInk");
			//Clicking on Product link
			wait.until(ExpectedConditions.visibilityOfElementLocated(TableOfProductHyperLink));
			removeProductDropDown="//a[text()='"+data[152]+"']";
			RemoveProductDropDown=By.xpath(removeProductDropDown);
			CommonFunctions.waitForElementTobeClickable(RemoveProductDropDown);
			CommonFunctions.clickButtonOrLink(RemoveProductDropDown, "HyperLink", "RemoveProductDropDown");
			//Clicking on the Remove Product Option
			CommonFunctions.handleAlertPopUp1();
			CommonFunctions.waitForPageLoaded();
		}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in RemoveProductInLineSheet"+e);
			throw e;
		}
		return true;
	}
	public static boolean AssertionVerificationOfProductRemovalForNonValidUser(String [] data) throws Exception{
		try{
			removeProduct="//a[contains(text(),'"+prodNumber+"')]//preceding::a[text()='Actions']";
			RemoveProduct=By.xpath(removeProduct);
			productIdentification="//a[text()='"+prodNumber+"')]";
			ProductIdentification=By.xpath(productIdentification);
			wait.until(ExpectedConditions.visibilityOfElementLocated(RemoveProduct));
			CommonFunctions.clickButtonOrLink(RemoveProduct, "HyperLink", "Actions");
			//Clicking on Actions Hyper Link
			wait.until(ExpectedConditions.visibilityOfElementLocated(ProductValueInActionHyperLink));
			ProductType=By.linkText(data[153]);
			CommonFunctions.waitForElementTobeClickable(ProductType);
			CommonFunctions.clickButtonOrLink(ProductType, "HyperLink", "Product Value In Action HyperLInk");
			//Clicking on Product link
			wait.until(ExpectedConditions.visibilityOfElementLocated(TableOfProductHyperLink));
			removeProductDropDown="//a[text()='"+data[152]+"']";
			RemoveProductDropDown=By.xpath(removeProductDropDown);
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(RemoveProductDropDown, "Remove Product From PlaceHoler option"), "Remove Product from Place Holder Option Is found.Assertion Failed.Please Check");
			log.info("Remove Product From PlaceHolder option is not present");
		}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in RemoveProductInLineSheet"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean EnterProductAndPlaceHolderDetailsInLineSheet(String [] data) throws Exception{
		try{
			driver.navigate().refresh();
			CommonProjectFunctions.clickMySeasonLink();
			CommonFunctions.selectFromDropDownByVisibleText(CI260.mySeasonYear, data[3]);
			//Click on Line Sheet link
			CommonFunctions.clickButtonOrLink(Product.lineSheet, "link", "Line Sheet");
			//Clicking on Line Sheet
			SeleniumDriver.driver.switchTo().defaultContent();
			SeleniumDriver.driver.switchTo().frame("contentframe");
			CommonFunctions.waitForPageLoaded();
			wait.until(ExpectedConditions.titleIs(data[147]));
			CommonFunctions.waitForElementTobeClickable(OptionsButton);
			CommonFunctions.clickButtonOrLink(OptionsButton, "Button", "Option Button");
			//Clicking on Options Button
			wait.until(ExpectedConditions.visibilityOfElementLocated(FiltersButton));
			CommonFunctions.clickButtonOrLink(FiltersButton, "Button", "FiltersButton");
			//Clicking on Filters Button
			wait.until(ExpectedConditions.visibilityOfElementLocated(FilterDropDown));
			CommonFunctions.enterTextInTextboxUpdated(FilterDropDown, data[151], "Filter Drop Down");
			//Select Value Of the Filters Drop down
			wait.until(ExpectedConditions.visibilityOfElementLocated(ProductTextBox));
			CommonFunctions.enterTextInTextboxUpdated(ProductTextBox, prodNumber, "Product Text Box");
			//Entering the Product Number
			wait.until(ExpectedConditions.visibilityOfElementLocated(LevelDropDown));
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(LevelDropDown, data[148], "Level Drop down");
			//Selecting Level Drop Down value
			wait.until(ExpectedConditions.visibilityOfElementLocated(PlaceHolderDropDown));
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(PlaceHolderDropDown, data[149], "PlaceHolder Drop down");
			//Selecting PlaceHolder Drop Down
			CommonFunctions.waitForElementTobeClickable(ViewsDropDown);
			CommonFunctions.selectFromDropDownByVisibleTextUpdated(ViewsDropDown, data[150], "View Drop down");
			//Selecting View Drop Down
			CommonFunctions.waitForPageLoaded();
			/*CommonFunctions.waitForElementTobeClickable(RunButton);
			CommonFunctions.clickButtonOrLink(RunButton, "Button", "RunButton");*/
			//Clicking on RunButton
			wait.until(ExpectedConditions.titleIs(data[147]));
			}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in searchPlaceHolder"+e);
			throw e;
		}
		return true;
	}
	
	
	
	
	
	
	
	
	
	public static boolean AssertionVerificationOfNonAccessUser(String [] data){
		try{
			 Select dropdDown = new Select(driver.findElement(By.xpath("//a[contains(text(),'Placeholder Status')]//following::tr[1]/td[1]/select[1]")));
		     List<WebElement> allOptions=dropdDown.getOptions();
			 for(int i=0;i<allOptions.size();i++){
		     String RequiredValue=allOptions.get(i).getText();
		     CommonFunctions.AssertFalseVerification(RequiredValue.contains(data[145]), "Remove Product Option is availed.Assertion failed.Please Check");
		     log.info(data[145]+" is not found in i="+i);
		 
		   }
		}
		catch(Exception e){
			
		}
		return true;
	}
	public static boolean searchPlaceHolder(String [] data) throws Exception{
		try{
			  driver.switchTo().defaultContent();
		      driver.switchTo().frame("headerframe");
		      //Switching into Header Frame
		      CommonFunctions.waitForElementTobeClickable(HeaderDropDown);
		      CommonFunctions.selectFromDropDownByVisibleTextUpdated(HeaderDropDown, data[139], "PlaceHolder");
		      CommonFunctions.waitForPageLoaded();
		      //Selecting value in Header Drop down
		      CommonFunctions.waitForElementTobeClickable(HeaderSearch);
		      CommonFunctions.clearTextBox(HeaderSearch, "SearchOfHeader");
		      CommonFunctions.enterTextInTextboxUpdated(HeaderSearch, data[140], "Place Holder Value");
		      //Entering a Existing placeHoler 
		      CommonFunctions.waitForElementTobeClickable(HeaderSearchButton);
		      CommonFunctions.clickButtonOrLink(HeaderSearchButton, "image", "SerachButton");
		      //Clicking Search Button
		      CommonFunctions.waitForPageLoaded();
		      wait.until(ExpectedConditions.titleIs(data[26]));
		}
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in searchPlaceHolder"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean CheckOrChangePlaceHolderStatus(String [] data) throws Exception{
		try{
			
			driver.switchTo().defaultContent();
		    driver.switchTo().frame("contentframe");
		      //Switching into Content  Frame
		   CommonFunctions.waitForElementTobeClickable(PlaceHolderActionsDropDown);
		   Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Actions:')]//following::select[1]")));
		   List<WebElement> allOptions=dropdDown.getOptions();
		   for(int i=0;i<allOptions.size();i++){
			   String RequiredValue=allOptions.get(i).getText();
			   if(RequiredValue.contains(data[141])){
				   CommonFunctions.selectFromDropDownByVisibleTextUpdated(PlaceHolderActionsDropDown,RequiredValue, "Place Holder Action Drop down");  
				   break;
				  }
			   }
		    
		    //Selecting Change State :PlaceHolder value
		    CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.titleIs(data[27]));
		    //Waiting for Expected page to be appear
		    CommonFunctions.waitForElementTobeClickable(LifeCycleStateDropDown);
		    Select dropDownValue = new Select(driver.findElement(By.xpath("//select[@id='lcstate']")));
		    String Selectedvalue = dropDownValue.getFirstSelectedOption().getText();
		    log.info("Selected Value in the Life cycle State is "+Selectedvalue);
		    if(Selectedvalue.equals(data[142])){
		    	log.info("Life cycle State Value is already Updated as"+data[142]);
		    }
		    else{
		    	CommonFunctions.selectFromDropDownByVisibleTextUpdated(LifeCycleStateDropDown,data[142],"LifeCycle State");
		    }
		    CommonFunctions.waitForElementTobeClickable(UpdateButton);
		    CommonFunctions.clickButtonOrLink(UpdateButton, "HyperLink","Update");
		    CommonFunctions.waitForPageLoaded();
		    wait.until(ExpectedConditions.titleIs(data[26]));
		   }
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in CheckOrChangePlaceHolderStatus"+e);
			throw e;
		}
		return true;
	}
	
	
	public static String CreateNewProductForPlaceHolder(String [] data) throws Exception{
		try{
			
			driver.switchTo().defaultContent();
		    driver.switchTo().frame("contentframe");
		      //Switching into Content  Frame
		    GettingText(PlaceHolderType);
		    CommonFunctions.waitForElementTobeClickable(PlaceHolderActionsDropDown);
		     Select dropdDown = new Select(driver.findElement(By.xpath("//td[contains(text(),'Actions:')]//following::select[1]")));
		   // System.out.println(dropdDown);
			   List<WebElement> allOptions=dropdDown.getOptions();
			   for(int i=0;i<allOptions.size();i++){
				   String RequiredValue=allOptions.get(i).getText();
				   //System.out.println(RequiredValue);
				   if(RequiredValue.contains(data[146])){
					   CommonFunctions.selectFromDropDownByVisibleTextUpdated(PlaceHolderActionsDropDown,RequiredValue, "Place Holder Action Drop down");  
					   break;
					  }
				   }
		    //Selecting create NewProduct For place Holder
		    CommonFunctions.waitForPageLoaded();
		    if(ActualValue.equals(data[153]))
		    {
		   wait.until(ExpectedConditions.titleIs(data[143]));
		    //Waiting for Expected page to be appear
		    ProductType= By.linkText(data[6]);
		    CommonFunctions.waitForElementTobeClickable(ProductType);
		    CommonFunctions.clickButtonOrLink(ProductType, "HyperLink", "Assortment/Solid");
		    //Clicking Assortment/Solid Type
		    CommonFunctions.waitForPageLoaded();
		    }
		    wait.until(ExpectedConditions.titleIs(data[143]));
		    productName=CommonFunctions.getRandomString(4);
			CommonFunctions.waitForElementTobeClickable(Product.ProductName);
			SeleniumDriver.driver.findElement(Product.ProductName).clear();
			CommonFunctions.enterTextInTextbox(Product.ProductName,productName);
			if(!data[6].equalsIgnoreCase("Trademark Display")){
				//Select Class
				CommonFunctions.waitForElementTobeClickable(Product.Class);
				CommonFunctions.enterTextInTextbox(Product.Class, data[7]);
				CommonFunctions.waitForElementTobeClickable(Product.Division);
				CommonFunctions.enterTextInTextbox(Product.Division, data[8]);
				CommonFunctions.enterTextInTextbox(Product.Brand, data[9]);
				if(!data[6].equalsIgnoreCase("Trade Marketing Pallet")){
					CommonFunctions.waitForElementTobeClickable(Product.InternalClassification);
					CommonFunctions.enterTextInTextbox(Product.InternalClassification,data[10]);
					//	CommonFunctions.enterTextInTextbox(AstSolid, productData[14]);
					CommonFunctions.waitForElementTobeClickable(Product.AstSolid);
					CommonFunctions.selectFromDropDownByVisibleText(Product.AstSolid, data[11]);
					//	CommonFunctions.enterTextInTextbox(IPSensitive,productData[16]);
					CommonFunctions.selectFromDropDownByVisibleText(Product.IPSensitive,data[12]);
				}

				/*if(data[6].equalsIgnoreCase("Retail")|| data[6].equalsIgnoreCase("Bundle Pack")){
					//Electronics Included
					CommonFunctions.enterTextInTextbox(Product.electronicsIncluded,strElectronicsIncluded);
					//Softgoods Included
					CommonFunctions.enterTextInTextbox(Product.softgoodsIncluded,strSoftgoodsIncluded);
				}*/
			}
			//Click on Save Button
			CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Btn", "Save");
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.lebelProdNum);
			prodNumber=SeleniumDriver.driver.findElement(CommonProjectFunctions.lebelProdNum).getText();
			log.info("Product Number is "+prodNumber);
		if(!data[6].equalsIgnoreCase("Trademark Display")){
			CommonFunctions.waitForElementTobeClickable(Product.distributionChannel);
				CommonFunctions.enterTextInTextbox(Product.distributionChannel,data[13]);
				if(data[6].equalsIgnoreCase("Assortment/Solid")){
					CommonFunctions.enterTextInTextbox(Product.SRPPriceUSD,data[14]);
					CommonFunctions.enterTextInTextbox(Product.USDomestic,data[15]);
					CommonFunctions.enterTextInTextbox(Product.LCPriceUSD,data[16]);
					CommonFunctions.enterTextInTextbox(Product.DOMPriceUSD,data[18]);
					CommonFunctions.enterTextInTextbox(Product.GlobalLamForecast,data[18]);
					CommonFunctions.enterTextInTextbox(Product.GlobalNAForeCast,data[19]);
					CommonFunctions.enterTextInTextbox(Product.GlobalEuForeCast,data[20]);
					CommonFunctions.enterTextInTextbox(Product.GlobalAsiaForeCast,data[21]);
					CommonFunctions.enterTextInTextbox(Product.GlobalPacificForecast,data[22]);
					if(data[23].equalsIgnoreCase(data[25])){
						CommonFunctions.waitForElementTobeClickable(ManualInputWaveForeCast);
						CommonFunctions.clickButtonOrLink(ManualInputWaveForeCast, "checkbox", "Manual Input Wave Forcast");
						log.info("User allowed to give value only in Forecast Qty columns because ManualInputWaveForeCastValue is"+" "+data[23]);
						log.warn("User not allowed to give value in % waveForecast columns because ManualInputWaveForeCastValue is"+" "+data[23]);
					}
					
					if(data[23].equalsIgnoreCase(data[24])){
						log.info("User allowed to give value only in % waveForecast columns because ManualInputWaveForeCastValue is"+" "+data[23]);
						log.warn("User not allowed to give value in Forecast Qty columns because ManualInputWaveForeCastValue is"+" "+data[23]);
					}
				}
				/*if(data[6].equalsIgnoreCase("Retail")|| data[6].equalsIgnoreCase("Bundle Pack")){
					CommonFunctions.enterTextInTextbox(Product.targetCostUSD, strDOMPriceUSD);
				}*/
			}
			//Click View Product Button
			CommonFunctions.clickButtonOrLink(Product.viewProductBtn, "Btn", "View Product");
			CommonFunctions.waitForPageLoaded();
			//getPageTitle();
			wait.until(ExpectedConditions.titleIs(data[144]));
			log.info("View Season Product Information apge successfully appears");
			//	log.info(prodNum);
		    
		   }
		catch(Exception e)
		{
			fail=true;
			log.error("Exception in CheckOrChangePlaceHolderStatus"+e);
			throw e;
		}
		return prodNumber;
	}
	
	public static boolean NavigateToDetailsTab(String[] data) throws Exception{
		try{
			 wait.until(ExpectedConditions.visibilityOfElementLocated(Details));
			 CommonFunctions.waitForPageLoaded();
			CommonFunctions.clickButtonOrLink(Details, "link", "Details");
			 //Click on Details Tab
			// if(wait.until(ExpectedConditions.titleIs(data[144]))||wait.until(ExpectedConditions.titleIs(data[222])))
			 //{
				 CommonFunctions.waitForPageLoaded();
				 log.info("Product Details Page Appears");
			// }
			
			
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in NavigateToDetailsTab"+e);
			throw e;
		}
		return true;
	}
	public static boolean ProductRemovalFromAssociatedProducts(String[] data) throws Exception{
		try{
			removeProduct="//a[text()='"+prodNumber+"']";
			RemoveProduct=By.xpath(removeProduct);
			removeProductDropDown="//a[contains(text(),'"+prodNumber+"')]//preceding::select[1]";
			RemoveProductDropDown=By.xpath(removeProductDropDown);
			driver.switchTo().defaultContent();
		    driver.switchTo().frame("contentframe");
			CommonFunctions.waitForElementTobeClickable(RemoveProductDropDown);
			/*Select dropdDown = new Select(driver.findElement(By.xpath("//a[contains(text(),'"+prodNumber+"')]//preceding::select[1]")));
			  List<WebElement> allOptions=dropdDown.getOptions();
			 for(int i=0;i<allOptions.size();i++){
				   String RequiredValue=allOptions.get(i).getText();
				   System.out.println(RequiredValue);
				   if(RequiredValue.contains(data[145])||RequiredValue.equals(data[145]))
				   {*/
					 CommonFunctions.selectFromDropDownByVisibleTextUpdated(RemoveProductDropDown,data[145], "Place Holder Action Drop down");  
					/*  break;
					  }
				   }*/
			//Selecting Remove Product From Drop-Down value
			CommonFunctions.handleAlertPopUp1();
			CommonFunctions.waitForPageLoaded();
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in ProductRemovalFromAssociatedProducts"+e);
			throw e;
		}
		return true;
	}
	
	public static boolean AssertionVerificationOfRemovedProduct() throws Exception{
		try{
			CommonFunctions.AssertTrueVerification(CommonFunctions.isElementNotPresent(RemoveProduct, "Removed Product"),"The Element Should Not Visible since the Product was removed.Assertion failed.Please Check");
			//Assertion verification of Removed Product
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in ProductRemovalFromAssociatedProducts"+e);
			throw e;
		}
		return true;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public static boolean AssertionVerficationOfAlert(String [] data) throws Exception{
		try{
		   CommonFunctions.AssertEqualsVerification(CommonFunctions.alertMsg, data[138], "Actual and Expected values are not matched.Assertion falied.Please check.");
		   //verifying the Error Text 
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in ManualInputWaveForecastQuantityWithoutPercentageCalculation"+e);
			throw e;
		}
		return true;
	}
	
	public static String CreateProdFromLineSheetForSanitySuite(String [] data) throws Exception{
		try{
			CommonProjectFunctions.clickMySeasonLink();
			//Select Season Year
			CommonFunctions.selectFromDropDownByVisibleText(mySeasonYear, data[3]);
			//Click on Line Sheet link
			CommonFunctions.clickButtonOrLink(Product.lineSheet, "link", "Line Sheet");
			Thread.sleep(1000);
			CommonFunctions.waitForPageLoaded();
		    SeleniumDriver.driver.switchTo().defaultContent();
			SeleniumDriver.driver.switchTo().frame("contentframe");
			CommonFunctions.waitForVisibilityOfElement(Product.lineSheetView);
			CommonFunctions.selectFromDropDownByVisibleText(Product.lineSheetView, data[4]);
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForVisibilityOfElement(Product.lineSheetView);
			CommonFunctions.selectFromDropDownByVisibleText(Product.lineSheetAction, data[5]);
			//Click on Assortment/Solid
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(By.xpath("//td[contains(text(),'Choose a Type')]"));
			CommonFunctions.clickButtonOrLink(By.xpath("//a[contains(text(),'"+data[6]+"')]"), "link", "Product Type");
			CommonFunctions.waitForPageLoaded();
	        productName=CommonFunctions.getRandomString(4);
			CommonFunctions.waitForElementTobeClickable(Product.ProductName);
			SeleniumDriver.driver.findElement(Product.ProductName).clear();
			CommonFunctions.enterTextInTextbox(Product.ProductName,productName);
			if(!data[6].equalsIgnoreCase("Trademark Display")){
				//Select Class
				CommonFunctions.waitForElementTobeClickable(Product.Class);
				CommonFunctions.enterTextInTextbox(Product.Class, data[7]);
				CommonFunctions.waitForElementTobeClickable(Product.Division);
				CommonFunctions.enterTextInTextbox(Product.Division, data[8]);
				CommonFunctions.enterTextInTextbox(Product.Brand, data[9]);
				if(!data[6].equalsIgnoreCase("Trade Marketing Pallet")){
					CommonFunctions.waitForElementTobeClickable(Product.InternalClassification);
					CommonFunctions.enterTextInTextbox(Product.InternalClassification,data[10]);
					//	CommonFunctions.enterTextInTextbox(AstSolid, productData[14]);
					CommonFunctions.waitForElementTobeClickable(Product.AstSolid);
					CommonFunctions.selectFromDropDownByVisibleText(Product.AstSolid, data[11]);
					//	CommonFunctions.enterTextInTextbox(IPSensitive,productData[16]);
					CommonFunctions.selectFromDropDownByVisibleText(Product.IPSensitive,data[12]);
				}

				/*if(data[6].equalsIgnoreCase("Retail")|| data[6].equalsIgnoreCase("Bundle Pack")){
					//Electronics Included
					CommonFunctions.enterTextInTextbox(Product.electronicsIncluded,strElectronicsIncluded);
					//Softgoods Included
					CommonFunctions.enterTextInTextbox(Product.softgoodsIncluded,strSoftgoodsIncluded);
				}*/
			}
			//Click on Save Button
			CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Btn", "Save");
			wait.until(ExpectedConditions.titleIs(data[26]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.lebelProdNum);
			prodNumber=SeleniumDriver.driver.findElement(CommonProjectFunctions.lebelProdNum).getText();
			log.info("Product Number is "+prodNumber);
		if(!data[6].equalsIgnoreCase("Trademark Display")){
			CommonFunctions.waitForElementTobeClickable(Product.distributionChannel);
				CommonFunctions.enterTextInTextbox(Product.distributionChannel,data[13]);
				if(data[6].equalsIgnoreCase("Assortment/Solid")){
					CommonFunctions.enterTextInTextbox(Product.SRPPriceUSD,data[14]);
					CommonFunctions.enterTextInTextbox(Product.USDomestic,data[15]);
					CommonFunctions.enterTextInTextbox(Product.LCPriceUSD,data[16]);
					CommonFunctions.enterTextInTextbox(Product.DOMPriceUSD,data[18]);
					CommonFunctions.enterTextInTextbox(Product.GlobalLamForecast,data[18]);
					CommonFunctions.enterTextInTextbox(Product.GlobalNAForeCast,data[19]);
					CommonFunctions.enterTextInTextbox(Product.GlobalEuForeCast,data[20]);
					CommonFunctions.enterTextInTextbox(Product.GlobalAsiaForeCast,data[21]);
					CommonFunctions.enterTextInTextbox(Product.GlobalPacificForecast,data[22]);
					if(data[23].equalsIgnoreCase(data[25])){
						CommonFunctions.waitForElementTobeClickable(ManualInputWaveForeCast);
						CommonFunctions.clickButtonOrLink(ManualInputWaveForeCast, "checkbox", "Manual Input Wave Forcast");
						log.info("User allowed to give value only in Forecast Qty columns because ManualInputWaveForeCastValue is"+" "+data[23]);
						log.warn("User not allowed to give value in % waveForecast columns because ManualInputWaveForeCastValue is"+" "+data[23]);
					}
					
					if(data[23].equalsIgnoreCase(data[24])){
						log.info("User allowed to give value only in % waveForecast columns because ManualInputWaveForeCastValue is"+" "+data[23]);
						log.warn("User not allowed to give value in Forecast Qty columns because ManualInputWaveForeCastValue is"+" "+data[23]);
					}
				}
				/*if(data[6].equalsIgnoreCase("Retail")|| data[6].equalsIgnoreCase("Bundle Pack")){
					CommonFunctions.enterTextInTextbox(Product.targetCostUSD, strDOMPriceUSD);
				}*/
			}
			//Click View Product Button
			CommonFunctions.clickButtonOrLink(Product.viewProductBtn, "Btn", "View Product");
			CommonFunctions.waitForPageLoaded();
			getPageTitle();
			wait.until(ExpectedConditions.titleIs(data[26]));
			log.info("View Season Product Information apge successfully appears");
			//	log.info(prodNum);
		}
		catch(Exception e){ 
			fail=true;
			log.error("Exception in CreateProductFromLineSheet()", e);
			throw e;
		}
		return prodNumber;
	}
	
	public static String CreateProdFromLineSheetForSanitySuite_TC24(String [] data) throws Exception{
		try{
			CommonProjectFunctions.clickMySeasonLink();
			//Select Season Year
			
			CommonFunctions.selectFromDropDownByVisibleText(mySeasonYear, data[3]);
			//throw new Exception("No Such Element Exception");
			//Click on Line Sheet link
			CommonFunctions.clickButtonOrLink(Product.lineSheet, "link", "Line Sheet");
		    SeleniumDriver.driver.switchTo().defaultContent();
			SeleniumDriver.driver.switchTo().frame("contentframe");
			wait.until(ExpectedConditions.titleIs(data[14]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForVisibilityOfElement(Product.lineSheetView);
			CommonFunctions.selectFromDropDownByVisibleText(Product.lineSheetView, data[4]);
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForVisibilityOfElement(Product.lineSheetView);
			CommonFunctions.selectFromDropDownByVisibleText(Product.lineSheetAction, data[5]);
			//Click on Assortment/Solid
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(By.xpath("//td[contains(text(),'Choose a Type')]"));
			CommonFunctions.clickButtonOrLink(By.xpath("//a[contains(text(),'"+data[6]+"')]"), "link", "Product Type");
			CommonFunctions.waitForPageLoaded();
	        productName=CommonFunctions.getRandomString(4);
			CommonFunctions.waitForElementTobeClickable(Product.ProductName);
			SeleniumDriver.driver.findElement(Product.ProductName).clear();
			CommonFunctions.enterTextInTextbox(Product.ProductName,productName);
			if(!data[6].equalsIgnoreCase("Trademark Display")){
				//Select Class
				CommonFunctions.waitForElementTobeClickable(Product.Class);
				CommonFunctions.enterTextInTextbox(Product.Class, data[7]);
				CommonFunctions.waitForElementTobeClickable(Product.Division);
				CommonFunctions.enterTextInTextbox(Product.Division, data[8]);
				CommonFunctions.enterTextInTextbox(Product.Brand, data[9]);
				if(!data[6].equalsIgnoreCase("Trade Marketing Pallet")){
					CommonFunctions.waitForElementTobeClickable(Product.InternalClassification);
					CommonFunctions.enterTextInTextbox(Product.InternalClassification,data[10]);
					//	CommonFunctions.enterTextInTextbox(AstSolid, productData[14]);
					CommonFunctions.waitForElementTobeClickable(Product.AstSolid);
					CommonFunctions.selectFromDropDownByVisibleText(Product.AstSolid, data[11]);
					//	CommonFunctions.enterTextInTextbox(IPSensitive,productData[16]);
					CommonFunctions.selectFromDropDownByVisibleText(Product.IPSensitive,data[12]);
					CommonFunctions.waitForElementTobeClickable(SegmentDropDown);
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(SegmentDropDown, data[9], "Segment Drop Down");
					//Selecting the Segment Drop down value
					CommonFunctions.waitForElementTobeClickable(SuperCategoryDropDown);
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(SuperCategoryDropDown, data[326], "Super category Drop Down");
					//Selecting the Super category Drop down value
					CommonFunctions.waitForElementTobeClickable(CategoryDropDown);
					CommonFunctions.clickButtonOrLink(CategoryDropDown, "DropDown", "CategoryDropDown");
					CommonFunctions.waitForPageLoaded();
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(CategoryDropDown, data[327], "Category Drop Down");
					//Selecting the  category Drop down value
		            CommonFunctions.waitForElementTobeClickable(LicensorDropDown);
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(LicensorDropDown, data[328], "Licensor Drop Down");
					//Selecting the Licensor Drop down value
					CommonFunctions.waitForElementTobeClickable(PropertyDropDown);
					CommonFunctions.clickButtonOrLink(PropertyDropDown, "Drop-Down", "PropertyDropDown");
					CommonFunctions.waitForPageLoaded();
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(PropertyDropDown, data[329], "Property Drop Down");
					//Selecting the Property Drop down value
					CommonFunctions.waitForElementTobeClickable(FamilyBrandDropDown);
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(FamilyBrandDropDown, data[9], "Family Drop Down");
					//Selecting the Family Brand Drop down value
					CommonFunctions.waitForElementTobeClickable(CoBrandDropDown);
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(CoBrandDropDown, data[329], "Family Drop Down");
					//Selecting the Co-Brand Drop down value
					CommonFunctions.waitForElementTobeClickable(LowerAgeDropDown);
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(LowerAgeDropDown, data[330], "Lower Age Drop Down");
					//Selecting the Lower age Drop down value
					CommonFunctions.waitForElementTobeClickable(UpperAgeDropDown);
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(UpperAgeDropDown, data[330], "Upper Age Drop Down");
					//Selecting the Upper age Drop down value
					CommonFunctions.waitForElementTobeClickable(GenderDropDown);
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(GenderDropDown, data[332], " Gender  Drop Down");
					//Selecting the gender Drop down value
					CommonFunctions.waitForElementTobeClickable(ThirdPartyIndicatorDropDown);
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(ThirdPartyIndicatorDropDown, data[331], "Third party Indicator  Drop Down");
					//Selecting the Third Party Indicator Drop down value
					CommonFunctions.waitForElementTobeClickable(ISODropDown);
					CommonFunctions.selectFromDropDownByVisibleTextUpdated(ISODropDown, data[333], "ISO  Drop Down");
					//Selecting the Third Party Indicator Drop down value
					
					
				}

				/*if(data[6].equalsIgnoreCase("Retail")|| data[6].equalsIgnoreCase("Bundle Pack")){
					//Electronics Included
					CommonFunctions.enterTextInTextbox(Product.electronicsIncluded,strElectronicsIncluded);
					//Softgoods Included
					CommonFunctions.enterTextInTextbox(Product.softgoodsIncluded,strSoftgoodsIncluded);
				}*/
			}
			//Click on Save Button
			CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Btn", "Save");
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
			CommonFunctions.waitForElementTobeClickable(CommonProjectFunctions.lebelProdNum);
			prodNumberForTC24=SeleniumDriver.driver.findElement(CommonProjectFunctions.lebelProdNum).getText();
			log.info("Product Number is "+prodNumberForTC24);
		if(!data[6].equalsIgnoreCase("Trademark Display")){
			CommonFunctions.waitForElementTobeClickable(Product.distributionChannel);
				CommonFunctions.enterTextInTextbox(Product.distributionChannel,data[13]);
				if(data[6].equalsIgnoreCase("Assortment/Solid")){
					CommonFunctions.waitForElementTobeClickable(TotalCost);
					CommonFunctions.enterTextInTextboxUpdated(TotalCost, data[15], "Total Cost");
				}
				/*if(data[6].equalsIgnoreCase("Retail")|| data[6].equalsIgnoreCase("Bundle Pack")){
					CommonFunctions.enterTextInTextbox(Product.targetCostUSD, strDOMPriceUSD);
				}*/
			}
			//Click View Product Button
			CommonFunctions.clickButtonOrLink(Product.viewProductBtn, "Btn", "View Product");
			wait.until(ExpectedConditions.titleIs(data[144]));
			CommonFunctions.waitForPageLoaded();
			log.info("View Season Product Information apge successfully appears");
			//	log.info(prodNum);
		}
		catch(Exception e){ 
			fail=true;
			log.error("Exception in CreateProductFromLineSheet()", e);
			throw e;
			
			 
		}
		return prodNumberForTC24;
	}
	public static boolean UpdateGlobalForecast(String [] data) throws Exception{
		try{
	    CommonFunctions.waitForElementTobeClickable(ActionsDropDown);
		CommonFunctions.selectFromDropDownByVisibleTextUpdated(ActionsDropDown, data[63], "ActionDropDownValue");
		CommonFunctions.waitForPageLoaded();
        wait.until(ExpectedConditions.titleIs(data[26]));
		CommonFunctions.waitForElementTobeClickable(Product.distributionChannel);
		CommonFunctions.enterTextInTextbox(Product.distributionChannel,data[64]);
		//Selecting Distribution Channel
		CommonFunctions.clearTextBox(Product.GlobalLamForecast, "GlobalLamForecast");
		CommonFunctions.enterTextInTextbox(Product.GlobalLamForecast,data[65]);
		//Entering Global Lam forecast
		CommonFunctions.clearTextBox(Product.GlobalNAForeCast, "GlobalNAForeCast");
		CommonFunctions.enterTextInTextbox(Product.GlobalNAForeCast,data[66]);
		//Entering Global NA Forecast
		CommonFunctions.clearTextBox(Product.GlobalEuForeCast, "GlobalEuForeCast");
		CommonFunctions.enterTextInTextbox(Product.GlobalEuForeCast,data[67]);
		//Entering GlobalE Forecast 
		CommonFunctions.clearTextBox(Product.GlobalAsiaForeCast, "GlobalAsiaForeCast");
		CommonFunctions.enterTextInTextbox(Product.GlobalAsiaForeCast,data[68]);
		//Entering Global Asia Forecast
		CommonFunctions.clearTextBox(Product.GlobalPacificForecast, "GlobalPacificForecast");
		CommonFunctions.enterTextInTextbox(Product.GlobalPacificForecast,data[69]);
		//Global pacific Forecast
		CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Btn", "Save");
		//Clicking on Save Button
		CommonFunctions.waitForPageLoaded();
		wait.until(ExpectedConditions.titleIs(data[26]));
		}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateGobalForecast"+e);
			throw e;
		}
		 return true;
		 }
	
	public static void enterPercentageWaveForecastValuesWR2(String [] data) throws Exception {
		try{
		 for(int i=1,j=1;i<=standardNoOfColumns;i++){
			 //Assigning the Dynamic xpath into the String variable
	        IncreaseColumnPercentageWaveForecast="//td[contains(text(),'% Wave Forecast')]//following::td"+"["+i+"]"; 
	        //Assigning above string a xpath into a Webelement
			 PercentageWaveForecast2Columns=By.xpath(IncreaseColumnPercentageWaveForecast);
			 //Assigning the Dynamic xpath into the String variable
			IncreaseColumnPercentageWaveForecast1=IncreaseColumnPercentageWaveForecast+"/div/input["+j+"]";
			 //Assigning above string a xpath into a Webelement
			enterValuesInWaveRequirement=By.xpath(IncreaseColumnPercentageWaveForecast1);
			CommonFunctions.waitForElementTobeClickable(PercentageWaveForecast2Columns);
			//Thread.sleep(2000);
			CommonFunctions.clickButtonOrLink(PercentageWaveForecast2Columns, "table");
			CommonFunctions.waitForElementTobeClickable(enterValuesInWaveRequirement);
			//CommonFunctions.clickButtonOrLink(enterValuesInWaveRequirement, "table");
		    CommonFunctions.enterTextInTextbox(enterValuesInWaveRequirement, data[70+i]);
			log.info("value entered for column"+" "+i);
			 
		 }
		        CommonFunctions.clickButtonOrLink(DoneButton, "btn", "Done");
				CommonFunctions.waitForPageLoaded();
				wait.until(ExpectedConditions.titleIs(data[26]));
		}
		catch(Exception e){
			fail=true;
			log.error("error while entering the value" +e);
			throw e;
		}
		 }
	
	public static void AssertionVerficationOfForecastQuantity(String [] data) throws Exception{
		try{
		 CommonFunctions.waitForPageLoaded();
		 JavascriptExecutor jse = (JavascriptExecutor)driver;
		// jse.executeScript("window.scrollBy(0,2000)", "");
		 for(int i=1;i<=standardNoOfColumns;i++){
			 // //Assigning the Dynamic xpath into the String variable
		 foreCastQuantityString="//td[contains(text(),'Forecast Qty')]//following::td"+"["+i+"]";
		//Assigning above string a xpath into a Webelement
		 ForeCastQuantity=By.xpath(foreCastQuantityString);
		 CommonFunctions.waitForElementTobeClickable(ForeCastQuantity);
		 //getting forecast value to Comapre with excel calculated value
	     GettingText(ForeCastQuantity);
	     CommonFunctions.waitForPageLoaded();
	     CommonFunctions.AssertEqualsVerification(ActualValue, data[104+i], "Forecast Quantity Values are not matched.Assertion failed.Please check.");
	     }
		}
		 catch(Exception e){
			 fail=true;
			 log.error("Exception in ForecastQuantityVerification");
			 throw e;
		 }
		}
	public static boolean UpdateGlobalForecastForWaveForecastPercentage(String [] data) throws Exception{
		try{
	    CommonFunctions.waitForElementTobeClickable(ActionsDropDown);
		CommonFunctions.selectFromDropDownByVisibleTextUpdated(ActionsDropDown, data[63], "ActionDropDownValue");
		CommonFunctions.waitForPageLoaded();
        wait.until(ExpectedConditions.titleIs(data[26]));
		CommonFunctions.waitForElementTobeClickable(Product.distributionChannel);
		CommonFunctions.enterTextInTextbox(Product.distributionChannel,data[64]);
		//Selecting Distribution Channel
		CommonFunctions.clearTextBox(Product.GlobalLamForecast, "GlobalLamForecast");
		CommonFunctions.enterTextInTextbox(Product.GlobalLamForecast,data[65]);
		//Entering Global Lam forecast
		CommonFunctions.clearTextBox(Product.GlobalNAForeCast, "GlobalNAForeCast");
		CommonFunctions.enterTextInTextbox(Product.GlobalNAForeCast,data[66]);
		//Entering Global NA Forecast
		CommonFunctions.clearTextBox(Product.GlobalEuForeCast, "GlobalEuForeCast");
		CommonFunctions.enterTextInTextbox(Product.GlobalEuForeCast,data[67]);
		//Entering GlobalE Forecast 
		CommonFunctions.clearTextBox(Product.GlobalAsiaForeCast, "GlobalAsiaForeCast");
		CommonFunctions.enterTextInTextbox(Product.GlobalAsiaForeCast,data[68]);
		//Entering Global Asia Forecast
		CommonFunctions.clearTextBox(Product.GlobalPacificForecast, "GlobalPacificForecast");
		CommonFunctions.enterTextInTextbox(Product.GlobalPacificForecast,data[69]);
		//Global pacific Forecast
		if(data[70].equals(data[24]))
		{
			CommonFunctions.waitForElementTobeClickable(ManualInputWaveForeCast);
			CommonFunctions.clickButtonOrLink(ManualInputWaveForeCast, "checkbox", "Manual Input Wave Forcast");
			log.info("User allowed to give value only in Forecast Qty columns because ManualInputWaveForeCastValue is"+" "+data[70]);
			log.warn("User not allowed to give value in % waveForecast columns because ManualInputWaveForeCastValue is"+" "+data[70]);
		}
		CommonFunctions.clickButtonOrLink(Product.SaveBtn, "Btn", "Save");
		//Clicking on Save Button
		CommonFunctions.waitForPageLoaded();
		wait.until(ExpectedConditions.titleIs(data[26]));
		
			}
		catch(Exception e){
			fail=true;
			log.error("Exception in UpdateGobalForecast"+e);
			throw e;
		}
		 return true;
		 }
	
	 public static boolean EditWaveRequirement2(String [] data) throws Exception{
		 boolean value = false;
		 try{
		 CommonFunctions.waitForPageLoaded();	
		 CommonFunctions.waitForElementTobeClickable(Details);
		 CommonFunctions.clickButtonOrLink(Details, "link", "Details");
		 CommonFunctions.waitForPageLoaded();
		 JavascriptExecutor jse = (JavascriptExecutor)driver;
		 jse.executeScript("window.scrollBy(0,2000)", "");
		 jse.executeScript("window.scrollBy(1000,0)", "");
		 CommonFunctions.waitForElementTobeClickable(labelWaveRequirements2Edit);
		 CommonFunctions.clickButtonOrLink(labelWaveRequirements2Edit, "link", "Details");
		 CommonFunctions.waitForPageLoaded();
		 wait.until(ExpectedConditions.titleIs(data[27]));
		 }
		 catch(Exception e){
			 fail=true;
			 log.info("Exception in CreateProductFromLineSheet()", e);
			 throw e;
		 }
		return true;
		}
	 
	 public static void enterWaveForecastQuantityValuesWR2(String [] data) throws Exception {
			try{
			 for(int i=1,j=1;i<=standardNoOfColumns;i++){
				 //Assigning the Dynamic xpath into the String variable
				  IncreaseColumnWaveQuantityForecast="//td[contains(text(),'Forecast Qty')]//following::td"+"["+i+"]";
				  //Assigning above string a xpath into a Webelement
				  ForeCastQuantityColumns=By.xpath(IncreaseColumnWaveQuantityForecast);
					 //Assigning the Dynamic xpath into the String variable
				  IncreaseColumnWaveQuantityForecast1=IncreaseColumnWaveQuantityForecast+"/div/input["+j+"]";
				//Assigning above string a xpath into a Webelement
				  EnterValuesInWaveRequirement1=By.xpath(IncreaseColumnWaveQuantityForecast1);
				  CommonFunctions.waitForElementTobeClickable(ForeCastQuantityColumns);
				
				  CommonFunctions.clickButtonOrLink(ForeCastQuantityColumns, "table");
				  CommonFunctions.waitForElementTobeClickable(EnterValuesInWaveRequirement1);
				 // CommonFunctions.clickButtonOrLink(enterValuesInWaveRequirement1, "table");
			      CommonFunctions.enterTextInTextbox(EnterValuesInWaveRequirement1,data[27+i]);
				  log.info("value entered for column"+" "+i);
				 
				 
			 }
			        CommonFunctions.clickButtonOrLink(DoneButton, "btn", "Done");
					CommonFunctions.waitForPageLoaded();
					
					}
			catch(Exception e){
				fail=true;
				log.error("Exception enterWaveForecastQuantityValuesWR2" +e);
				throw e;
			}
			 }
	 
	 public static void AsserionVerficationOfenterWaveForecastQuantityValuesWR2(String [] data) throws Exception {
			try{
			
				 //Assigning the Dynamic xpath into the String variable
				  IncreaseColumnWaveQuantityForecast="//td[contains(text(),'Forecast Qty')]//following::td[1]";
				  //Assigning above string a xpath into a Webelement
				  ForeCastQuantityColumns=By.xpath(IncreaseColumnWaveQuantityForecast);
					 //Assigning the Dynamic xpath into the String variable
				  IncreaseColumnWaveQuantityForecast1=IncreaseColumnWaveQuantityForecast+"/div/input[1]";
				//Assigning above string a xpath into a Webelement
				  EnterValuesInWaveRequirement1=By.xpath(IncreaseColumnWaveQuantityForecast1);
				  CommonFunctions.waitForElementTobeClickable(ForeCastQuantityColumns);
				  CommonFunctions.clickButtonOrLink(ForeCastQuantityColumns, "table");
				  CommonFunctions.waitForElementTobeClickable(EnterValuesInWaveRequirement1);
				 // CommonFunctions.clickButtonOrLink(enterValuesInWaveRequirement1, "table");
			      CommonFunctions.enterTextInTextbox(EnterValuesInWaveRequirement1,data[28]);
			      ForeCastQuantityColumns=By.xpath("//td[contains(text(),'Forecast Qty')]//following::td[2]");
			      CommonFunctions.waitForElementTobeClickable(ForeCastQuantityColumns);
				  CommonFunctions.clickButtonOrLink(ForeCastQuantityColumns, "table");
				  EnterValuesInWaveRequirement1=By.xpath("//td[contains(text(),'Forecast Qty')]//following::td[2]/div/input[1]");
				  CommonFunctions.handleAlertPopUp1();
				  CommonFunctions.AssertEqualsVerification(CommonFunctions.alertMsg, data[138], "Actual and Expected values are not matched.Assertion falied.Please check.");
				  CommonFunctions.clickButtonOrLink(DoneButton, "btn", "Done");
				  CommonFunctions.waitForPageLoaded();
					
					}
			catch(Exception e){
				fail=true;
				log.error("Exception enterWaveForecastQuantityValuesWR2" +e);
				throw e;
			}
			 }
	 
	 public static void AssertionVerificationOnForecastQuantity(String [] data) throws Exception {
			try{
				 wait.until(ExpectedConditions.titleIs(data[26]));
			     CommonFunctions.waitForElementTobeClickable(TotalForecastQuantity);
			     CommonFunctions.waitForPageLoaded();
			     GettingText(TotalForecastQuantity);
			     CommonFunctions.AssertEqualsVerification(ActualValue, data[62], "Actual Forecast Quantity and Expected Forecast Qunatity are not matched.Assertion Failed.Please check");
				//Verifying the Forecast Quantity value
				}
			     catch(Exception e){
				fail=true;
				log.error("Excepition in AssertionVerificationOnForecastQuantity" +e);
				throw e;
			}
			 }
	 
	 public static  String getPageTitle(){
		 //Common function getting the page title when navigating into another page
		 try{
		 pageTitle=driver.getTitle();
		 log.info(pageTitle);
		 }
		 catch(Exception e){
			 fail=true;
			 log.error("Exception in getPageTitle");
			 throw e;
		 }
		 return pageTitle;
	 }
	 public static String GettingText(By by){
			
			try{
				wait.until(ExpectedConditions.elementToBeClickable(by));
				ActualValue=SeleniumDriver.driver.findElement(by).getText();
				}
			catch(TimeoutException t){
				fail=true;
				log.error("Exception in waitForElementTobeClicable()", t);
				throw t;
				
			}
			return ActualValue;
			
			}
	 public static String GettingTextExpected(By by){
			
			try{
				wait.until(ExpectedConditions.elementToBeClickable(by));
				ExpectedValue=SeleniumDriver.driver.findElement(by).getText();
				}
			catch(TimeoutException t){
				fail=true;
				log.error("Exception in waitForElementTobeClicable()", t);
				throw t;
				
			}
			return ExpectedValue;
			
			}
	 
  @BeforeMethod
	  public void Refresh(){
		  if(driver!=null && runmodes[count+1].equalsIgnoreCase("y")){
			  driver.navigate().refresh();
			  log.info("Driver is refreshed");
			}
		  else{
			  log.info("No Driver is Launched");
		  }
	  }
  
  
	@AfterMethod
	public void reporterdataSetResult(){
		if(skip)
			Utility.dataSetResult(suiteSanityXls, this.getClass().getSimpleName(), count+2, "SKIP");
		
		else if(fail||CommonFunctions.error){
			Utility.dataSetResult(suiteSanityXls, this.getClass().getSimpleName(), count+2, "FAIL");
			isTestPass=false;
	}
		else
			Utility.dataSetResult(suiteSanityXls, this.getClass().getSimpleName(), count+2, "PASS");
		skip=false;
		fail=false;
		CommonFunctions.error=false;	
	}
	
	@BeforeTest
	public void checkTestcaseSkip() throws Exception{

		if(!Utility.isCaseRunnable(suiteSanityXls, this.getClass().getSimpleName())){
			log.debug("Skipping "+this.getClass().getSimpleName()+" as runmode is set to no");
			throw new SkipException("Skipping "+this.getClass().getSimpleName()+" as runmode is set to no");
		}
		runmodes=Utility.getDataSetRunmodeTest(suiteSanityXls, this.getClass().getSimpleName());
	}
	
	@AfterTest
	public void reportTestcaseResult(){
		if(isTestPass){
			Utility.dataSetResult(suiteSanityXls,"Testcases", Utility.getRowNum(suiteSanityXls, this.getClass().getSimpleName()),"PASS");
		}else
			Utility.dataSetResult(suiteSanityXls,"Testcases", Utility.getRowNum(suiteSanityXls, this.getClass().getSimpleName()),"FAIL");

	}

	@DataProvider
	public Object[][] testDataTest(){
		return Utility.getData(suiteSanityXls, this.getClass().getSimpleName());
	}

}
